<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2016-11-28T01:11:34+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Went to 8 Jou Island]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/11/09/went-to-8-jou-island/"/>
    <updated>2016-11-09T20:13:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/11/09/went-to-8-jou-island</id>
    <content type="html"><![CDATA[<p>11/3-11/5 で八丈島にいってきました。
決めたのは10/28の朝でした。</p>

<h2>出発</h2>

<p>は竹橋桟橋から船が出ているのでそこからのっていきます。
船は11/2 22:30(JST)からでていますのでそれでいきました。</p>

<h2>到着</h2>

<p>は11/3 の朝8時ころに底土港に到着します。</p>

<h2>島一周</h2>

<p>朝到着し、やることないので宿に荷物を置いて自轉車を借ります。
この自轉車がブレーキ効かないのであきらめてスクーターを借りました。
滞在時間ずっと使えるように二日借りることにしました。</p>

<p>スクーターかりたあとは島観光として一周まわることにしました。
途中いくつか良いポイントがあったので写真をとったりしましたが、
だいたい2時間ぐらいで島一周できました。</p>

<p>一周してひまだったので、昼飯を宿のちかくで</p>

<h2>釣り 1日目</h2>

<p>やることないなどうしようかなとおもってたら、宿の部屋に入れるようになったので、PCの充電と携帯の充電を
そんなこんなしてたら、時間が16時ごろになったので釣りへ。
この日は釣る気があまりなかったので坊主で終了。
飯は島の適当なラーメン屋で。</p>

<h2>釣り 2日目</h2>

<p>この日は起きてすぐに温泉に行ってみたら、温泉施設自体がどこ行ってもだめで一番遠いとこは、朝10時からでした。
ので温泉は諦めて釣りへ行ってみた。</p>

<p>釣りはじめて30分ぐらいで釣れたし、一人で刺身にして食べるには十分な大きさだしで、あとは昼ごろまで適当に釣ってました。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/hachijo-ipara.jpg" alt="アイッパラ" /></p>

<h2>温泉</h2>

<p>釣りおわったあとは温泉でまったり2時間ほど時間をつぶしてあとは夕日を見にいきました。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/hachijo-sunset.jpg" alt="サンセット" /></p>

<h2>おわり</h2>

<p>たのしい一人旅でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh Permission]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/10/10/fxxking-ssh-permission/"/>
    <updated>2016-10-10T20:14:30+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/10/10/fxxking-ssh-permission</id>
    <content type="html"><![CDATA[<p>またやらかしたので</p>

<h2>経緯</h2>

<p>サーバーにSSHログインが急にできなくなった</p>

<h2>対処</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 744 ~/.ssh</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ItamaeつかってOSのインストールをやってみた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae/"/>
    <updated>2016-10-09T16:43:27+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae</id>
    <content type="html"><![CDATA[<p>9月はRubyKiagiにいってたりしました。
そのときに<a href="http://mikutter.blogspot.jp/2016/09/mikutter-3312-343.html">mikutterのコミッター</a>とかになったようです。</p>

<p>シルバーウィークにThinkPadのOS再インストールをしたのでその記録を</p>

<h2>なにやったの？</h2>

<p><a href="https://twitter.com/mtsmfm">@mtsmfm</a> と以前話していたとき、&ldquo;ansibleつかってOSインストールしてるんだけど、完全自動化できないんですよね~&rdquo; みたいな事を聞いたので<a href="https://github.com/itamae-kitchen/itamae">Itamae</a> をつかってやってみました。
結論から言うと完全自動化は無理だけど、ある程度は自動化できた。</p>

<h3>環境</h3>

<ul>
<li>machine: ThinkPad X250</li>
<li>OS: Gentoo Linux</li>
<li>Provisioning tool: Itamae</li>
<li>repo: <a href="https://github.com/katsyoshi/itamae-recipes">https://github.com/katsyoshi/itamae-recipes</a></li>
</ul>


<h2>インストール</h2>

<p>インストールディスクを起動するところはipmiとか搭載していない(しらべていない)し<a href="https://wiki.openstack.org/wiki/Ironic">Ironic</a>はつかいたくないので手動で起動し、
sshdの起動とrootのパスワードを設定します。起動したら以下の手順でパーティション作成からカーネルのインストールまでします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git clone https://github.com/katsyoshi/itamae-recipes.git</span>
</span><span class='line'><span class="go">cd itamae-recipes</span>
</span><span class='line'><span class="go">bundle install</span>
</span><span class='line'><span class="go">wget http://ftp.iij.ad.jp/pub/linux/gentoo/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20161006.tar.bz2</span>
</span><span class='line'><span class="go">cp stage3-amd64-20161006.tar.bz2 cookbook/install/stage3.tar.bz2</span>
</span><span class='line'><span class="go">itamae ssh -h nu-machine cookbook/install/gentoo.rb -u root -j cookbook/install/gentoo.json</span>
</span></code></pre></td></tr></table></div></figure>


<p>でOSのインストールまでできるのですが、gentooのインストールメディアだと、diffがインストールされていないのでitamaeからfileのコピーができません。
都度コピーしてください(というよりgentooインストーラーにdiffを入れたほうが早そう)</p>

<h2>パッケージのインストール</h2>

<p>ここまで終ったら、パッケージのインストールします。これも以下コマンドを実行することで終ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">itamae ssh -h nu-machine cookbook/gentoo/emerge.rb -j cookbook/gentoo/package.json</span>
</span></code></pre></td></tr></table></div></figure>


<h2>owari</h2>

<p>ItamaeつかってOSのインストールを実行してみました。diffが失いところがとくにつらいですね。
おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Mikutter]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/08/31/hello-mikutter/"/>
    <updated>2016-08-31T22:55:03+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/08/31/hello-mikutter</id>
    <content type="html"><![CDATA[<p>表題のとおりmikutterをgemでインストールできるようにしてみました。</p>

<h2>どうやって？</h2>

<p><a href="https://rubygems.org">rubygems</a> からはまだインストールはできません。
ので、以下の様にしてgem packageを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git clone github.com/katsyoshi/mikutter.git
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>mikutter
</span><span class='line'><span class="gp">$</span> git checkout reokure-ru
</span><span class='line'><span class="gp">$</span> bundle install
</span><span class='line'><span class="gp">$</span> bundle <span class="nb">exec </span>rake build
</span><span class='line'><span class="gp">$</span> gem install pkg/mikutter-3.5.0.pre.dev.gem
</span><span class='line'><span class="gp">$</span> mikutter
</span></code></pre></td></tr></table></div></figure>


<p>これでmikutterコマンドで起動できるようになっています
これすらめんどうな人は<a href="https://katsyoshi.org/mikutter-3.5.0.pre.dev.gem">ここ</a>にあります。
ダウンロードして <code>gem install mikutter-3.5.0.pre.dev.gem</code> でインストールできます。
プラグインで起動できないとかあるなら必要なgemをインストールしてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RENEWAL MY SITE!!!]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/08/08/renewal-my-site/"/>
    <updated>2016-08-08T21:05:47+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/08/08/renewal-my-site</id>
    <content type="html"><![CDATA[<p>ってのは嘘ではないですが、嘘に近いです。
実はおとといの土曜日に katsyoshi.org をのぞいたら、 <em>nginx</em> の初期ページが表示されたので
とくにコンテンツはないですが、いそいでサイトの復旧をしました。
が、もともとあったファイル置場を失念したため似た感じで再構築してました。
再構築ついでにssl化、<code>nginx</code> から <code>h2o</code> へのWebサーバー変更しました。
あと <code>systemd</code> でデーモン化とかも。</p>

<h2>Let&rsquo;s Encrypt</h2>

<p>リリースされてだいぶたつのですが、<a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a>を利用してみました。
Ubuntu Linux 16.04 では、簡単に導入できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> sudo apt install letsencrypt
</span><span class='line'><span class="gp">$</span> sudo letsencrypt certonly
</span></code></pre></td></tr></table></div></figure>


<p>でいくつかの質問に答えればおわりです。
ここで、戸惑った場面としては認証を受けたいサーバーの確認があるのですが、
サーバーポート443を開ける<a href="https://letsencrypt.jp">必要があり</a>、1回失敗しました。</p>

<h2>H2O</h2>

<p>せっかくだし、<a href="https://h2o.examp1e.net/">H2O</a>を使おうと思います。
インストールはかんたんでいかのようにすればokです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git clone h2o/h2o
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>h2o
</span><span class='line'><span class="gp">$</span> cmake -DCMAKE_INSTALL_PREFIX_PATH<span class="o">=</span>/opt/local .
</span><span class='line'><span class="gp">$</span> make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>設定は<a href="https://h2o.examp1e.net/configure/quick_start.html">ここ</a>と<a href="https://github.com/h2o/h2o/wiki/redirect-HTTP-to-HTTPS">ここ</a>を参考にして以下にしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">user: www-data</span>
</span><span class='line'><span class="go">hosts:</span>
</span><span class='line'><span class="go">  &quot;katsyoshi.org:80&quot;:</span>
</span><span class='line'><span class="go">    listen:</span>
</span><span class='line'><span class="go">      port: 80</span>
</span><span class='line'><span class="go">    paths:</span>
</span><span class='line'><span class="go">      /:</span>
</span><span class='line'><span class="go">        redirect: https://katsyoshi.org</span>
</span><span class='line'><span class="go">hosts:</span>
</span><span class='line'><span class="go">  &quot;katsyoshi.org:443&quot;:</span>
</span><span class='line'><span class="go">    listen:</span>
</span><span class='line'><span class="go">      port: 443</span>
</span><span class='line'><span class="go">      ssl:</span>
</span><span class='line'><span class="go">        certificate-file: /etc/letsencrypt/live/katsyoshi.org/fullchain.pem</span>
</span><span class='line'><span class="go">        key-file: /etc/letsencrypt/live/katsyoshi.org/privkey.pem</span>
</span><span class='line'><span class="go">    paths:</span>
</span><span class='line'><span class="go">      /:</span>
</span><span class='line'><span class="go">        file.dir: /opt/website/top</span>
</span><span class='line'><span class="go">access-log: /var/log/h2o/access.log</span>
</span><span class='line'><span class="go">error-log: /var/log/h2o/error.log</span>
</span><span class='line'><span class="go">pid-file: /var/run/h2o.pid</span>
</span><span class='line'><span class="go">http2-reprioritize-blocking-assets: ON</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://negima.mobi/2015/10/2092">h2o.service</a></h2>

<p>さいきんわだいのしすてむでーってやつででーもん？かしようとおもいます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[Unit]</span>
</span><span class='line'><span class="go">Description=H2O the optimized HTTP/1, HTTP/2 server</span>
</span><span class='line'><span class="go">After=syslog.target network.target remote-fs.target nss-lookup.target</span>
</span><span class='line'>
</span><span class='line'><span class="go">[Service]</span>
</span><span class='line'><span class="go">Type=forking</span>
</span><span class='line'><span class="go">PIDFile=/var/run/h2o.pid</span>
</span><span class='line'><span class="go">ExecStartPre=/opt/local/bin/h2o -c /etc/h2o/h2o.conf -t</span>
</span><span class='line'><span class="go">ExecStart=/opt/local/bin/h2o -c /etc/h2o/h2o.conf -m daemon</span>
</span><span class='line'><span class="go">ExecReload=/bin/kill -s HUP $MAINPID</span>
</span><span class='line'><span class="go">ExecStop=/bin/kill -s QUIT $MAINPID</span>
</span><span class='line'><span class="go">PrivateTmp=true</span>
</span><span class='line'>
</span><span class='line'><span class="go">[Install]</span>
</span><span class='line'><span class="go">WantedBy=multi-user.target</span>
</span></code></pre></td></tr></table></div></figure>


<p>いやーしすてむでーってべんりですねー</p>

<h2>owari</h2>

<p>サイトがぶっとんだのでサイトの復旧？と let&rsquo;s encrypt でのSSL化、 h2oへのウェブサーバー変更と <code>systemd</code> でのデーモン化をやりました。</p>

<p>1年ぶりの日記だたので、Markdownどうかくんだっけ？とか、別のところで大変でした。</p>

<h2>参考サイト</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2015に参加しました(ボランティアスタッフとして)]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/08/25/i-went-to-yapc-asia-as-a-volanteer-staff/"/>
    <updated>2015-08-25T02:42:48+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/08/25/i-went-to-yapc-asia-as-a-volanteer-staff</id>
    <content type="html"><![CDATA[<p>YAPC::Asia 2015にボランティアスタッフとして参加してきました(申請時に公表しないでってしなのでYAPCのスッタフ一覧にはのってないです)。去年も参加しましたが聴講者として参加しました。</p>

<h2>ボランティアスタッフに応募した理由</h2>

<p>彼女ができるときいて応募しました。また、最後の YAPC::Asia と聞いていたので応募しないとなと思ったのがありました。他の理由としては NEET なのでというのもあります。発表者として参加できればよかったのですが、ネタが応募するには弱いなと思い見送りました。そういうこともありボランティアスタッフとして参加しました。</p>

<h2>個人スポンサー</h2>

<p>実は個人スポンサーもやっていましたが、ボランティアスタッフをやるため、個人スポンサーの分のチケットが余っていました。その分はとある人に譲りました。</p>

<h2>0日目(前夜祭)</h2>

<p>0日目は11時集合になっており、スタッフ作業としてノベルティの詰め込み作業と会場設営を行なっていました。</p>

<p>前夜祭自体は初めてのスタッフ作業でしたので、会場係として設営などをしてました。</p>

<h2>1日目</h2>

<p>1日目は始めに作業としてラリーのセッション前、中で同時通訳のレシーバーを配ってました。その後D会場でずっとタイムキーパーをやっておりました。</p>

<p>この日の印象に残ってるセッションとしては <a href="https://twitter.com/kazuho">@kazuhoさん</a> の <a href="http://yapcasia.org/2015/talk/show/dead6890-09b7-11e5-998a-67dc7d574c3a">HTTP/2時代のウェブサイト設計</a> で、 <code>HTTP2</code> になった理由、そのなかで <a href="https://github.com/h2o/h2o">h2o</a> が優れている点を丁寧に説明されてて、これはすぐに使わねばと思わせてくれた発表でした。</p>

<p>この日は懇親会がありましたので、懇親会会場でうろうろしておりました。
懇親会では、知り合いと話してたりしてました。最近、 <a href="https://github.com/itamae-kitchen/itamae">itamae</a> を触っているので、プラグインの話を <a href="https://twitter.com/k0kubun">@k0kubunさん</a> としてました。そのときは <code>pip</code> のリソースプラグイン作りたいとか言ったので <a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">今日作成</a> したのですが、よくかんがえてみると、 <code>cpan</code> のリソースプラグインの方が必要だったのを作成後に思い出しました。</p>

<h2>2日目</h2>

<p>2日目も1日目と同様にD会場で全セッションタイムキーパーやっておりました。</p>

<p>印象に残ったセッションとしては、 <a href="https://github.com/kenjiskywalker">@kenjiskywalkerさん</a> の <a href="http://yapcasia.org/2015/talk/show/f2816038-10ec-11e5-89bf-d7f07d574c3a">我々はどのように冗長化を失敗したのか</a> 、 <a href="https://twitter.com/saiken3110">@saiken3110さん</a> の <a href="http://yapcasia.org/2015/talk/show/0af26fe4-0b7b-11e5-a29c-67dc7d574c3a">MySQLで2億件のシリアルデータと格闘したチューニングの話</a> 、 <a href="https://github.com/Jxck">@Jxckさん</a> の <a href="http://yapcasia.org/2015/talk/show/9e9ae188-fb20-11e4-9a97-8ab37d574c3a">HTTP2 時代の Web</a> がありました。</p>

<p>最後に片づけをし、おわった後スタッフ数人とのみくいに行ってきました。そろそろ解散かなってときに、 twitter を眺めてたら、 <a href="https://twitter.com/Jxck_/status/635075234379399168">@Jxckさんが@t_wadaさんを誘ってる</a> を見つけて無理やり参加させて頂きました。</p>

<p>帰りついたのは朝の4時ごろ(だったと思う)でした。</p>

<h2>おわり</h2>

<p>YAPC::Asia 2015 に参加してきました。23日の日曜日は疲れてたのでずっとぐったりしてました。
楽しい3日間でした!!!!!11</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[こんにちは、いたまえさん]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/08/02/hello-itamae-plugins/"/>
    <updated>2015-08-02T21:33:46+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/08/02/hello-itamae-plugins</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a> を <a href="https://github.com/itamae-kitchen/itamae">itamae</a> の <a href="https://github.com/k0kubun/itamae-plugin-recipe-rbenv">プラグイン</a> を利用してインストールしようとしたら、対象サーバがプロキシーのあるネットワークであり、gitでダウンロードできなかったので、<a href="https://github.com/k0kubun/itamae-plugin-recipe-rbenv/pull/9">httpsを指定できる</a>ようしてもらいました。</p>

<h2>plenv と pyenv</h2>

<p>また、rbenv のプラグインを参考に <a href="https://github.com/katsyoshi/itamae-plugin-recipe-plenv">plenv</a> と <a href="https://github.com/katsyoshi/itamae-plugin-recipe-pyenv">pyenv</a> を作ってみました。</p>

<p>これらふたつのプラグインはまだgemになっていないので、<code>Gemfile</code> に以下のように追加し、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;itamae&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;itamae-plugin-recipe-plenv&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;katsyoshi/itamae-plugin-recipe-plenv&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;itamae-plugin-recipe-pyenv&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;katsyoshi/itamae-plugin-recipe-pyenv&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>recipeとしては以下のようにしてください。</p>

<figure class='code'><figcaption><span>recipe.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;pyenv::system&#39;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;plenv::system&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定例としては、rbenvのプラグインと同じように設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;plenv&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;versions&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;5.22.0&quot;</span><span class="p">,</span> <span class="s2">&quot;5.20.2&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;global&quot;</span>   <span class="p">:</span> <span class="s2">&quot;5.22.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;pyenv&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;versions&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;3.4.3&quot;</span><span class="p">,</span> <span class="s2">&quot;3.5.0b2&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;global&quot;</span>   <span class="p">:</span> <span class="s2">&quot;3.4.3&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearchどの〜]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/06/26/sir-elasticsearch/"/>
    <updated>2015-06-26T00:26:10+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/06/26/sir-elasticsearch</id>
    <content type="html"><![CDATA[<p><a href="https://www.elastic.co/products/kibana">kibana</a> で表示しようとしてたら嵌ったのでメモ</p>

<h2>嵌った原因</h2>

<p>数字をElasticsearchに投げているつもりが文字列を投げていた。
ので対処方法としては、 <code>fluent-plugin-typecast</code> を導入して終了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;match</span> <span class="err">elasticsearch.**.*</span><span class="nt">&gt;</span>
</span><span class='line'>  type typecast
</span><span class='line'>  item_types value:float
</span><span class='line'>  prefix typed
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Elasticsearch</h2>

<p><a href="https://www.fluentd.org">fluentd</a> で集めたデータを <a href="http://www.elasitc.co">Elasticsearch</a> に <a href="https://github.com/uken/fluent-plugin-elasticsearch">fluent-plugin-elastchsearch</a> を利用して入れます。設定は以下のようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;match</span> <span class="err">typed.elasticserch.**.*</span><span class="nt">&gt;</span>
</span><span class='line'>  type elasticsearch
</span><span class='line'>  type_name hoge
</span><span class='line'>  host 127.0.0.1
</span><span class='line'>  port 9200
</span><span class='line'>  logstash_format true
</span><span class='line'>  logstash_prefix logstash
</span><span class='line'>  flash_interval 1s
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>おわり</p>

<h3>参考資料</h3>

<ol>
<li><a href="http://blog.nomadscafe.jp/2014/03/dstat-fluentd-elasticsearch-kibana.html">http://blog.nomadscafe.jp/2014/03/dstat-fluentd-elasticsearch-kibana.html</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-core-types.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-core-types.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[すくりーんきゃすと]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/05/15/screencast-use-gif/"/>
    <updated>2015-05-15T23:47:14+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/05/15/screencast-use-gif</id>
    <content type="html"><![CDATA[<p>LinuxでScreenCast用の環境を整えてみた。</p>

<h2>必要パッケージ</h2>

<ul>
<li>ffmpeg</li>
<li>gtk-recordMyDesktop</li>
</ul>


<h2>使いかた</h2>

<p><code>gtk-recordMyDesktop</code> でデスクトップをキャプチャする。
その後は、 <code>ffmpeg</code> を使って好きな動画形式に変換します。
ここでは、gif画像に変更しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ffmpeg -i ~/screencast.ovg img/screencast.gif
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/screenshot/gtk-recordMyDesktop.gif" width="512" alt="" /></p>

<h3>参考サイト</h3>

<ol>
<li><a href="http://d.hatena.ne.jp/over80/20080802/1217693705">http://d.hatena.ne.jp/over80/20080802/1217693705</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ゴールデンウィークのお買いもの]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/05/11/golden-weak/"/>
    <updated>2015-05-11T21:38:35+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/05/11/golden-weak</id>
    <content type="html"><![CDATA[<p>GWに勢い余って買いものしたのでそれを。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=katsyoshi05-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00J5ZBVFY" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>Roomba買いました。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=katsyoshi05-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B004N3RQ5W" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>机買いました。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=katsyoshi05-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00G21MID8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>Kinesis買いました。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=katsyoshi05-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B000EVPGTU" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=katsyoshi05-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B000P4D5F8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>コーヒーセット買いました。</p>

<p>もともと欲しかったのもあり、勢いで買ってしまいました。</p>

<p>Roombaの方は炬燵をまだ出してるのもあり、動かしていないです。</p>

<p>机は1ヶ月ほど前に椅子を買ったのもあり、買いました。
足が短いので、椅子を低くしたいのですが、天板が高いので足置き場をつくってそこにのせています。
それ以外の気になる点としては、角がちょっと痛いというぐらいで今のところ満足しています。</p>

<p>Kinesisは以前仕事で週1日だけ使わせてもらったことがあったので、気に入ったのでそれで買いました。
赤軸モデルを買ったのですが、カチカチ音がしないのでこれはこれでイイカンジです。</p>

<p>コーヒーセットは、机がきてから買う予定で買いました。このドリッパ用の用紙を見付けるのが大変で、2時間ほど彷徨いました。</p>

<p>これで欲しいものは大体そろったのですが、最近デスクトップPC欲しくなってきたんだよなぁ…</p>

<p>もうしわけねぇ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バイバイX240]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/05/10/shred-x240/"/>
    <updated>2015-05-10T11:05:19+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/05/10/shred-x240</id>
    <content type="html"><![CDATA[<p>新しく<a href="http://blog.katsyoshi.org/blog/2015/04/15/looks-good-new-machine/">X250</a>を買ったので、X240の中身を削除します。
以下のコマンドでできるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo shred -n 3 -v /dev/sda
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Softether]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/05/03/softether/"/>
    <updated>2015-05-03T16:28:42+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/05/03/softether</id>
    <content type="html"><![CDATA[<p>Ubuntuに<a href="https://www.softether.jp/">SoftEther</a>を導入してみた。</p>

<h2>マシン構成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OS: Ubuntu Linux 14.4.0.2 LTS
</span><span class='line'>Machine: SakuraVPS 1GBプラン</span></code></pre></td></tr></table></div></figure>


<h2>インストール</h2>

<p><a href="http://qiita.com/Makotonton/items/18683a9f1e846433c035">ここ</a>を参考にインストール、設定すればいけます。</p>

<h3>嵌ったところ</h3>

<p><code>nginx</code> で <code>ssl</code> 動かしてた。</p>

<p>設定ができなかったが <code>sudo service nginx stop</code> として、 <code>nginx</code> を止めたあと、 <code>sudo vpncmd</code> とすれば設定できます。</p>

<h2>おわり</h2>

<p>自作のRailsアプリCIを自宅で動かそうと思ってVPN導入してみたが、一人で開発してるしCIに問題がない限り必要ないというのを構築したあと気が付いた。</p>

<h3>参考</h3>

<ol>
<li><a href="http://qiita.com/Makotonton/items/18683a9f1e846433c035">http://qiita.com/Makotonton/items/18683a9f1e846433c035</a></li>
<li><a href="https://www.softether.jp/">https://www.softether.jp/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Studio Codeを使ってみた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/04/30/use-visual-studio-code/"/>
    <updated>2015-04-30T13:09:55+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/04/30/use-visual-studio-code</id>
    <content type="html"><![CDATA[<p><a href="https://code.visualstudio.com/">Visual Studio Code</a>というものがでたので普段利用している
Linuxで使ってみた。</p>

<h2>インストール</h2>

<p>は簡単にできて、ウェブサイトからZIPファイルをダウンロードして展開し、展開したディレクトリで
以下のコマンドで実行できます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./Code
</span></code></pre></td></tr></table></div></figure>


<h2>感想</h2>

<p>VSC使ってみたけど、日本語表示がされない。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/screenshot/vsc_japanese.png" alt="" /></p>

<p><em>追記</em></p>

<p>フォントを変更すると表示できるようになりました。</p>

<p><code>File -&gt; Preferences -&gt; User Settings</code> から、 <code>settings.json</code> を開き、
以下のように追加する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;editor.fontFamily&quot;</span><span class="p">:</span> <span class="s2">&quot;Ricty&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/screenshot/vsc_settings.png" alt="" /></p>

<p><em>追記おわり</em></p>

<p>デバッガ動かすためにMONOが必要。</p>

<p><img src="http://blog.katsyoshi.org/images/screenshot/vsc_debugger_needed_mono.png" alt="" /></p>

<p>補完がよさそう。Rubyでの補完の出かたです。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/screenshot/vsc_completion.png" alt="" /></p>

<p>などあります。</p>

<p>そのうちなにかこれで書くかなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[おにゅーな]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/04/15/looks-good-new-machine/"/>
    <updated>2015-04-15T01:15:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/04/15/looks-good-new-machine</id>
    <content type="html"><![CDATA[<p>以前買った<a href="http://blog.katsyoshi.org/blog/2014/08/20/gentoo-install-battle-part-i/">X240</a>があまりにも使い辛いので
X250を買った。それ以外にもメガネも一つ買ってみた。</p>

<p>あと欲しいのは、ルンバかなあ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファイル名間違えてテスト通らなかった話]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/04/09/file-name-needs-scss-extention/"/>
    <updated>2015-04-09T15:38:49+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/04/09/file-name-needs-scss-extention</id>
    <content type="html"><![CDATA[<p><a href="https://rails-assets.org">rails-assets.org</a> から <code>bootstrap-sass-official</code> をインストールし、動かしたら、 test環境でテストが落ちてたのでメモ。</p>

<h2>オチ</h2>

<p>CSSの<a href="https://twitter.com/izumin5210/status/586054782994874368">ファイル名</a>が <code>application.css.scss</code> じゃなかった。</p>

<h2>設定</h2>

<p>まず、<code>Gemfile</code> に以下のように追記をします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rails-assets.org&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-asstes-bootstrap-sass-official&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはいつも通りにインストールします。
次に <code>app/assets/javascripts/application.js</code> や <code>app/assets/stylesheets/application.css</code> に必要な読み込みを<a href="http://qiita.com/izumin5210/items/73f93347a9fe458dbbf5">設定</a>します。</p>

<h2>問題</h2>

<p>以上の設定が終ったあと、 <code>cucumber</code> でテストを実行すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span> <span class="n">to</span> <span class="n">import</span> <span class="ow">not</span> <span class="n">found</span> <span class="ow">or</span> <span class="ss">unreadable</span><span class="p">:</span> <span class="n">bootstrap</span><span class="o">-</span><span class="n">sass</span><span class="o">-</span><span class="n">official</span><span class="o">/</span><span class="n">bootstrap</span><span class="o">-</span><span class="n">sprockets</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>などといわれますのでオチを参考にファイル名変更して終了です。</p>

<h2>おわり</h2>

<p>おわり</p>

<h3>参考</h3>

<ol>
<li><a href="http://qiita.com/izumin5210/items/73f93347a9fe458dbbf5">http://qiita.com/izumin5210/items/73f93347a9fe458dbbf5</a></li>
<li><a href="https://twitter.com/izumin5210/status/586054782994874368">https://twitter.com/izumin5210/status/586054782994874368</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Known_hostsに載っていないホストに接続確認しないようにする]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/04/07/many-ssh-connection/"/>
    <updated>2015-04-07T19:40:03+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/04/07/many-ssh-connection</id>
    <content type="html"><![CDATA[<p>昨日の<a href="http://blog.katsyoshi.org/blog/2015/04/06/careless-miss/">続き</a>で、 <code>lxc</code> で大量のサーバを立てて、
SSH接続すると、ホストごとに毎回接続確認が必要なので、確認せずに接続できるようにした。</p>

<h2>解決方法</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -oStrictHostKeyChecking=no anywhere.example.com</span></code></pre></td></tr></table></div></figure>


<p>で接続確認の <code>yes or no</code> が出てこなくなります。</p>

<h2>おわり</h2>

<p>おわり。</p>

<p>そのうち <code>lxc</code> で100個ほどのインスタンスのベンチマークとりたい…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不注意なこと]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/04/06/careless-miss/"/>
    <updated>2015-04-06T22:25:28+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/04/06/careless-miss</id>
    <content type="html"><![CDATA[<p>Ubuntuで <code>lxc</code> を利用して、サーバを立ててたときに嵌ったこと</p>

<h2>はじまり</h2>

<p>Proxyを利用してインターネットに接続している。
このネットワークとして <code>ping</code> はLAN内なら届くが、外(google.com)とかには出ない。
設定がうまくいってるかどうかの確認する方法として、 <code>apt-get update</code> を利用して確認している。</p>

<p>最初は、 <code>lxc</code> の設定がうまくいっていないと思いなんども見直してたりした。
それでもWANの方に出ることができなかった。</p>

<p>サーバのネットワーク設定がよくないと思ってなんども見直したけど、問題なさそう。
最後に <code>sudo -i</code> で root にログインしたあと、 <code>apt-get update</code> したら、
ダウンロードはじまり、次へ進むことができた。</p>

<h2>原因</h2>

<p>原因としては <code>sudo command</code> で実行しても <code>Defaults reset_env</code> で環境変数がリセットされてたようだった。
ので、<code>Defaults keep_env+="PATH"</code> とか追加して解決した。</p>

<h2>おわり</h2>

<p>簡単なミスで3時間ほど時間を費したのでなんとかしたい。</p>

<h3>参考URL</h3>

<ol>
<li><a href="http://www.maepachi.com/blog/entry?id=128">http://www.maepachi.com/blog/entry?id=128</a></li>
<li><a href="http://office.tsukuba-bunko.org/ppoi/entry/systemwide-rbenv">http://office.tsukuba-bunko.org/ppoi/entry/systemwide-rbenv</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asakusa.rbの300回記念パーティに行ってきた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/03/18/party-of-asakusa-dot-rb-300th/"/>
    <updated>2015-03-18T01:26:33+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/03/18/party-of-asakusa-dot-rb-300th</id>
    <content type="html"><![CDATA[<p><a href="https://asakusarb.doorkeeper.jp/events/22018">Asakusa.rbの300回記念パーティ</a>に行ってきた。
ずーっと、devopsについてちょっと気になることがあったので<a href="https://twitter.com/hsbt">@hsbtさん</a>に聞いてみたりしてた。</p>

<p>あとは終ったあとかなり早い花見してた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuでmaster以外のブランチを利用してデプロイする方法]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/03/17/heroku-deploy-anther-branch/"/>
    <updated>2015-03-17T12:08:17+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/03/17/heroku-deploy-anther-branch</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git push heroku your-branch:master
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ol>
<li><a href="http://stackoverflow.com/questions/1823397/heroku-using-git-branch-is-confusing">http://stackoverflow.com/questions/1823397/heroku-using-git-branch-is-confusing</a></li>
<li><a href="http://qiita.com/pugiemonn/items/bd79abbc72c20d8ee9a7">http://qiita.com/pugiemonn/items/bd79abbc72c20d8ee9a7</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emerge --syncをgitにかえたはなし]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/02/24/portage2git/"/>
    <updated>2015-02-24T00:13:18+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/02/24/portage2git</id>
    <content type="html"><![CDATA[<p>portageはデフォルトだと <code>rsync</code> を利用しての更新をしているので、
<code>git</code> を用いた方法に変更します。</p>

<h2>準備</h2>

<p><code>portage</code> を <code>2.2.17</code> に変更し、USEフラグとして <code>git</code> をつかいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># USE=&quot;git ${USE}&quot; emerge -av \=portage-2.2.17</span>
</span></code></pre></td></tr></table></div></figure>


<p>つぎに、Gitのリポジトリを見に行くように<a href="http://qiita.com/wjn/items/a3b71059211711501e35">設定</a>します。</p>

<p>と設定してあとはいつもどおり <code>sudo eix-sync</code> させるだけで大丈夫です。</p>

<h2>おわり</h2>

<p>基本的にはリンク先だけ見てればいけると思います。</p>

<p>引越ししてWiMAXの電波の入りがわるくなったので鉄製ボウル買おうかとおもってたら2時間ほど<a href="https://ingress.com">徘徊</a>してました。</p>

<h3>参考サイト</h3>

<ol>
<li><a href="http://qiita.com/wjn/items/a3b71059211711501e35">http://qiita.com/wjn/items/a3b71059211711501e35</a></li>
<li><a href="https://wiki.gentoo.org/wiki/Project:Portage/Sync">https://wiki.gentoo.org/wiki/Project:Portage/Sync</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
