<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-09-09T15:18:43+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SATySFi使って本書いてみてる]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/09/satysfi/"/>
    <updated>2018-09-09T14:29:46+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/09/satysfi</id>
    <content type="html"><![CDATA[<p>技術書典5出しますので、それを書くために <a href="https://ocaml.org/">OCaml</a> で作成された <a href="https://github.com/gfngfn/SATySFi">SATySFi</a> を使いはじめました。</p>

<h2>インストール</h2>

<p>今回は <a href="https://opam.ocaml.org">OPAM</a> を利用してインストールをしています。まあ単純にパッケージが今普段使いしてるOSにないだけなんですけどね。
インストール手順は <a href="https://github.com/gfngfn/SATySFi/blob/master/README-ja.md">公式のREADME.md</a> を参考にしています。</p>

<h3>OPAM</h3>

<p>OCaml Package Manager の略らしいです。
こいつは <code>OCaml</code> のインストールもしてくれるのでこれを利用します。
<code>OPAM</code> のインストールは簡単で以下の<a href="https://opam.ocaml.org/doc/Install.html">スクリプトを実行する</a>だけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin</span></code></pre></td></tr></table></div></figure>


<h3>OCaml</h3>

<p><code>OPAM</code> のインストールが終ったら、 <code>OCaml</code> をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opam switch 4.06.0
</span><span class='line'>eval `opam config env`</span></code></pre></td></tr></table></div></figure>


<h3>SATySFi</h3>

<p><code>OPAM</code> の準備が整ったら <code>SATySFi</code> の準備、インストールをします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opam repository satysfi-external https://github.com/gfngfn/satysfi-external-repo.git
</span><span class='line'>opam update
</span><span class='line'>git clone https://github.com/gfngfn/SATySFi.git
</span><span class='line'>cd SATiSFi
</span><span class='line'>
</span><span class='line'>opam pin add satysfi .
</span><span class='line'>opam install satysfi</span></code></pre></td></tr></table></div></figure>


<h2>compile!!!!</h2>

<p>これでインストールされたのでとりあえずリポジトリにある <code>demo/demo.saty</code> をコンパイルしてみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd demo
</span><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<p>なにも準備していないといきなりエラーがでますのでそれを<a href="https://github.com/gfngfn/SATySFi/blob/master/memo-ja-how-to-use.md">公式を参考にして</a>解消します。
解消できたら <code>demo.pdf</code> ができますのでこれでつかえるようになります。</p>

<h2>おわり</h2>

<p>ちょっと簡単でしたが、 <code>satysfi</code> の導入日記でした。</p>

<p>そんなことより<a href="https://techbookfest.org/event/tbf05">技術書典5</a>に出します。ネタは酒に関するネタでやっていく予定です。
仕上がっていれば <code>え37</code> に居るとおもわれます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wireguardをはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita/"/>
    <updated>2018-08-17T00:38:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita</id>
    <content type="html"><![CDATA[<p>title 通り、 <a href="https://www.wireguard.com/"><code>wiregaurd</code></a> で家と <a href="https://vps.sakura.ad.jp/">さくらのVPS</a> にあるサーバーを繋いでみました</p>

<h2>install</h2>

<p>導入は簡単で <code>gentoo</code> は公式にあるので</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo emerge wireguard</span></code></pre></td></tr></table></div></figure>


<p>だけで、 <code>ubuntu</code> の場合も<a href="https://www.wireguard.com/install/#packages">インストールガイド</a>があるため簡単にインストールできます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt install software-properties-common
</span><span class='line'>sudo add-apt-repository ppa:wireguard/wireguard
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install wireguard</span></code></pre></td></tr></table></div></figure>


<h2>引込</h2>

<p>あとは<a href="https://speakerdeck.com/fadis/zuo-tuteli-jie-suruwireguard">非常にかんたん</a>で<a href="https://wiki.archlinux.jp/index.php/WireGuard">ここ</a>を適宜読み替えることで
接続できます。</p>

<h2>おわり</h2>

<p>あとは、再起動時に自動で接続するように変更する必要がありそうですがつながったし、おそいのでこれでおわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Itamae from docker!!]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/07/09/hello/"/>
    <updated>2018-07-09T22:54:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/07/09/hello</id>
    <content type="html"><![CDATA[<p><a href="https://itamae.kitchen/">Itamae</a> の plugin 書いててそろそろ test 欲しいなあとおもって2年くらいたちましたが、
ようやく <a href="https://www.docker.com/">Docker</a> 使って test 書きました。</p>

<h3>方向性</h3>

<p>ここでテストを実施するとして何に対しておこなうのかというのを考えましたが、E2Eのテストだけで良いだろうという方向でテストを書くようにしています。
VMを立てて実行することにはチョット大袈裟だろうということでもっと簡単に、楽にということで <code>docker</code> を選択しています。</p>

<p>itamae で E2E のテストなのでここでは <a href="https://serverspec.org/">serverspec</a> を利用してテストを行います。
E2E のテスト準備として <code>docker</code> 内で最初に目的のレシピを実施し、そのレシピが正しく動作しているかをテストしています。</p>

<h3>準備とテスト実施</h3>

<p>準備として以下の <code>gem</code> を追加しますが、 <a href="https://github.com/swipely/docker-api">docker-api.gem</a> の方はなくてもとくに問題ないです。
<code>serverspec</code> の対象バックエンドで <code>docker</code> が<a href="https://tsub.hatenablog.com/entry/2016/06/25/222508">指定できるようになります</a>が、 <code>docker</code> 内 (<code>docker run -t hoge bundle exec serverspec</code> など) で <code>serverspec</code> を実施すれば実行できますので、好みで追加しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec.add_development_dependency "docker-api"
</span><span class='line'>spec.add_development_dependency "serverspec"</span></code></pre></td></tr></table></div></figure>


<p>次に <code>Dockerfile</code> を作成します。ここでは単純に必要な準備を実施、テストしたいディレクトリの追加、 <code>bundler</code> を利用して <code>gem</code> のインストールを実施してから、対象のディレクトリで <code>itamae</code> の <code>local</code> を指定して対象の <code>docker</code> にレシピ適用します。そのあと <code>docker run</code> や <code>serverspec</code> を実施することでテストをすることが可能となります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM ruby
</span><span class='line'>RUN echo "gem: --no-rdoc --no-ri" &gt;&gt; /.gemrc
</span><span class='line'>RUN gem install bundler
</span><span class='line'>ADD . /app
</span><span class='line'>WORKDIR /app
</span><span class='line'>RUN bundle install
</span><span class='line'>RUN bundle exec itamae local samples/recipe.rb
</span><span class='line'>CMD bundle exec rake</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a></h3>

<p><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a> でできるようになってます。
とくに <a href="https://docker.io">docker.io</a> とかで公開していませんので、以下に例を</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /path/to/itamae-plugin-resource-pip
</span><span class='line'>docker build -t katsyoshi/itamae-plugin-resource-pip .
</span><span class='line'>docker run -t katsyoshi/itamae-plugin-resource-pip bundle exec rake</span></code></pre></td></tr></table></div></figure>


<h3>おわり</h3>

<p>これやろうと思って調べてたらみつからずに <code>Dockerfile</code> 書き終えて、<a href="https://travis-ci.org">travis</a> を追加しようとしたときに、<a href="https://twitter.com/sue445">@sue445</a> さんが<a href="https://sue445.hatenablog.com/entry/2018/05/01/115522">やってた</a>のをみつけてしまった。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2018]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018/"/>
    <updated>2018-06-03T23:44:28+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018</id>
    <content type="html"><![CDATA[<p>RubyKaigi2018 に行ってきた</p>

<h2>1日目</h2>

<p>1日目は、 ずっと会場Aにいました。</p>

<ol>
<li>Matz: <a href="http://rubykaigi.org/2018/presentations/yukihiro_matz.html#may31">Keynote</a></li>
<li>Aaron Patterson: <a href="http://rubykaigi.org/2018/presentations/tenderlove.html#may31">Analyzing and Reducing Ruby Memory Usage</a></li>
<li>Kenta Murata, and Yusaku Hatanaka: <a href="http://rubykaigi.org/2018/presentations/mrkn.html#may31">Deep Learning Programming on Ruby</a></li>
<li>Bozhidar Batsov: <a href="http://rubykaigi.org/2018/presentations/bbatsov.html#may31">All About RuboCop</a></li>
<li>Naotoshi Seo: <a href="http://rubykaigi.org/2018/presentations/sonots.html#may31">Fast Numerical Computing and Deep Learning in Ruby with Cumo</a></li>
<li>Emma Haruka Iwao: <a href="http://rubykaigi.org/2018/presentations/Yuryu.html#may31">Exploring Internal Ruby Through C Extensions</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/lt/">Lightning Talks</a></li>
</ol>


<p>この日、今年の RubyKaigi 2018 で最も楽しみにしてたのが <code>rubocop</code> の作者のトークで、彼のプロダクト(<code>rubocop</code>, <code>flycheck-ruby</code>)を利用してる身としては非常に楽しみでした。
DLと数値計算のやつは進捗が聞けてよかったっていうのとDeep Learningに関していうと難しいのかなあという感想が…
Haruka さんのやつは、やっぱり今の実装十分に速いってのがわかって、これ以上速くするには非常に大変だなってのがよかったですね。
LTはどれもよくて <code>rib</code> も面白いし、 csvの高速化の話が特に好きでした。</p>

<h2>2日目</h2>

<p>2日目もほとんどA会場できいていたのと、GitHubの電源スペースにいました。</p>

<ol>
<li>Kouhei Sutou: <a href="http://rubykaigi.org/2018/presentations/ktou.html#jun01">My way with Ruby</a></li>
<li>Kouichi Sasada: <a href="http://rubykaigi.org/2018/presentations/ko1.html#jun01">Guild Prototype</a></li>
<li>Yuichiro Kaneko: <a href="http://rubykaigi.org/2018/presentations/spikeolaf.html#jun01">RNode with code positions</a></li>
<li>Yusuke Endo: <a href="http://rubykaigi.org/2018/presentations/mametter.html#jun01">Type Profiler: An analysis to guess type signatures</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/rubylangorg.html#jun01">Ruby Commiters vs. the World</a></li>
</ol>


<p>この日のトークは特に楽しみにしていたのはなかったのですが、ここ最近毎年聞いていた <a href="http://rubykaigi.org/2018/presentations/v0dro.html#jun01">@v0dro</a> の発表を聞いていなかった。
金子さんの発表がわりとたのしく聞けて、「あーやっぱり型のはなしは興味ないな」って感じで遠藤さんの発表聞いてました。
この日の懇親会で飲みすぎた。</p>

<h2>3日目</h2>

<p>3日目はパフォーマンス改善を中心として聞いてました。</p>

<ol>
<li>Benoit Daloze: <a href="http://rubykaigi.org/2018/presentations/eregontp.html#jun02">Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby</a></li>
<li>Takashi Kokubun: <a href="http://rubykaigi.org/2018/presentations/k0kubun.html#jun02">The Method JIT Compiler for Ruby 2.6</a></li>
<li>Takeshi Watanabe: <a href="http://rubykaigi.org/2018/presentations/take-cheeze.html#jun02">LuaJIT as a Ruby backend.</a></li>
<li>Prasun Anand: <a href="http://rubykaigi.org/2018/presentations/prasun_anand.html#jun02">High Performance GPU computing with Ruby</a></li>
<li>Vladimir Makarov: <a href="http://rubykaigi.org/2018/presentations/vnmakarov.html#jun02">Three Ruby performance projects</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/tric.html#jun02">TRICK 2018 (FINAL)</a></li>
</ol>


<p>TuffleRubyとはやくてとてもよさそう。
国分さん、Vladimirの話はいつもどおりで安心した。</p>

<p>TRICK、どうしてこんなプログラムが思いつくのかさっぱりわからんがとにかく凄い以上の感想がうかんでこない。</p>

<h2>おわり</h2>

<p>RubyKaigi 2018に行ってきてたいへんたのしいイベントでした。</p>

<p>(型のはなしはやはり興味がないというかまだまだ理解が浅いのでTaPL読むべきだな)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API キーが凍結されてら]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/05/06/teokure/"/>
    <updated>2018-05-06T23:33:23+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/05/06/teokure</id>
    <content type="html"><![CDATA[<p>mikutter の <a href="http://mikutter.hatenablog.com/entry/2018/05/05/164014">Twitter API キーが凍結された</a> ようです。</p>

<h2>回避方法</h2>

<p>とりあず、twitter の <a href="https://developer.twitter.com/en.html">開発者ページ</a> から API キーを生成してください。
あとは以下の様に編集してください</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Gemfile b/Gemfile</span>
</span><span class='line'><span class="gh">index 0a88a191..cb48cd4f 100644</span>
</span><span class='line'><span class="gd">--- a/Gemfile</span>
</span><span class='line'><span class="gi">+++ b/Gemfile</span>
</span><span class='line'><span class="gu">@@ -21,6 +21,7 @@ group :default do</span>
</span><span class='line'>   gem &#39;pluggaloid&#39;, &#39;&gt;= 1.1.1&#39;, &#39;&lt; 2.0&#39;
</span><span class='line'>   gem &#39;delayer-deferred&#39;, &#39;&gt;= 2.0&#39;, &#39;&lt; 3.0&#39;
</span><span class='line'>   gem &#39;twitter-text&#39;, &#39;&gt;= 2.1.0&#39;
</span><span class='line'><span class="gi">+  gem &#39;dotenv&#39;</span>
</span><span class='line'> end
</span><span class='line'>
</span><span class='line'> group :test do
</span><span class='line'><span class="gh">diff --git a/core/config.rb b/core/config.rb</span>
</span><span class='line'><span class="gh">index 6e3d95ba..455e3083 100644</span>
</span><span class='line'><span class="gd">--- a/core/config.rb</span>
</span><span class='line'><span class="gi">+++ b/core/config.rb</span>
</span><span class='line'><span class="gu">@@ -14,8 +14,8 @@ module CHIConfig</span>
</span><span class='line'>   ACRO = &quot;mikutter&quot;
</span><span class='line'>
</span><span class='line'>   # 下の２行は馬鹿にしか見えない
</span><span class='line'><span class="gd">-  TWITTER_CONSUMER_KEY = &quot;AmDS1hCCXWstbss5624kVw&quot;</span>
</span><span class='line'><span class="gd">-  TWITTER_CONSUMER_SECRET = &quot;KOPOooopg9Scu7gJUBHBWjwkXz9xgPJxnhnhO55VQ&quot;</span>
</span><span class='line'><span class="gi">+  TWITTER_CONSUMER_KEY = ENV[&quot;TWITTER_CONSUMER_KEY&quot;]</span>
</span><span class='line'><span class="gi">+  TWITTER_CONSUMER_SECRET = ENV[&quot;TWITTER_SECRET_KEY&quot;]</span>
</span><span class='line'>   TWITTER_AUTHENTICATE_REVISION = 1
</span><span class='line'>
</span><span class='line'>   # pidファイル
</span><span class='line'><span class="gh">diff --git a/mikutter.rb b/mikutter.rb</span>
</span><span class='line'><span class="gh">index da302ca1..94025817 100755</span>
</span><span class='line'><span class="gd">--- a/mikutter.rb</span>
</span><span class='line'><span class="gi">+++ b/mikutter.rb</span>
</span><span class='line'><span class="gu">@@ -32,6 +32,8 @@ require &#39;benchmark&#39;</span>
</span><span class='line'> require &#39;webrick&#39;
</span><span class='line'> require &#39;thread&#39;
</span><span class='line'> require &#39;fileutils&#39;
</span><span class='line'><span class="gi">+require &#39;dotenv&#39;</span>
</span><span class='line'><span class="gi">+Dotenv.load(&quot;.env&quot;)</span>
</span><span class='line'>
</span><span class='line'> require_relative &#39;core/utils&#39;
</span></code></pre></td></tr></table></div></figure>


<p>あとは環境変数<code>TWITTER_CONSUMER_KEY</code> と <code>TWITTER_SECRET_KEY</code> を設定してあげると起動できるようになります</p>

<h3>dotenv</h3>

<p>環境変数を指定して毎回起動したくない、とか <code>.bashrc</code> に書きたくない、とかある場合は
<a href="https://github.com/bkeepers/dotenv"><code>dotenv.gem</code> </a> を使うことで良いかんじに読みとってくれるようになります。
つかいかたは <code>Dotenv.load(file_name)</code> で <code>file_name</code> にあるファイルのなかに環境変数を書けばよいです。</p>

<h2>おわり</h2>

<p>おわり。
別に <code>dotenv.gem</code> いらんなこれ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1日はやくはじめた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/04/30/happy-holidays/"/>
    <updated>2018-04-30T01:02:57+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/04/30/happy-holidays</id>
    <content type="html"><![CDATA[<p>2018/4/27 に休み入れて一日はやくGWはじめています。</p>

<h3>毎月恒例</h3>

<p>毎月月末金曜に知り合いの <a href="https://twitter.com/n_kane">@n_kane</a> と築地で朝御飯を食べにいってて
今月はGW直前だし朝からやってる <a href="https://tabelog.com/tokyo/A1311/A131106/13009812/">根津 鷹匠</a> で朝からそばもいこうとなっていってきた。
そういうわけで休みを入れていた。</p>

<h3>国税局</h3>

<p>前日あたりに <a href="https://instagram.com">instagram</a> で <a href="https://www.instagram.com/ginzabrewery/">ginzabrewery</a> を眺めててどこだろと <em>ggrks</em> してみたら
<a href="https://www.nta.go.jp/about/organization/tokyo/sake/beer/tokyo/tokyo.htm">ここ</a> の便利ページが出てきた。このページはだいたいブリュワリーとパブが一体化した
店が掲載されているよう。でよく行く<a href="http://www.campionale.com/jp/">Campion Ale</a> や最近教えてもらった <a href="http://plusplus.suiken.beer/">十条すいけんブルワリー</a>、
などが掲載されている。</p>

<h3>ガハハハ</h3>

<p>で午後は @n_kane も予定があったらしく、暇だったので上記国税局の便利ページを参考に <a href="https://www.facebook.com/%E3%82%AC%E3%83%8F%E3%83%8F%E3%83%93%E3%83%BC%E3%83%AB-gahahabeer-1639230606096746/">ガハハビール</a> に行ってみた。</p>

<p>流石に平日の午後3時だったので店員さん以外は誰もおらず、一人だけでした。
とりあえず <a href="https://untappd.com/b/gahaha-beer-danchi-ipa/2502617">Danchi IPA</a> とレバーを頼んでみた。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/gahaha-danchi-ipa.jpg" alt="" /></p>

<p>Danchi IPA は苦味がすくなく美味しいビールでした。</p>

<p>つぎに <a href="https://untappd.com/b/gahaha-beer-marcy-ipa-ipa/2517460">Marcy IPA</a> とライスなしカツカレーを注文。
こちらは苦味が強くおいしいビールでした。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/gahaha-marcy-ipa.jpg" alt="" /></p>

<p>そんなことより、謎のメニューが幾つかあり、店員さんに聞いてみたら、「だってお酒のむ人お米とか麺とかあんまりすきじゃないですよね」っていっておりました。
あと、軟骨バッファローチキンは頼んでないけどとてもよさそうだったので今度いく時に注文しよう。</p>

<h3>おわり</h3>

<p>国税局を調べたおかげで良いビール屋を見付けることができてよかったよかった。</p>

<p>ってガハハビールの情報探してたら老舗クラフトビールの紹介サイトの <a href="http://beer-cruise.net/">ビアクルーズ</a> さんで <a href="http://beer-cruise.net/beer/170922.html">紹介されてた</a> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100 Knock Section IV]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/02/26/nlp-100-section-4/"/>
    <updated>2018-02-26T23:45:52+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/02/26/nlp-100-section-4</id>
    <content type="html"><![CDATA[<p>NLP100本ノック第4節おわりましたのでまとめます</p>

<h2><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#ch4">第4章 形態素解析</a></h2>

<p>形態素解析やからむずいやろとおもってた</p>

<h3>準備</h3>

<p>この章では、形態素解析済ファイルを作成する必要がありますが、毎回対象ファイルをダウンロード、解析して解いています。
ここではいつもどおり <code>HashMap</code> を利用するため <code>ANALYZED_MECAB_KEYS</code> を作成してこれをキーにします。
またよく利用する品詞を <code>enum</code> で定義しておき、変換関数 <code>inspect</code> を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">const</span> <span class="n">ANALYZED_MECAB_KEYS</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">str</span><span class="p">;</span> <span class="m">9</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;pos&quot;</span><span class="p">,</span> <span class="s">&quot;pos1&quot;</span><span class="p">,</span> <span class="s">&quot;pos2&quot;</span><span class="p">,</span> <span class="s">&quot;pos3&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;base&quot;</span><span class="p">,</span> <span class="s">&quot;read&quot;</span><span class="p">,</span> <span class="s">&quot;speech&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">enum</span> <span class="n">PartOfSpeech</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VERB</span><span class="p">,</span>
</span><span class='line'>    <span class="n">NOUN</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PARTICLE</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">PartOfSpeech</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">inspect</span><span class="p">(</span><span class="n">val</span><span class="o">:</span> <span class="n">PartOfSpeech</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">match</span> <span class="n">val</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">VERB</span> <span class="o">=&gt;</span> <span class="s">&quot;動詞&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">NOUN</span> <span class="o">=&gt;</span> <span class="s">&quot;名詞&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">PARTICLE</span> <span class="o">=&gt;</span> <span class="s">&quot;助詞&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}.</span><span class="n">to_string</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec30">30. 形態素解析結果の読み込み</a></h3>

<p><code>Map</code> を使えと指定があるので素直に利用します</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">feature</span><span class="p">(</span><span class="n">node</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">h</span><span class="o">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">surface</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">surface</span><span class="p">)[..</span><span class="n">node</span><span class="p">.</span><span class="n">length</span> <span class="k">as</span> <span class="n">usize</span><span class="p">]).</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="n">h</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="s">&quot;surface&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span> <span class="n">surface</span><span class="p">);</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">values</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">feature</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="n">in</span> <span class="n">ANALYZED_MECAB_KEYS</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="n">values</span><span class="p">.</span><span class="n">iter</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">h</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span> <span class="n">b</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">h</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://www.cl.ecei.tohoku.ac.jp/nlp100/data/neko.txt&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">neco</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">NLP100</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="p">.</span><span class="n">ne</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&quot;&quot;</span><span class="p">)).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">morph</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="n">in</span> <span class="n">neco</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="k">mut</span> <span class="n">tagger</span><span class="o">:</span> <span class="n">Tagger</span> <span class="o">=</span> <span class="n">mecab</span><span class="o">::</span><span class="n">Tagger</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">nodes</span><span class="o">:</span> <span class="n">Node</span> <span class="o">=</span> <span class="n">tagger</span><span class="p">.</span><span class="n">parse_to_node</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="k">mut</span> <span class="n">mecabu</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span><span class="p">.</span><span class="n">iter_next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">match</span> <span class="n">node</span><span class="p">.</span><span class="n">stat</span> <span class="k">as</span> <span class="k">i32</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">mecab</span><span class="o">::</span><span class="n">MECAB_BOS_NODE</span> <span class="o">=&gt;</span> <span class="p">(),</span>
</span><span class='line'>                <span class="n">mecab</span><span class="o">::</span><span class="n">MECAB_EOS_NODE</span> <span class="o">=&gt;</span> <span class="p">(),</span>
</span><span class='line'>                <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">mecabu</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">feature</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">morph</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">mecabu</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">morph</span> <span class="n">in</span> <span class="n">morphs</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mecab</span> <span class="n">in</span> <span class="n">morph</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;surface: {}, base: {}, pos: {}, pos1: {}&quot;</span><span class="p">,</span> <span class="n">mecab</span><span class="p">[</span><span class="s">&quot;surface&quot;</span><span class="p">],</span> <span class="n">mecab</span><span class="p">[</span><span class="s">&quot;base&quot;</span><span class="p">],</span> <span class="n">mecab</span><span class="p">[</span><span class="s">&quot;pos&quot;</span><span class="p">],</span> <span class="n">mecab</span><span class="p">[</span><span class="s">&quot;pos1&quot;</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec31">31. 動詞</a></h3>

<p>動詞だけ抽出するので以下のコードで抽出し、表層形(<code>"surface"</code>)を取得する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">verb</span><span class="p">(</span><span class="n">nodes</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">nodes</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">[</span><span class="s">&quot;pos&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="n">inspect</span><span class="p">(</span><span class="n">VERB</span><span class="p">)).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">hm</span><span class="o">|</span> <span class="n">hm</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">collect</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec32">32. 動詞の原形</a></h3>

<p>動詞だけ抽出するので上記のコードで抽出し、原形(<code>"base"</code>)を取得する</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec33">33. サ変名詞</a></h3>

<p>サ変接続を抽出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">sa_noun</span><span class="p">(</span><span class="n">nodes</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="n">noun</span><span class="p">(</span><span class="n">nodes</span><span class="p">).</span><span class="n">iter</span><span class="p">().</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">node</span><span class="o">|</span> <span class="n">node</span><span class="p">[</span><span class="s">&quot;pos1&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;サ変接続&quot;</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">hm</span><span class="o">|</span> <span class="n">hm</span><span class="p">.</span><span class="n">clone</span><span class="p">()).</span><span class="n">collect</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec34">34. 「AのB」</a></h3>

<p>「の」を挾んでいる名詞を抽出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">between_noun</span><span class="p">(</span><span class="n">node</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Option</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">mecab</span> <span class="o">=</span> <span class="n">feature</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">mecab</span><span class="p">[</span><span class="s">&quot;surface&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;の&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">mecab</span><span class="p">[</span><span class="s">&quot;pos&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="n">inspect</span><span class="p">(</span><span class="n">PARTICLE</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">mecab</span><span class="p">[</span><span class="s">&quot;pos1&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;連体化&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">feature</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="p">.</span><span class="n">prev</span><span class="p">().</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">next</span> <span class="o">=</span> <span class="n">feature</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Some</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}{}{}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">prev</span><span class="p">[</span><span class="s">&quot;surface&quot;</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">mecab</span><span class="p">[</span><span class="s">&quot;surface&quot;</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">next</span><span class="p">[</span><span class="s">&quot;surface&quot;</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">None</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec35">35. 名詞の連接</a></h3>

<p>連続した名詞を抽出するが、<code>mecab</code> でうまく関数化できなかったので割愛(あとでうかんだら追記)します。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec36">36. 単語の出現頻度</a></h3>

<p>単純に頻度をまとめ、 <code>sort</code> するとよい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">word_histgram</span><span class="p">(</span><span class="n">nodes</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="k">u64</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">results</span><span class="o">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="k">u64</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">base</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">node</span><span class="p">[</span><span class="s">&quot;base&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="o">*</span><span class="n">results</span><span class="p">.</span><span class="n">entry</span><span class="p">(</span><span class="n">base</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">or_insert</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="o">+=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">results</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec37">37. 頻度上位10語</a></h3>

<p>上記の結果より <code>.take(10)</code> するだけです。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec38">38. ヒストグラム</a></h3>

<p>37 と違いがわからずおわり。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec39">39. Zipfの法則</a></h3>

<p>単純に両対数グラフ化でおわり。</p>

<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP 100 Knock section 3]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/02/09/nlp-100-section-3/"/>
    <updated>2018-02-09T23:53:24+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/02/09/nlp-100-section-3</id>
    <content type="html"><![CDATA[<p>正規表現苦手なようでだいぶ時間がかかりました。</p>

<h2><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#ch3">第3章 正規表現</a></h2>

<p>正規表現ときいて楽勝やろと思ってた時期もあったんですが・・・</p>

<h3>準備</h3>

<p>この章では、gzファイルに入ったJSONをパースする必要があるのでさきにgzファイルから読み込むようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">read_gzip</span><span class="p">(</span><span class="n">path</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">string</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Decoder</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">file</span><span class="p">).</span><span class="n">unwrap</span><span class="p">().</span><span class="n">read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">string</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">string</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">ne</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&quot;&quot;</span><span class="p">)).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec20">20. JSONデータの読み込み</a></h3>

<p>こいつは、<a href="https://docs.serde.rs/serde/"><code>serde</code></a> の <a href="https://docs.serde.rs/serde_json/index.html"><code>serde_json</code></a> を利用して <a href="https://docs.serde.rs/serde_json/fn.from_str.html"><code>from_str</code></a> で読み込むだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">v</span><span class="o">:</span> <span class="n">Value</span> <span class="o">=</span> <span class="n">match</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="p">.</span><span class="n">as_str</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">Ok</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">v</span><span class="p">,</span>
</span><span class='line'>     <span class="n">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">continue</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec21">21. カテゴリ名を含む行を抽出</a> &amp;&amp; <a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec22">22. カテゴリ名の抽出</a></h3>

<p><a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">早見表</a> を参考に <a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">Regex::captures</a> で抽出することで解決。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">serde_json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">keywords</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">1.</span><span class="p">.];</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;\[\[Category:.+\]\]&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cap</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;\[\[Category:(?P&lt;name&gt;.+?)(?:\|.*)*\]\]&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">l</span> <span class="n">in</span> <span class="n">lines</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">v</span><span class="o">:</span> <span class="n">Value</span> <span class="o">=</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="p">.</span><span class="n">unwrap</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">title</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">keywords</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">content</span> <span class="n">in</span> <span class="n">v</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">re</span><span class="p">.</span><span class="n">is_match</span><span class="p">(</span><span class="n">m</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">c</span> <span class="n">in</span> <span class="n">cap</span><span class="p">.</span><span class="n">captures_iter</span><span class="p">(</span><span class="n">content</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec23">23. セクション構造</a></h3>

<p>こちらは前節の問題と同様に解けばよいですが、<code>=の数 - 1</code> という罠があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">serde_json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">keywords</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">1.</span><span class="p">.];</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?P&lt;level&gt;==+)(?P&lt;headline&gt;.+?)(?:=+)&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">l</span> <span class="n">in</span> <span class="n">lines</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">v</span><span class="o">:</span> <span class="n">Value</span> <span class="o">=</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="p">.</span><span class="n">unwrap</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">title</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">keywords</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">content</span> <span class="n">in</span> <span class="n">v</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">re</span><span class="p">.</span><span class="n">is_match</span><span class="p">(</span><span class="n">m</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">caps</span> <span class="n">in</span> <span class="n">re</span><span class="p">.</span><span class="n">captures_iter</span><span class="p">(</span><span class="n">content</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;level: {}, headline: {}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">caps</span><span class="p">[</span><span class="s">&quot;level&quot;</span><span class="p">].</span><span class="n">len</span><span class="p">()</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">caps</span><span class="p">[</span><span class="s">&quot;headline&quot;</span><span class="p">]);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec24">24. ファイル参照の抽出</a></h3>

<p>このあたりは問題ないとおもいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">serde_json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">keywords</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">1.</span><span class="p">.];</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;\[\[(File|ファイル):(?P&lt;filename&gt;.+?)(?:\|.*)*(?:\|.*)*\]\]&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">l</span> <span class="n">in</span> <span class="n">lines</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">v</span><span class="o">:</span> <span class="n">Value</span> <span class="o">=</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="p">.</span><span class="n">unwrap</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">title</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">keywords</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">content</span> <span class="n">in</span> <span class="n">v</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">re</span><span class="p">.</span><span class="n">is_match</span><span class="p">(</span><span class="n">m</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">caps</span> <span class="n">in</span> <span class="n">re</span><span class="p">.</span><span class="n">captures_iter</span><span class="p">(</span><span class="n">content</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;filename: {}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">caps</span><span class="p">[</span><span class="s">&quot;filename&quot;</span><span class="p">]);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec25">25. テンプレートの抽出</a></h3>

<p>こいつは大変でしたので参考サイト<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> を参考に以下の正規表現でとりあえず抽出しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?ms)(?:^\{\{基礎情報.*?$)(?P&lt;dict&gt;.+?)(?:^\}\}$)&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec26">26. 強調マークアップの除去</a></h3>

<p>こちらも同様に参考サイト<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を参考に以下の正規表現で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">strong</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;&#39;{2,5}&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec27">27. 内部リンクの除去</a></h3>

<p>こちらも同様に参考サイト<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を参考に以下の正規表現で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">link</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec28">28. MediaWikiマークアップの除去</a></h3>

<p>どうよう<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> (ry</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">link</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'><span class="k">let</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?:\{\{lang\|.+?\|)(?P&lt;lang&gt;.+?)(?:\}\})&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'><span class="k">let</span> <span class="n">markup</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;&lt;/*.+?&gt;&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec29">29. 国旗画像のURLを取得する</a></h3>

<p>こちらもさんこおおう<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>にしてますが、主にURL部分だけです。
こちらは <a href="https://hyper.rs/">Hyper</a> を利用することで解決しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">futures</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">hyper</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">hyper_tls</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">libflate</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">serde_json</span><span class="p">;</span>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">tokio_core</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">futures</span><span class="o">::</span><span class="p">{</span><span class="n">Future</span><span class="p">,</span> <span class="n">Stream</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">hyper</span><span class="o">::</span><span class="n">Client</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">hyper_tls</span><span class="o">::</span><span class="n">HttpsConnector</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">libflate</span><span class="o">::</span><span class="n">gzip</span><span class="o">::</span><span class="n">Decoder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashMap</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Read</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">tokio_core</span><span class="o">::</span><span class="n">reactor</span><span class="o">::</span><span class="n">Core</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">get_image</span><span class="p">(</span><span class="n">query</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot; &quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;https://en.wikipedia.org/w/api.php?action=query&amp;titles=File:{}&amp;format=json&amp;prop=imageinfo&amp;iiprop=url&quot;</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">replace_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">query</span><span class="p">,</span> <span class="s">&quot;%20&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">uri</span><span class="p">.</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">core</span> <span class="o">=</span> <span class="n">Core</span><span class="o">::</span><span class="n">new</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">core</span><span class="p">.</span><span class="n">handle</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="o">::</span><span class="n">configure</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">connector</span><span class="p">(</span><span class="n">HttpsConnector</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">handle</span><span class="p">).</span><span class="n">unwrap</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="o">&amp;</span><span class="n">handle</span><span class="p">);</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">work</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">uri</span><span class="p">).</span><span class="n">and_then</span><span class="p">(</span><span class="o">|</span><span class="n">res</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">body</span><span class="p">().</span><span class="n">concat2</span><span class="p">().</span><span class="n">and_then</span><span class="p">(</span><span class="n">move</span> <span class="o">|</span><span class="n">body</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">v</span><span class="o">:</span> <span class="n">Value</span> <span class="o">=</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">from_slice</span><span class="p">(</span><span class="o">&amp;</span><span class="n">body</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">page_ids</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="s">&quot;query&quot;</span><span class="p">][</span><span class="s">&quot;pages&quot;</span><span class="p">].</span><span class="n">as_object</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">keys</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">imageinfo</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">[</span><span class="s">&quot;query&quot;</span><span class="p">][</span><span class="s">&quot;pages&quot;</span><span class="p">][</span><span class="o">&amp;</span><span class="n">page_ids</span><span class="p">[</span><span class="m">0</span><span class="p">]][</span><span class="s">&quot;imageinfo&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">imageinfo</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="s">&quot;url&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>            <span class="n">Ok</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="n">core</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">work</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">read_gzip</span><span class="p">(</span><span class="n">path</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">string</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Decoder</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">file</span><span class="p">).</span><span class="n">unwrap</span><span class="p">().</span><span class="n">read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">string</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">string</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">ne</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&quot;&quot;</span><span class="p">)).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">keywords</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">1.</span><span class="p">.];</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">read_gzip</span><span class="p">(</span><span class="n">path</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?ms)(?:^\{\{基礎情報.*?$)(?P&lt;dict&gt;.+?)(?:^\}\}$)&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">bar_hat</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?ms)(?:^\|)&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">dict</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?P&lt;key&gt;.+?)\s*=\s*(?P&lt;val&gt;.+)&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">media</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;\[\[(File|ファイル):(?P&lt;filename&gt;.+?)(?:\|.*)*(?:\|.*)*\]\]&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">strong</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;&#39;{2,5}&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">link</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;(?:\{\{lang\|.+?\|)(?P&lt;lang&gt;.+?)(?:\}\})&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">markup</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;&lt;/*.+?&gt;&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">l</span> <span class="n">in</span> <span class="n">lines</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">v</span><span class="o">:</span> <span class="n">Value</span> <span class="o">=</span> <span class="n">match</span> <span class="n">serde_json</span><span class="o">::</span><span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="p">.</span><span class="n">as_str</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Ok</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">v</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">continue</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">text</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">match</span> <span class="n">v</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">None</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">continue</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">title</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">match</span> <span class="n">v</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">].</span><span class="n">as_str</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">None</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">continue</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">keywords</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="o">&amp;</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="k">mut</span> <span class="n">results</span><span class="o">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">re</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">match</span> <span class="n">re</span><span class="p">.</span><span class="n">captures</span><span class="p">(</span><span class="o">&amp;</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Some</span><span class="p">(</span><span class="n">caps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">caps</span><span class="p">[</span><span class="s">&quot;dict&quot;</span><span class="p">].</span><span class="n">to_string</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">None</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;cannot capture dict!!&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">line</span> <span class="n">in</span> <span class="n">bar_hat</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">re</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="p">.</span><span class="n">ne</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&quot;&quot;</span><span class="p">)).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">dict</span> <span class="o">=</span> <span class="n">match</span> <span class="n">dict</span><span class="p">.</span><span class="n">captures</span><span class="p">(</span><span class="o">&amp;</span><span class="n">line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">x</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">None</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="n">continue</span><span class="p">;},</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">val</span> <span class="o">=</span> <span class="n">dict</span><span class="p">[</span><span class="s">&quot;val&quot;</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">key</span> <span class="o">=</span> <span class="n">dict</span><span class="p">[</span><span class="s">&quot;key&quot;</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">file</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">media</span><span class="p">.</span><span class="n">replace_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">val</span><span class="p">,</span> <span class="s">&quot;$filename&quot;</span><span class="p">).</span><span class="n">trim</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">strong</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">strong</span><span class="p">.</span><span class="n">replace_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">).</span><span class="n">trim</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">link</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">link</span><span class="p">.</span><span class="n">replace_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">strong</span><span class="p">,</span> <span class="s">&quot;$link&quot;</span><span class="p">).</span><span class="n">trim</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">markup</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">markup</span><span class="p">.</span><span class="n">replace_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">link</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">).</span><span class="n">trim</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">val</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">match</span> <span class="n">key</span><span class="p">.</span><span class="n">as_ref</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s">&quot;国旗画像&quot;</span> <span class="o">=&gt;</span> <span class="n">get_image</span><span class="p">(</span><span class="n">markup</span><span class="p">.</span><span class="n">to_string</span><span class="p">()),</span>
</span><span class='line'>                    <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">lang</span><span class="p">.</span><span class="n">replace_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">markup</span><span class="p">,</span> <span class="s">&quot;$lang&quot;</span><span class="p">).</span><span class="n">trim</span><span class="p">().</span><span class="n">to_string</span><span class="p">(),</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="n">results</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="n">in</span> <span class="n">results</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}: {}&quot;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>とりあえず3章まで終わらせましたので形態素解析へと進みたいとおもいます(思っているだけ)</p>

<h2>参考資料</h2>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>素人の言語処理100本ノック:25, segavvy, <a href="https://qiita.com/segavvy/items/e402ad0a5b0f52453d7f">https://qiita.com/segavvy/items/e402ad0a5b0f52453d7f</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>素人の言語処理100本ノック:26, segavvy, <a href="https://qiita.com/segavvy/items/f6d0f3d6eee5acc33c58">https://qiita.com/segavvy/items/f6d0f3d6eee5acc33c58</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>素人の言語処理100本ノック:27, segavvy, <a href="https://qiita.com/segavvy/items/9a8137f045852bc299d6">https://qiita.com/segavvy/items/9a8137f045852bc299d6</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>素人の言語処理100本ノック:28, segavvy, <a href="https://qiita.com/segavvy/items/8c4567ec1124320d3354">https://qiita.com/segavvy/items/8c4567ec1124320d3354</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>素人の言語処理100本ノック:29, segavvy, <a href="https://qiita.com/segavvy/items/fc7257012d8a590185e5">https://qiita.com/segavvy/items/fc7257012d8a590185e5</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100ノック第2章]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/27/nlp-100-section-2/"/>
    <updated>2018-01-27T19:46:23+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/27/nlp-100-section-2</id>
    <content type="html"><![CDATA[<p>第2章を一通り終えたので書きます。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec10">10. 行数のカウント</a></h3>

<p>タイトルのままです。 <code>Rust</code> では <a href="https://doc.rust-lang.org/std/str/struct.Lines.html"><code>std::str::Lines</code></a> で <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count"><code>count()</code></a> がありますので利用しておわりです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">args</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">path</span> <span class="n">in</span> <span class="n">args</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">br</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">br</span><span class="p">.</span><span class="n">lines</span><span class="p">().</span><span class="n">count</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec11">11. タブをスペースに置換</a></h3>

<p>コチラも、<a href="https://doc.rust-lang.org/std/string/struct.String.html#method.replace"><code>std::string::String.replace()</code></a> 利用するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">args</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">();</span>
</span><span class='line'>    <span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">path</span> <span class="n">in</span> <span class="n">args</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="n">in</span> <span class="n">reader</span><span class="p">.</span><span class="n">lines</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec12">12. 1列目をcol1.txtに,2列目をcol2.txtに保存</a></h3>

<p>こちらは単純にファイルに書き込むのと、分割ができれば問題ないです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="n">BufReader</span><span class="p">,</span> <span class="n">BufWriter</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">args</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">path</span> <span class="n">in</span> <span class="n">args</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;.txt&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;.txt&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">br</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>        <span class="k">let</span> <span class="k">mut</span> <span class="n">first_column</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">File</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}_col1.txt&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">)).</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>        <span class="k">let</span> <span class="k">mut</span> <span class="n">second_column</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">File</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}_col2.txt&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">)).</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="n">in</span> <span class="n">br</span><span class="p">.</span><span class="n">lines</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>            <span class="n">first_column</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="m">0</span><span class="p">]).</span><span class="n">as_bytes</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>            <span class="n">second_column</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="m">1</span><span class="p">]).</span><span class="n">as_bytes</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec13">13. col1.txtとcol2.txtをマージ</a></h3>

<p>こちらは以前利用した、<code>zip</code> があれば問題ないです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="n">BufReader</span><span class="p">,</span> <span class="n">BufWriter</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">args</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">&lt;</span> <span class="m">2</span> <span class="p">{</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;col1.txt col2.txt&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">first</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">second</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">fr</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">first</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()).</span><span class="n">lines</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">sr</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">second</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()).</span><span class="n">lines</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">merge_file</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">File</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;merge.txt&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="n">in</span> <span class="n">fr</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">merge_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}</span><span class="se">\t</span><span class="s">{}</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">).</span><span class="n">as_bytes</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec14">14. 先頭からN行を出力</a></h3>

<p><code>head</code> コマンドですので <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take"><code>std::iter::Iterator.take()</code></a> を利用するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">br</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">().</span><span class="n">take</span><span class="p">((</span><span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">]).</span><span class="n">to_string</span><span class="p">().</span><span class="n">parse</span><span class="o">::&lt;</span><span class="n">usize</span><span class="o">&gt;</span><span class="p">().</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="n">in</span> <span class="n">br</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec15">15. 末尾のN行を出力</a></h3>

<p><code>tail</code> コマンドです。こちらは <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip"><code>std::iter::Iterator.skip()</code></a> を利用してやるだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">takes</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">]).</span><span class="n">to_string</span><span class="p">().</span><span class="n">parse</span><span class="o">::&lt;</span><span class="n">usize</span><span class="o">&gt;</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">br</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">skips</span> <span class="o">=</span> <span class="n">br</span><span class="p">.</span><span class="n">count</span><span class="p">()</span> <span class="o">-</span> <span class="n">takes</span><span class="p">;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="n">skips</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="n">in</span> <span class="n">lines</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">.</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec16">16. ファイルをN分割する</a></h3>

<p>こちらの実装は素朴な実装とし、行数で分割しております。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufWriter</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">count</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">().</span><span class="n">count</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">div</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">]).</span><span class="n">to_string</span><span class="p">().</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">br</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">count</span> <span class="k">as</span> <span class="k">f64</span><span class="o">/</span> <span class="n">div</span> <span class="k">as</span> <span class="k">f64</span><span class="p">).</span><span class="n">ceil</span><span class="p">()</span> <span class="k">as</span> <span class="n">usize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="n">in</span> <span class="m">1</span> <span class="p">..</span> <span class="n">div</span> <span class="o">+</span> <span class="m">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="n">br</span><span class="p">.</span><span class="n">by_ref</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}.txt&quot;</span><span class="p">,</span><span class="n">x</span><span class="p">)).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="k">mut</span> <span class="n">bw</span> <span class="o">=</span> <span class="n">BufWriter</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">y</span> <span class="n">in</span> <span class="n">l</span><span class="p">.</span><span class="n">take</span><span class="p">(</span><span class="n">t</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>            <span class="n">bw</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>            <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}: {}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec17">17. 1列目の文字列の異なり</a></h3>

<p>ファイル読込 + <code>HashSet</code> で実装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashSet</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;\W+&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">hs</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span><span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>        <span class="n">re</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="p">).</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">s</span> <span class="n">in</span> <span class="n">hs</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec18">18. 各行を3コラム目の数値の降順にソート</a></h3>

<p>こちら、実数の比較を行う必要があり、すこし <a href="https://gist.github.com/katsyoshi/c76c2f782b3edaeff1d328a84dd582a0">めんどう</a> でした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">val</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">).</span><span class="n">skip</span><span class="p">(</span><span class="m">2</span><span class="p">).</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">parse</span><span class="o">::&lt;</span><span class="k">f64</span><span class="o">&gt;</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="k">f64</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">val</span><span class="p">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="p">.</span><span class="n">partial_cmp</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">v</span> <span class="n">in</span> <span class="n">val</span> <span class="p">{</span> <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec19">19. 各行の1コラム目の文字列の出現頻度を求め,出現頻度の高い順に並べる</a></h3>

<p>18の問題を更にカウントできるように変更した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashMap</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">BufReader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">prelude</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">Value</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">USIZE</span><span class="p">(</span><span class="n">usize</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NONE</span><span class="p">(()),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">args</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">words</span><span class="o">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">m</span> <span class="n">in</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="p">).</span><span class="n">lines</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">w</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">).</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">match</span> <span class="n">words</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">w</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">None</span> <span class="o">=&gt;</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Some</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">n</span> <span class="o">+</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">words</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">vars</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">String</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">usize</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">words</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="n">vars</span><span class="p">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="p">.</span><span class="m">1.</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="m">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="n">in</span> <span class="n">vars</span> <span class="p">{</span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}: {}&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>この章は慣れてきたのか比較的楽に解けています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nlp 100 section 1 part 3]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/21/nlp-100-section-1-part-3/"/>
    <updated>2018-01-21T10:23:02+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/21/nlp-100-section-1-part-3</id>
    <content type="html"><![CDATA[<p>前回、<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> の04までやったので05からやります。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec05">05. ngram</a></h3>

<p>こいつはbi-gramを単語、文字二つを実装するひつようがあります</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">bigram</span><span class="p">(</span><span class="n">words</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">bi</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">w</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">w</span> <span class="o">&gt;</span> <span class="n">words</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="p">{</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">bi</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">..</span><span class="n">w</span><span class="p">].</span><span class="n">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">bi</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">words</span> <span class="o">=</span> <span class="s">&quot;I am an NLPer&quot;</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">===word bi-gram&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="n">in</span> <span class="n">bigram</span><span class="p">(</span><span class="n">words</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">words</span> <span class="o">=</span> <span class="s">&quot;I am an NLPer&quot;</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="n">in</span> <span class="n">bigram</span><span class="p">(</span><span class="n">words</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">{}</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec06">06. 集合</a></h3>

<p>これは単純に <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html"><code>HashSet</code></a> を利用して、解決します。<code>HashSet</code> の差集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.difference"><code>difference</code></a> を利用し、和集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.union"><code>union</code></a> を、積集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.intersection"><code>intersection</code></a> をそれぞれ利用します。また、特定の要素が含有していることを判定するには <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.contains"><code>contains</code></a> を利用して判定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashSet</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">bigram</span><span class="p">(</span><span class="n">words</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">bi</span><span class="o">:</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">HashSet</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">w</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">w</span> <span class="o">&gt;</span> <span class="n">words</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="p">{</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">bi</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">..</span><span class="n">w</span><span class="p">].</span><span class="n">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">bi</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">chars</span><span class="p">(</span><span class="n">s</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">s</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">bigram</span><span class="p">(</span><span class="n">chars</span><span class="p">(</span><span class="s">&quot;paraparaparadise&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()));</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">bigram</span><span class="p">(</span><span class="n">chars</span><span class="p">(</span><span class="s">&quot;paragraph&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;===UNION===&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="n">in</span> <span class="n">s1</span><span class="p">.</span><span class="n">union</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">===DIFF===&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;===s1 - s2===&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="n">in</span> <span class="n">s1</span><span class="p">.</span><span class="n">difference</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;===s2 - s1===&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="n">in</span> <span class="n">s2</span><span class="p">.</span><span class="n">difference</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">===intersection===&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="n">in</span> <span class="n">s1</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">===INCLUDE===&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">se</span> <span class="o">=</span> <span class="s">&quot;se&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;s1: {}&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">se</span><span class="p">));</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;s2: {}&quot;</span><span class="p">,</span> <span class="n">s2</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">se</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec07">07. テンプレートによる文生成</a></h3>

<p>これは <a href=""><code>format!</code></a> を使えば終りです。(問題意図ほんとこれなんか？)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">string_template</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="k">i8</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">,</span> <span class="n">z</span><span class="o">:</span> <span class="k">f32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}時の{}は{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">string</span> <span class="o">=</span> <span class="n">string_template</span><span class="p">(</span><span class="m">12</span><span class="p">,</span> <span class="s">&quot;気温&quot;</span><span class="p">,</span> <span class="m">22.5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec08">08. 暗号文</a></h3>

<p>ASCII以外の判定と、小文字のASCIIが判れば簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ascii</span><span class="o">::</span><span class="n">AsciiExt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">cipher</span><span class="p">(</span><span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">result</span><span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">c</span> <span class="n">in</span> <span class="n">chars</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="n">is_ascii</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">var</span><span class="o">:</span> <span class="k">u8</span> <span class="o">=</span> <span class="n">c</span> <span class="k">as</span> <span class="k">u8</span><span class="p">;</span>
</span><span class='line'>            <span class="n">match</span> <span class="n">var</span> <span class="p">{</span>
</span><span class='line'>                <span class="m">97</span> <span class="p">...</span> <span class="m">122</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="m">219</span> <span class="o">-</span> <span class="p">(</span><span class="n">var</span><span class="p">))</span> <span class="k">as</span> <span class="n">char</span><span class="p">,</span>
</span><span class='line'>                <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">c</span><span class="p">,</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">c</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">cipher</span><span class="p">(</span><span class="s">&quot;Today is fine.&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">cipher</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cipher</span><span class="p">(</span><span class="s">&quot;Today is fine.&quot;</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec09">09. Typoglycemia</a></h3>

<p>こちらは、 <code>Vec</code> に <code>shuffle</code> 的なものがないので、<a href="https://doc.rust-lang.org/rand"><code>rand</code></a> を呼び出して <a href="https://doc.rust-lang.org/rand/rand/trait.Rng.html#method.shuffle"><code>shuffle</code></a> を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">rand</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">words</span><span class="p">(</span><span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">result</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">s</span> <span class="n">in</span> <span class="n">src</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;&amp;</span><span class="n">str</span><span class="o">&gt;&gt;</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="k">mut</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">chars</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">&lt;</span> <span class="m">5</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">last_index</span> <span class="o">=</span> <span class="n">chars</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">-</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">first_char</span> <span class="o">=</span> <span class="n">chars</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">last_char</span> <span class="o">=</span> <span class="n">chars</span><span class="p">[</span><span class="n">last_index</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">let</span> <span class="n">rand_chars</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">chars</span><span class="p">[</span><span class="m">1.</span><span class="p">.</span><span class="n">last_index</span><span class="p">];</span>
</span><span class='line'>            <span class="n">shuffle</span><span class="p">(</span><span class="n">rand_chars</span><span class="p">);</span>
</span><span class='line'>            <span class="k">let</span> <span class="k">mut</span> <span class="n">rand_string</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">c</span> <span class="n">in</span> <span class="n">rand_chars</span> <span class="p">{</span> <span class="n">rand_string</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}{}{}&quot;</span><span class="p">,</span> <span class="n">first_char</span><span class="p">,</span> <span class="n">rand_string</span><span class="p">,</span> <span class="n">last_char</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">chars</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="p">[</span><span class="n">char</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rand</span><span class="o">::</span><span class="n">thread_rng</span><span class="p">().</span><span class="n">shuffle</span><span class="p">(</span><span class="n">chars</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">paragraph</span> <span class="o">=</span> <span class="s">&quot;I couldn&#39;t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">w</span> <span class="n">in</span> <span class="n">words</span><span class="p">(</span><span class="n">paragraph</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>ということで <code>Rust</code> で言語処理100本ノック1章をやってみました。
最近 <code>Ruby</code> しか書いていなかったので、新鮮で楽しいですね <code>Rust</code> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100本ノック section 1 part 2]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2/"/>
    <updated>2018-01-19T20:05:49+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2</id>
    <content type="html"><![CDATA[<p>前回、<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> の01までやったので02からやっていきます。</p>

<h2><code>extern crate nlp100;</code></h2>

<p>ってやれるように <a href="https://github.com/katsyoshi/zatsu/tree/master/rust/nlp100"><code>Cargo</code></a> を作成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cargo new nlp100</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec02">02. 「パトカー」+「タクシー」=「パタトクカシーー」</a></h3>

<p>これはムズカシイので素直に <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip"><code>zip</code></a> を利用する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">concat</span><span class="p">(</span><span class="n">t</span><span class="o">:</span> <span class="p">(</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="n">in</span> <span class="n">f</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">iter</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span><span class="p">.</span><span class="n">push_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">p</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;パトカー&quot;</span><span class="p">).</span><span class="n">chars</span><span class="p">().</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;タクシー&quot;</span><span class="p">).</span><span class="n">chars</span><span class="p">().</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="n">concat</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec03">03. 円周率</a></h3>

<p>この問題は思い切り勘違いしてたので、「これのどこが円周率なの？」って思ってました。こいつは <a href="https://doc.rust-lang.org/regex/regex/index.html"><code>Regex</code></a> を用いて単語毎に分解、単語毎に文字数数えて解決してます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">char_count_list</span><span class="p">(</span><span class="n">w</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">usize</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">r</span><span class="s">&quot;\W+&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="n">w</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="p">.</span><span class="n">len</span><span class="p">()).</span><span class="n">collect</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">pi</span> <span class="o">=</span> <span class="n">char_count_list</span><span class="p">(</span><span class="s">&quot;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">pi</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec04">04. 元素記号</a></h3>

<p>これは、英語版「水兵リーベー僕の船」ですので条件に合うときだけ1文字に変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashMap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">atomic_words</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;&amp;</span><span class="n">str</span><span class="o">&gt;</span> <span class="o">=</span> <span class="s">&quot;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.&quot;</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">atomic_table</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="n">in</span> <span class="n">atomic_words</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">enumerate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">match</span> <span class="n">i</span> <span class="p">{</span>
</span><span class='line'>            <span class="m">0</span> <span class="o">|</span> <span class="m">4.</span><span class="p">..</span><span class="m">8</span> <span class="o">|</span> <span class="m">14.</span><span class="p">..</span><span class="m">15</span> <span class="o">|</span> <span class="m">18</span> <span class="o">=&gt;</span> <span class="n">chars</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">to_string</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">chars</span><span class="p">[</span><span class="m">0.</span><span class="p">.</span><span class="m">2</span><span class="p">].</span><span class="n">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">atomic_table</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">atomic_table</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}: {}&quot;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>やっぱり難しいのを実感</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[happy new year and new language]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/16/happy-new-year-and-new-language/"/>
    <updated>2018-01-16T00:32:16+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/16/happy-new-year-and-new-language</id>
    <content type="html"><![CDATA[<p>いまさらですが、あけましておめでとうございます。</p>

<h2>happy new language</h2>

<p>年開けから新しくプログラミング言語(Rust)始めました。(ってわけでもない)</p>

<p>雑に <a href="https://doc.rust-lang.org/book/second-edition/">rust book 2nd edition</a> を一通り読み終えたので、
<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> をやりはじめました。
とりあえず第1章が終ったので、メモとしてのこします。
基本的に <code>Rust</code> (に限らず)でやりたいことがとくにないので
<a href="http://yamasy1549.hateblo.jp/entry/2017/12/28/222631">ちょうどよさそうな勉強</a> として自然言語処理を選択しています。</p>

<h2>躓いたところ</h2>

<p>躓いていないところがないです。
まあやっていくうちに以下二つは常に書いておくと楽になるかなと。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 1文字毎</span>
</span><span class='line'><span class="k">fn</span> <span class="n">chars</span><span class="p">(</span><span class="n">string</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">string</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;&gt;</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1単語毎</span>
</span><span class='line'><span class="k">fn</span> <span class="n">words</span><span class="p">(</span><span class="n">sentence</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;&amp;</span><span class="n">str</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sentence</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;&amp;</span><span class="n">str</span><span class="o">&gt;&gt;</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec00">00. 文字列の逆順</a></h3>

<p>これは簡単で(でもなかった)、1文字ずつ分解して<a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rev">反対化</a>したあと <code>String</code> にします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">reverse_string</span><span class="p">(</span><span class="n">string</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">rev</span><span class="p">().</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec01">01. 「パタトクカシーー」</a></h3>

<p>これも簡単で、1文字ずつ分解して抜き出します。(絶対違う)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;パタトクカシーー&quot;</span><span class="p">.</span><span class="n">chars</span><span class="p">().</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">char</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}{}{}{}&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">c</span><span class="p">[</span><span class="m">2</span><span class="p">],</span> <span class="n">c</span><span class="p">[</span><span class="m">4</span><span class="p">],</span> <span class="n">c</span><span class="p">[</span><span class="m">6</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>とりあえず2問解いてみたけど、自然言語処理 &amp;&amp; <code>Rust</code> 難しい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年いったビール屋さん 2017]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/12/30/favorite-beer-house/"/>
    <updated>2017-12-30T17:01:14+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/12/30/favorite-beer-house</id>
    <content type="html"><![CDATA[<p>今年行ってよかったビアバー、ビアパブをまとめてみようとおもいます。</p>

<h2>何軒いった?</h2>

<p>まず、今年何軒いったのか確認します。</p>

<ol>
<li><a href="https://tabelog.com/tokyo/A1311/A131102/13095482/">浅草ビアホール D&rsquo;s diner</a></li>
<li><a href="https://tabelog.com/tokyo/A1323/A132302/13199539/">Titans</a></li>
<li><a href="https://tabelog.com/tokyo/A1310/A131003/13000242/">ブラッセルズ</a></li>
<li><a href="https://tabelog.com/tokyo/A1314/A131403/13202319/">アンテナアメリカ</a></li>
<li><a href="https://tabelog.com/tokyo/A1310/A131002/13184169/">WIZ CRAFT BEER and FOOD</a></li>
<li><a href="https://tabelog.com/tokyo/A1311/A131106/13168688/">Bon Fire</a></li>
<li><a href="https://tabelog.com/tokyo/A1311/A131105/13180065/">谷中ビアホール</a></li>
<li><a href="https://tabelog.com/tokyo/A1303/A130301/13130658/">アボットチョイス 渋谷店</a></li>
<li><a href="https://tabelog.com/tokyo/A1317/A131709/13195653/">グッド スリープ ベーカー</a></li>
<li><a href="https://tabelog.com/tokyo/A1303/A130301/13208803/">Mikkeller Tokyo</a></li>
<li><a href="https://tabelog.com/tokyo/A1316/A131603/13197463/">デビルクラフト 五反田店</a></li>
<li><a href="https://tabelog.com/tokyo/A1307/A130701/13165318/">BrewDog Roppongi</a></li>
<li><a href="https://tabelog.com/tokyo/A1301/A130101/13142917/">Craft Beer Bar iBREW</a></li>
<li><a href="https://tabelog.com/tokyo/A1311/A131102/13163537/">カンピオンエール</a></li>
<li><a href="https://tabelog.com/tokyo/A1301/A130102/13200310/">シェイク シャック 東京国際フォーラム店</a></li>
<li><a href="https://tabelog.com/tokyo/A1304/A130403/13142430/">Watering Hole</a></li>
<li><a href="https://tabelog.com/tokyo/A1309/A130905/13135158/">ザロイヤルスコッツマン</a></li>
<li><a href="https://tabelog.com/tokyo/A1313/A131307/13034571/">Belg Aube</a></li>
<li><a href="https://tabelog.com/tokyo/A1324/A132402/13200541/">びあマ &amp; Beer-Ma BAR</a></li>
<li><a href="https://tabelog.com/tokyo/A1310/A131004/13056128/">Tail&rsquo;s Ale House 本郷店</a></li>
<li><a href="https://tabelog.com/tokyo/A1310/A131004/13199373/">クラフト ワークス</a></li>
<li><a href="https://tabelog.com/tokyo/A1310/A131002/13009331/">地ビールハウス 蔵くら</a></li>
<li><a href="https://tabelog.com/tokyo/A1303/A130301/13053765/">BEER DINING The Griffon</a></li>
<li><a href="https://tabelog.com/tokyo/A1314/A131402/13194636/">SWANLAKE Pub Edo 田町店</a></li>
</ol>


<p>24軒、大分いってますね・・・</p>

<h2>どこがよかった?</h2>

<p>だいたいよいですね。Mikkeller, BrewDog, Swanlakeなどの直営店、Watering Hole, 蔵くら, Devil Craftの有名店は説明不要だとおもうんでパスします</p>

<h3>特に気に入ったお店</h3>

<p>北千住のびあマと大塚のTitansがとくによく、
両店ともボトルビールが充実しています。</p>

<p>びあマのほうはボトルビール選べるお店とタップや角打ちができる複合タイプのお店です。
近くに<a href="https://www.google.co.jp/search?newwindow=1&amp;client=firefox-b-ab&amp;dcr=0&amp;q=%E8%99%B9%E3%81%AE%E5%BA%83%E5%A0%B4&amp;spell=1&amp;sa=X&amp;ved=0ahUKEwjB4NCmsbHYAhUIUZQKHVycCa8QvS4IRDAA&amp;biw=1918&amp;bih=981&amp;npsic=0&amp;rflfq=1&amp;rlha=0&amp;rllag=35709023,139831431,5842&amp;tbm=lcl&amp;rldimm=12406913573681279321&amp;rldoc=1&amp;tbs=lrf:!2m1!1e2!2m1!1e3!3sIAE,lf:1,lf_ui:1#rlfi=hd:;si:12406913573681279321;mv:!1m3!1d76559.41565753905!2d139.78141775!3d35.6865969!2m3!1f0!2f0!3f0!3m2!1i497!2i567!4f13.1;tbs:lrf:!2m1!1e2!2m1!1e3!3sIAE,lf:1,lf_ui:1">大きな公園</a>があり、ここでビールを買ってわいわいしながら公園で飲むのがよいかんじです。店のなかで飲むのもよいです。</p>

<p>Titans は持ち込みありのお店で、近くに商店街があり、そこに有名なたこ焼き屋の<a href="https://tabelog.com/tokyo/A1323/A132302/13132934/">はち八</a>があるのでここで買ってきて飲むのもいいですし、
鍋持ち込んで鍋するのもよいですね。</p>

<p>あと、いいかんじの雰囲気で住宅街にある店でGood Sleep Bakerが好きです。
ここは Tap 数が少ないですが、パンがとてもおいしいです。
おすすめのメニューとしてはバインミーがとくにおすすめです。</p>

<h3>今年行ってない店</h3>

<p>意外でポパイ、萬感今年行ってないようでびっくりしてます。</p>

<h2>おわり</h2>

<p>こうやってみると24軒(重複してるのは数えていない)とほぼ毎週行ってるようで、それはお金がなくなるよね
今年、広島、兵庫行きましたが、どちらも日本酒しか飲まなかったので来年は、東京(関東)以外でも行こうとおもってます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRubyはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/12/18/hello/"/>
    <updated>2017-12-18T21:56:55+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/12/18/hello</id>
    <content type="html"><![CDATA[<p>表題のとおり、 <a href="https://github.com/SciRuby/iruby">IRuby</a> をはじめてみました</p>

<h3>インストール</h3>

<p>インストールは簡単で <code>gem install iruby</code> でいけますが、私の利用している環境では依存している <a href="https://github.com/zeromq/czmq">czmq</a> が古かったので手動でインストールして回避しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git clone https://github.com/zeromq/czmq.git</span>
</span><span class='line'><span class="go">cd czmq</span>
</span><span class='line'><span class="go">./autogen</span>
</span><span class='line'><span class="go">./configure --prefix=${HOME}/.local</span>
</span><span class='line'><span class="go">make -j4</span>
</span><span class='line'><span class="go">make install</span>
</span><span class='line'><span class="go">gem install iruby cztop</span>
</span><span class='line'><span class="go">LD_LIBRARY_PATH=${HOME}/.local/lib iruby</span>
</span></code></pre></td></tr></table></div></figure>


<p>でインストールと動作はできます。画像貼るのがメンドイので <code>ipython</code> 貼っておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">{</span>
</span><span class='line'><span class="go"> &quot;cells&quot;: [</span>
</span><span class='line'><span class="go">  {</span>
</span><span class='line'><span class="go">   &quot;cell_type&quot;: &quot;code&quot;,</span>
</span><span class='line'><span class="go">   &quot;execution_count&quot;: 4,</span>
</span><span class='line'><span class="go">   &quot;metadata&quot;: {},</span>
</span><span class='line'><span class="go">   &quot;outputs&quot;: [</span>
</span><span class='line'><span class="go">    {</span>
</span><span class='line'><span class="go">     &quot;data&quot;: {</span>
</span><span class='line'><span class="go">      &quot;text/html&quot;: [</span>
</span><span class='line'><span class="go">       &quot;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  &lt;script&gt;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  requirejs.config({paths: { &#39;plotly&#39;: [&#39;https://cdn.plot.ly/plotly-latest.min&#39;] }})\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  &lt;/script&gt;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;&lt;div id=\&quot;c34db0db-dc37-4ae3-a2b3-33ab99830b89\&quot; style=\&quot;height: 100%; width: 100%;\&quot;&gt;&lt;/div&gt;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;&lt;script&gt;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot; require([&#39;plotly&#39;], function(Plotly) { \n&quot;,</span>
</span><span class='line'><span class="go">       &quot;Plotly.newPlot(\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  &#39;c34db0db-dc37-4ae3-a2b3-33ab99830b89&#39;,\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  [{\&quot;x\&quot;:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\&quot;y\&quot;:[100,81,64,49,36,25,16,9,4,1,0,1,4,9,16,25,36,49,64,81,100],\&quot;type\&quot;:null,\&quot;mode\&quot;:\&quot;\&quot;}],\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  {\&quot;width\&quot;:1000,\&quot;height\&quot;:500},\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  {\&quot;linkText\&quot;:\&quot;Export to plot.ly\&quot;,\&quot;showLink\&quot;:true}\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;)\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;window.addEventListener(&#39;resize&#39;, function() {\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;  Plotly.Plots.resize(document.getElementById(&#39;c34db0db-dc37-4ae3-a2b3-33ab99830b89&#39;))\n&quot;,</span>
</span><span class='line'><span class="go">       &quot;})\n&quot;,</span>
</span><span class='line'><span class="go">       &quot; }) \n&quot;,</span>
</span><span class='line'><span class="go">       &quot;&lt;/script&gt;&quot;</span>
</span><span class='line'><span class="go">      ],</span>
</span><span class='line'><span class="go">      &quot;text/plain&quot;: [</span>
</span><span class='line'><span class="go">       &quot;#&lt;Plotly::Offline::HTML:0x000056356f14be00 @id=\&quot;c34db0db-dc37-4ae3-a2b3-33ab99830b89\&quot;, @data=[{:x=&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], :y=&gt;[100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100], :type=&gt;nil, :mode=&gt;\&quot;\&quot;}], @layout={:width=&gt;1000, :height=&gt;500}, @config={:linkText=&gt;\&quot;Export to plot.ly\&quot;, :showLink=&gt;true}, @embedded=true&gt;&quot;</span>
</span><span class='line'><span class="go">      ]</span>
</span><span class='line'><span class="go">     },</span>
</span><span class='line'><span class="go">     &quot;metadata&quot;: {},</span>
</span><span class='line'><span class="go">     &quot;output_type&quot;: &quot;display_data&quot;</span>
</span><span class='line'><span class="go">    },</span>
</span><span class='line'><span class="go">    {</span>
</span><span class='line'><span class="go">     &quot;data&quot;: {</span>
</span><span class='line'><span class="go">      &quot;text/plain&quot;: [</span>
</span><span class='line'><span class="go">       &quot;#&lt;CZTop::Socket::PUB:0x56356e7f3620 last_endpoint=\&quot;tcp://127.0.0.1:45835\&quot;&gt;&quot;</span>
</span><span class='line'><span class="go">      ]</span>
</span><span class='line'><span class="go">     },</span>
</span><span class='line'><span class="go">     &quot;execution_count&quot;: 4,</span>
</span><span class='line'><span class="go">     &quot;metadata&quot;: {},</span>
</span><span class='line'><span class="go">     &quot;output_type&quot;: &quot;execute_result&quot;</span>
</span><span class='line'><span class="go">    }</span>
</span><span class='line'><span class="go">   ],</span>
</span><span class='line'><span class="go">   &quot;source&quot;: [</span>
</span><span class='line'><span class="go">    &quot;require &#39;daru&#39;\n&quot;,</span>
</span><span class='line'><span class="go">    &quot;require &#39;daru/plotly&#39;\n&quot;,</span>
</span><span class='line'><span class="go">    &quot;include Daru::Plotly::Methods\n&quot;,</span>
</span><span class='line'><span class="go">    &quot;\n&quot;,</span>
</span><span class='line'><span class="go">    &quot;dv = Daru::Vector.new((-10..10).map{|n| n ** 2 })\n&quot;,</span>
</span><span class='line'><span class="go">    &quot;plot(dv, x: \&quot;x\&quot;, y: \&quot;y\&quot;).show&quot;</span>
</span><span class='line'><span class="go">   ]</span>
</span><span class='line'><span class="go">  }</span>
</span><span class='line'><span class="go"> ],</span>
</span><span class='line'><span class="go"> &quot;metadata&quot;: {</span>
</span><span class='line'><span class="go">  &quot;kernelspec&quot;: {</span>
</span><span class='line'><span class="go">   &quot;display_name&quot;: &quot;Ruby 2.4.2&quot;,</span>
</span><span class='line'><span class="go">   &quot;language&quot;: &quot;ruby&quot;,</span>
</span><span class='line'><span class="go">   &quot;name&quot;: &quot;ruby&quot;</span>
</span><span class='line'><span class="go">  },</span>
</span><span class='line'><span class="go">  &quot;language_info&quot;: {</span>
</span><span class='line'><span class="go">   &quot;file_extension&quot;: &quot;.rb&quot;,</span>
</span><span class='line'><span class="go">   &quot;mimetype&quot;: &quot;application/x-ruby&quot;,</span>
</span><span class='line'><span class="go">   &quot;name&quot;: &quot;ruby&quot;,</span>
</span><span class='line'><span class="go">   &quot;version&quot;: &quot;2.4.2&quot;</span>
</span><span class='line'><span class="go">  }</span>
</span><span class='line'><span class="go"> },</span>
</span><span class='line'><span class="go"> &quot;nbformat&quot;: 4,</span>
</span><span class='line'><span class="go"> &quot;nbformat_minor&quot;: 2</span>
</span><span class='line'><span class="go">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ウイスキーアドベントカレンダー2日目]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/12/02/wiskey-advent-calendar/"/>
    <updated>2017-12-02T00:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/12/02/wiskey-advent-calendar</id>
    <content type="html"><![CDATA[<p><a href="https://adventar.org/calendars/2219">ウイスキー Advent Calendar 2017</a> の2日目の記事です。</p>

<p>ウィスキーはピートの香りが強いほうがすきです。</p>

<p>とりあえず蒸留所に行ってきた話を
以前、<a href="http://www.suntory.co.jp/factory/hakushu/">白州蒸留所</a> と <a href="http://www.suntory.co.jp/factory/yamazaki/">山崎蒸留所</a> に行ったことがあるのでその話を。</p>

<h2>白州蒸留所</h2>

<p>白州へは5年くらい前に5人でわいわいしながら行ってきました。
ここでは、工場見学のツアーに参加しました。
また、テイスティングルームですこしウイスキーを試せて良いです。</p>

<h2>山崎蒸留所</h2>

<p>山崎は去年、京都へ行く機会があり、ウイスキーを買うために行きました。
ここでも工場見学可能だったのですが、事前に予約が必要であるため
今回はパスして、工場に併設されているウイスキーのテイスティングルーム
で幾つかのウイスキーをたのしみ、ショップでウイスキーと梅酒を買って
鴨川へ</p>

<h2>おわり</h2>

<p>日本のウイスキーはあまり得意じゃないのですが、蒸留所に行くのは楽しいし
楽しみ方を教えてもらえるので近くに蒸留所がある方は一度行ってみるとよいとおもいます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mikutter合宿いってきた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/12/01/went-to-kinosaki-and-amano-hashidate/"/>
    <updated>2017-12-01T00:58:40+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/12/01/went-to-kinosaki-and-amano-hashidate</id>
    <content type="html"><![CDATA[<p><a href="https://adventar.org/calendars/2128">mikutter Advent Calendar</a> 1日目のエントリです
先月の11/23-26に <a href="https://twitter.com/toshi_a">@toshi_a</a> の垢凍結記念の <a href="https://atnd.org/events/90619">mikutter合宿</a> に行ってきた</p>

<h2>なにしにいってきたの？</h2>

<p>リフレッシュ、気分転換、野々村せんせーの気分を味わいに、toshi_aさんをAORIに。
蟹、但馬牛、温泉を楽しみに。
くわしくは <a href="https://twitter.com/akkiesoft">@akkiesoft</a> の <a href="http://akkiesoft.hatenablog.jp/entry/20171127/1511763219">ブログエントリ</a> を読んで。
城崎は温泉もよく、宿も落ち着いており、周りの店が早く閉まる以外の不満はなかったですね。</p>

<h2>でなにやってたの？</h2>

<p>温泉、酒、飯以外なにもやってない。</p>

<p>mikutterのgtk3対応手をつけようかとおもったけど、無理だった。</p>

<h2>ついでに天橋立もいってきた</h2>

<p>室長()が天橋立いくぞっていってたので連れてってもらった。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/amano-hashidate.jpg" alt="" /></p>

<h2>酒蔵</h2>

<p>ついでに天橋立近くの酒蔵 <a href="http://kuramoto-mukai.jp/">向井酒造</a> にいってきた。ここは室長が9時までやってるから!
って5時半くらいに行ったらすでに閉まってて、丁度女将さんが出てきたところだったので開けてもらい酒を買いました。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/mukai-sake.jpg" alt="" /></p>

<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsの構成管理をitamaeで管理]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/07/01/emacs-config-from-itamae/"/>
    <updated>2017-07-01T22:59:16+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/07/01/emacs-config-from-itamae</id>
    <content type="html"><![CDATA[<p>仕事とプライベート環境でemacsのフォント等設定するのがいいかげんダるくなってきたので、Itamaeを流すだけでイイカンジにするようにした</p>

<h2>もともとどうかんりしてたのか</h2>

<p>もともと<a href="https://github.com/katsyoshi/dot.emacs.d">github</a>で管理していたが、さすがにFontの環境異差をちょこちょこ変えるのが面倒になった</p>

<h2>Itamae de kanri</h2>

<p>gitで管理しているので環境異差ある部分を<a href="https://github.com/katsyoshi/itamae-recipes">itamae</a>で管理するように方針を転換。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">emacs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">font</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">family</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ricty</span>
</span><span class='line'>    <span class="l-Scalar-Plain">height</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'>  <span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">auto-complete</span>
</span><span class='line'>  <span class="l-Scalar-Plain">settings</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか書いてあとはItamaeを実行することで必要なパッケージのインストール、
必要な設定へのリンク追加などをするようにしました。</p>

<h2>おわり</h2>

<p>これでなにも考えなくてすむようになるのかな？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rustful web]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/06/04/rustful-web/"/>
    <updated>2017-06-04T23:17:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/06/04/rustful-web</id>
    <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org/ja-JP/">rust</a> で Web Application をつくろうと思って <a href="https://github.com/Ogeon/rustful">rustful</a> を使ってやってみてたりした。</p>

<p>ドキュメントと利用しているバージョンのコードが異なり、必要なモジュールが読み込めなかったり、関数の引数が異なったりしてうごかねぇってなったのでHEADを使うことで解決。</p>

<h2>🍻</h2>

<p>とりあえずいつものメンバーで🍻にいってきた。浅草のカンピオンエールという店でのんでそのあと隣の店でお好み焼きをたべてた。お好み焼き屋のあとは河原まであるて吾妻橋からみえる
やつをながめながらビールのんでた</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use red-arrow.gem]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem/"/>
    <updated>2017-05-31T23:27:57+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem</id>
    <content type="html"><![CDATA[<p><a href="https://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/">こないだインストール</a> した <a href="https://arrow.apache.org/">Apache Arrow</a> がとりあえず <a href="https://github.com/red-data-tools/red-arrow">Ruby</a> でうごくようになったのでメモ</p>

<h2>メモ</h2>

<p>gemのインストールは前回のインストールを行なえば問題ないです。ですが、arrowを利用しようとすると失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;arrow&quot;</span>
</span><span class='line'><span class="sr">/home/</span><span class="n">katsu</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">gobject</span><span class="o">-</span><span class="n">introspection</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">gobject</span><span class="o">-</span><span class="n">introspection</span><span class="o">/</span><span class="n">loader</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">37</span><span class="ss">:in</span> <span class="sb">`require&#39;:GObjectIntrospection::RepositoryError::TypelibNotFound: Typelib file for namespace &#39;Arrow&#39; (any version) not found</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは <code>GObjectIntrospection</code> の<a href="https://github.com/red-data-tools/red-arrow/blob/master/lib/arrow.rb#L25">ロードに失敗</a>しているようです。
なので<a href="http://www.clear-code.com/blog/2013/12/16.html">ここ</a>や<a href="http://qiita.com/groonga/items/71b145b37d77bd160bf2">ここ</a>を参考に環境変数 <code>GI_TYPELIB_PATH</code> を設定すると読み込まれるようになり実行できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">export </span><span class="nv">GI_TYPELIB_PATH</span><span class="o">=</span>/path/to/girepository-1.0
</span><span class='line'><span class="gp">$</span> irb -rarrow
</span></code></pre></td></tr></table></div></figure>


<p>とやるとエラーがなくなります。</p>

<p>最後に<a href="https://github.com/red-data-tools/red-arrow/tree/master/example">サンプル</a>を実行して確認しました!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> ruby write-file.rb
</span><span class='line'><span class="gp">%</span> ruby <span class="nb">read</span>-file.rb
</span><span class='line'><span class="go">========================================</span>
</span><span class='line'><span class="go">record-batch[0]:</span>
</span><span class='line'><span class="go">  uint8: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  uint16: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  uint32: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  uint64: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  int8: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  int16: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  int32: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  int64: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  float: [1.100000023841858, -2.200000047683716, 4.400000095367432, -8.800000190734863]</span>
</span><span class='line'><span class="go">  double: [1.1, -2.2, 4.4, -8.8]</span>
</span><span class='line'><span class="go">========================================</span>
</span><span class='line'><span class="go">record-batch[1]:</span>
</span><span class='line'><span class="go">  uint8: [2, 4, 8]</span>
</span><span class='line'><span class="go">  uint16: [2, 4, 8]</span>
</span><span class='line'><span class="go">  uint32: [2, 4, 8]</span>
</span><span class='line'><span class="go">  uint64: [2, 4, 8]</span>
</span><span class='line'><span class="go">  int8: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  int16: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  int32: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  int64: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  float: [-2.200000047683716, 4.400000095367432, -8.800000190734863]</span>
</span><span class='line'><span class="go">  double: [-2.2, 4.4, -8.8]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>最初ろーどえらーでこまってた</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[installing apache arrow]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/"/>
    <updated>2017-05-29T21:45:29+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow</id>
    <content type="html"><![CDATA[<p><a href="https://slide.rabbit-shocker.org/authors/kou/nagoya-rubykaigi-03/">最近</a><a href="https://github.com/kou">すとうさん</a>が<a href="https://slide.rabbit-shocker.org/authors/kou/data-science-rb/">一押し</a>している<a href="https://arrow.apache.org/">apache arrow</a>をインストールしてみた</p>

<h2>環境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uname -a
</span><span class='line'>Linux rin 4.9.10-gentoo #6 SMP Tue Mar 28 01:29:26 JST 2017 x86_64 Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz GenuineIntel GNU/Linux
</span><span class='line'>$ gcc -v
</span><span class='line'>組み込み spec を使用しています。
</span><span class='line'>COLLECT_GCC=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0/gcc
</span><span class='line'>COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-pc-linux-gnu/5.4.0/lto-wrapper
</span><span class='line'>ターゲット: x86_64-pc-linux-gnu
</span><span class='line'>configure 設定: /var/tmp/portage/sys-devel/gcc-5.4.0-r3/work/gcc-5.4.0/configure --host=x86_64-pc-linux-gnu --build=x86_64-pc-linux-gnu --prefix=/usr --bindir=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0 --includedir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include --datadir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0 --mandir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/man --infodir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/info --with-gxx-include-dir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include/g++-v5 --with-python-dir=/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/python --enable-languages=c,c++,fortran --enable-obsolete --enable-secureplt --disable-werror --with-system-zlib --enable-nls --without-included-gettext --enable-checking=release --with-bugurl=https://bugs.gentoo.org/ --with-pkgversion='Gentoo 5.4.0-r3 p1.3, pie-0.6.5' --enable-libstdcxx-time --enable-shared --enable-threads=posix --enable-__cxa_atexit --enable-clocale=gnu --enable-multilib --with-multilib-list=m32,m64 --disable-altivec --disable-fixed-point --enable-targets=all --disable-libgcj --enable-libgomp --disable-libmudflap --disable-libssp --disable-libcilkrts --disable-libmpx --enable-vtable-verify --enable-libvtv --enable-lto --without-isl --enable-libsanitizer
</span><span class='line'>スレッドモデル: posix
</span><span class='line'>gcc バージョン 5.4.0 (Gentoo 5.4.0-r3 p1.3, pie-0.6.5)</span></code></pre></td></tr></table></div></figure>


<h2>いんすとーる</h2>

<p>今回まだGentooにパッケージがないのでgitからインストールします。ほしいのはrubygems.orgに公開されている<a href="https://rubygems.org/gems/red-arrow">red-arrow</a>をコンパイルするためにglibとこれを利用するために必要な依存パッケージとしてcppをインストールします。インストールはかんたんで <code>cmake</code> を実行すればインストールデキルはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git clone git@github.com:apache/arrow.git
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>arrow/cpp
</span><span class='line'><span class="gp">$</span> mkdir release
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>release
</span><span class='line'><span class="gp">$</span> cmake .. -DCMAKE_BUILD_TYPE<span class="o">=</span>Release
</span></code></pre></td></tr></table></div></figure>


<p>でリリース用パッケージがビルドされるはずですが<a href="https://gist.github.com/katsyoshi/4486792ad43feae4d690d589dac1a157">エラー</a>が出ます。
これはJIRAで<a href="https://issues.apache.org/jira/browse/ARROW-667">検索した結果</a>より <code>gcc</code> のバージョン情報がとれずにエラーをだしているやりとりが発見されたのでわかりました。
ログを見ると実際に取得できていないことも確認しました。で <code>cpp/cmake_modules/CompilerInfo.cmake</code> をみるとどうやら日本語のバージョン情報は考慮されていないような作りになっていました。
なので <code>LANG=C</code> をつけて <code>cmake</code> 再びつけて実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nv">LANG</span><span class="o">=</span>C cmake .. -DCMAKE_BUILD_TYPE<span class="o">=</span>Release
</span><span class='line'><span class="gp">$</span> make
</span><span class='line'><span class="gp">$</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>これでC++のインストールは終了です。続いてglibをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">cd</span> ../../c_glib
</span><span class='line'><span class="gp">$</span> ./autgen.sh
</span><span class='line'><span class="gp">$</span> ./configure
</span><span class='line'><span class="gp">$</span> make
</span><span class='line'><span class="gp">$</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>でインストールできます。こちら久々に野良ビルドしたため <code>PKG_CONFIG_PATH</code> や <code>LD_LIBRARY_PATH</code> の設定をわすれてただけなのですんなりいけました。
で最後に <code>gem install red-arrow</code> を実行して目的を達成しました!!!!11</p>

<h2>おわり</h2>

<p>ほんとうのもくてきは <code>fluentd</code> のぷらぐいんをかくことですがつかれたのできょうはここまで</p>
]]></content>
  </entry>
  
</feed>
