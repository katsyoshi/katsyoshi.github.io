<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2017-12-01T00:45:51+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacsの構成管理をitamaeで管理]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/07/01/emacs-config-from-itamae/"/>
    <updated>2017-07-01T22:59:16+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/07/01/emacs-config-from-itamae</id>
    <content type="html"><![CDATA[<p>仕事とプライベート環境でemacsのフォント等設定するのがいいかげんダるくなってきたので、Itamaeを流すだけでイイカンジにするようにした</p>

<h2>もともとどうかんりしてたのか</h2>

<p>もともと<a href="https://github.com/katsyoshi/dot.emacs.d">github</a>で管理していたが、さすがにFontの環境異差をちょこちょこ変えるのが面倒になった</p>

<h2>Itamae de kanri</h2>

<p>gitで管理しているので環境異差ある部分を<a href="https://github.com/katsyoshi/itamae-recipes">itamae</a>で管理するように方針を転換。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">emacs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">font</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">family</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ricty</span>
</span><span class='line'>    <span class="l-Scalar-Plain">height</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'>  <span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">auto-complete</span>
</span><span class='line'>  <span class="l-Scalar-Plain">settings</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか書いてあとはItamaeを実行することで必要なパッケージのインストール、
必要な設定へのリンク追加などをするようにしました。</p>

<h2>おわり</h2>

<p>これでなにも考えなくてすむようになるのかな？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rustful web]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/06/04/rustful-web/"/>
    <updated>2017-06-04T23:17:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/06/04/rustful-web</id>
    <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org/ja-JP/">rust</a> で Web Application をつくろうと思って <a href="https://github.com/Ogeon/rustful">rustful</a> を使ってやってみてたりした。</p>

<p>ドキュメントと利用しているバージョンのコードが異なり、必要なモジュールが読み込めなかったり、関数の引数が異なったりしてうごかねぇってなったのでHEADを使うことで解決。</p>

<h2>🍻</h2>

<p>とりあえずいつものメンバーで🍻にいってきた。浅草のカンピオンエールという店でのんでそのあと隣の店でお好み焼きをたべてた。お好み焼き屋のあとは河原まであるて吾妻橋からみえる
やつをながめながらビールのんでた</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use red-arrow.gem]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem/"/>
    <updated>2017-05-31T23:27:57+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem</id>
    <content type="html"><![CDATA[<p><a href="https://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/">こないだインストール</a> した <a href="https://arrow.apache.org/">Apache Arrow</a> がとりあえず <a href="https://github.com/red-data-tools/red-arrow">Ruby</a> でうごくようになったのでメモ</p>

<h2>メモ</h2>

<p>gemのインストールは前回のインストールを行なえば問題ないです。ですが、arrowを利用しようとすると失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;arrow&quot;</span>
</span><span class='line'><span class="sr">/home/</span><span class="n">katsu</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">gobject</span><span class="o">-</span><span class="n">introspection</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">gobject</span><span class="o">-</span><span class="n">introspection</span><span class="o">/</span><span class="n">loader</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">37</span><span class="ss">:in</span> <span class="sb">`require&#39;:GObjectIntrospection::RepositoryError::TypelibNotFound: Typelib file for namespace &#39;Arrow&#39; (any version) not found</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは <code>GObjectIntrospection</code> の<a href="https://github.com/red-data-tools/red-arrow/blob/master/lib/arrow.rb#L25">ロードに失敗</a>しているようです。
なので<a href="http://www.clear-code.com/blog/2013/12/16.html">ここ</a>や<a href="http://qiita.com/groonga/items/71b145b37d77bd160bf2">ここ</a>を参考に環境変数 <code>GI_TYPELIB_PATH</code> を設定すると読み込まれるようになり実行できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">export </span><span class="nv">GI_TYPELIB_PATH</span><span class="o">=</span>/path/to/girepository-1.0
</span><span class='line'><span class="gp">$</span> irb -rarrow
</span></code></pre></td></tr></table></div></figure>


<p>とやるとエラーがなくなります。</p>

<p>最後に<a href="https://github.com/red-data-tools/red-arrow/tree/master/example">サンプル</a>を実行して確認しました!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">%</span> ruby write-file.rb
</span><span class='line'><span class="gp">%</span> ruby <span class="nb">read</span>-file.rb
</span><span class='line'><span class="go">========================================</span>
</span><span class='line'><span class="go">record-batch[0]:</span>
</span><span class='line'><span class="go">  uint8: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  uint16: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  uint32: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  uint64: [1, 2, 4, 8]</span>
</span><span class='line'><span class="go">  int8: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  int16: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  int32: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  int64: [1, -2, 4, -8]</span>
</span><span class='line'><span class="go">  float: [1.100000023841858, -2.200000047683716, 4.400000095367432, -8.800000190734863]</span>
</span><span class='line'><span class="go">  double: [1.1, -2.2, 4.4, -8.8]</span>
</span><span class='line'><span class="go">========================================</span>
</span><span class='line'><span class="go">record-batch[1]:</span>
</span><span class='line'><span class="go">  uint8: [2, 4, 8]</span>
</span><span class='line'><span class="go">  uint16: [2, 4, 8]</span>
</span><span class='line'><span class="go">  uint32: [2, 4, 8]</span>
</span><span class='line'><span class="go">  uint64: [2, 4, 8]</span>
</span><span class='line'><span class="go">  int8: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  int16: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  int32: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  int64: [-2, 4, -8]</span>
</span><span class='line'><span class="go">  float: [-2.200000047683716, 4.400000095367432, -8.800000190734863]</span>
</span><span class='line'><span class="go">  double: [-2.2, 4.4, -8.8]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>最初ろーどえらーでこまってた</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[installing apache arrow]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/"/>
    <updated>2017-05-29T21:45:29+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow</id>
    <content type="html"><![CDATA[<p><a href="https://slide.rabbit-shocker.org/authors/kou/nagoya-rubykaigi-03/">最近</a><a href="https://github.com/kou">すとうさん</a>が<a href="https://slide.rabbit-shocker.org/authors/kou/data-science-rb/">一押し</a>している<a href="https://arrow.apache.org/">apache arrow</a>をインストールしてみた</p>

<h2>環境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uname -a
</span><span class='line'>Linux rin 4.9.10-gentoo #6 SMP Tue Mar 28 01:29:26 JST 2017 x86_64 Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz GenuineIntel GNU/Linux
</span><span class='line'>$ gcc -v
</span><span class='line'>組み込み spec を使用しています。
</span><span class='line'>COLLECT_GCC=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0/gcc
</span><span class='line'>COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-pc-linux-gnu/5.4.0/lto-wrapper
</span><span class='line'>ターゲット: x86_64-pc-linux-gnu
</span><span class='line'>configure 設定: /var/tmp/portage/sys-devel/gcc-5.4.0-r3/work/gcc-5.4.0/configure --host=x86_64-pc-linux-gnu --build=x86_64-pc-linux-gnu --prefix=/usr --bindir=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0 --includedir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include --datadir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0 --mandir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/man --infodir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/info --with-gxx-include-dir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include/g++-v5 --with-python-dir=/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/python --enable-languages=c,c++,fortran --enable-obsolete --enable-secureplt --disable-werror --with-system-zlib --enable-nls --without-included-gettext --enable-checking=release --with-bugurl=https://bugs.gentoo.org/ --with-pkgversion='Gentoo 5.4.0-r3 p1.3, pie-0.6.5' --enable-libstdcxx-time --enable-shared --enable-threads=posix --enable-__cxa_atexit --enable-clocale=gnu --enable-multilib --with-multilib-list=m32,m64 --disable-altivec --disable-fixed-point --enable-targets=all --disable-libgcj --enable-libgomp --disable-libmudflap --disable-libssp --disable-libcilkrts --disable-libmpx --enable-vtable-verify --enable-libvtv --enable-lto --without-isl --enable-libsanitizer
</span><span class='line'>スレッドモデル: posix
</span><span class='line'>gcc バージョン 5.4.0 (Gentoo 5.4.0-r3 p1.3, pie-0.6.5)</span></code></pre></td></tr></table></div></figure>


<h2>いんすとーる</h2>

<p>今回まだGentooにパッケージがないのでgitからインストールします。ほしいのはrubygems.orgに公開されている<a href="https://rubygems.org/gems/red-arrow">red-arrow</a>をコンパイルするためにglibとこれを利用するために必要な依存パッケージとしてcppをインストールします。インストールはかんたんで <code>cmake</code> を実行すればインストールデキルはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git clone git@github.com:apache/arrow.git
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>arrow/cpp
</span><span class='line'><span class="gp">$</span> mkdir release
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>release
</span><span class='line'><span class="gp">$</span> cmake .. -DCMAKE_BUILD_TYPE<span class="o">=</span>Release
</span></code></pre></td></tr></table></div></figure>


<p>でリリース用パッケージがビルドされるはずですが<a href="https://gist.github.com/katsyoshi/4486792ad43feae4d690d589dac1a157">エラー</a>が出ます。
これはJIRAで<a href="https://issues.apache.org/jira/browse/ARROW-667">検索した結果</a>より <code>gcc</code> のバージョン情報がとれずにエラーをだしているやりとりが発見されたのでわかりました。
ログを見ると実際に取得できていないことも確認しました。で <code>cpp/cmake_modules/CompilerInfo.cmake</code> をみるとどうやら日本語のバージョン情報は考慮されていないような作りになっていました。
なので <code>LANG=C</code> をつけて <code>cmake</code> 再びつけて実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nv">LANG</span><span class="o">=</span>C cmake .. -DCMAKE_BUILD_TYPE<span class="o">=</span>Release
</span><span class='line'><span class="gp">$</span> make
</span><span class='line'><span class="gp">$</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>これでC++のインストールは終了です。続いてglibをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">cd</span> ../../c_glib
</span><span class='line'><span class="gp">$</span> ./autgen.sh
</span><span class='line'><span class="gp">$</span> ./configure
</span><span class='line'><span class="gp">$</span> make
</span><span class='line'><span class="gp">$</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>でインストールできます。こちら久々に野良ビルドしたため <code>PKG_CONFIG_PATH</code> や <code>LD_LIBRARY_PATH</code> の設定をわすれてただけなのですんなりいけました。
で最後に <code>gem install red-arrow</code> を実行して目的を達成しました!!!!11</p>

<h2>おわり</h2>

<p>ほんとうのもくてきは <code>fluentd</code> のぷらぐいんをかくことですがつかれたのできょうはここまで</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start watching dazn]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/21/start-watching-dazn/"/>
    <updated>2017-05-21T14:49:19+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/21/start-watching-dazn</id>
    <content type="html"><![CDATA[<p>タイトルのとおり、DAZNを見はじめた。
Netflix, Huluを契約してたけど、ぜんぜん見ていなかったので解約した。
DAZN をみようとおもったきっかけはNBAのカンファレンスファイナルをみようとおもったため。</p>

<p>とりあえず視聴感想ですが、表示は色々なところで言われてるとおもいますが、
接続開始時にブロックノイズが気になりますが、一旦綺麗に表示されるとそのあとは
特に気になりません。</p>

<p>肝心の試合内容が現在非常に残念なため試合内の評価はしません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[raspiでdnsを運用してみはじめた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/04/09/use-dnsmasq-for-domestic-network/"/>
    <updated>2017-04-09T00:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/04/09/use-dnsmasq-for-domestic-network</id>
    <content type="html"><![CDATA[<p>RasPi2 が3台あってつかっていないので DNS として動かすようにしてみた。
RasPi とはいえ中身は Ubuntu Linux なのでのインストールは <code>apt install dnsmasq</code> するだけでおわります。</p>

<h2>はまったところ</h2>

<p>いつもどおりはまりました。今回は以下の二点</p>

<ul>
<li>/etc/dnsmasq.d/ に hosts ファイルを置くとエラー</li>
<li>/etc/hosts ファイルのパーミッションが <code>600</code> になっていたためエラー</li>
</ul>


<h3>/etc/dnsmasq.d/ に hosts ファイルを置くとエラー</h3>

<p>ログを見ても以下のログしか出ておらず理由の調査に時間がかかった。hosts ファイルは設定ファイルではないため当然といえば当然なのですが…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Jan  1 00:00:08 localhost dnsmasq[673]: bad option at line 1 of /etc/dnsmasq.d/hosts</span></code></pre></td></tr></table></div></figure>


<p>今、<code>/etc/defaults/dnsmasq</code> を調べてみるとそうなってました。はい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CONFIG_DIR=/etc/dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new</span></code></pre></td></tr></table></div></figure>


<h3>/etc/hosts ファイルのパーミッションが <code>600</code> になっていたためエラー</h3>

<p>こちらは上記問題を解決したあと、反映されないのでログを見たときにわかりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Apr  8 08:57:20 localhost dnsmasq[4733]: failed to load names from /etc/hosts: Permission denied</span></code></pre></td></tr></table></div></figure>


<p>これの原因は <code>itamae</code> でファイルを送信するときに <code>mode '644'</code> を指定する必要があったのだが、指定せずに
送信してしまったため発生。</p>

<h2>おわり</h2>

<p>おわり</p>

<h3>関連リポジトリ</h3>

<p><a href="https://github.com/katsyoshi/itamae-recipes">https://github.com/katsyoshi/itamae-recipes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixirのインストール方法]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/04/01/how-to-install-elixir/"/>
    <updated>2017-04-01T09:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/04/01/how-to-install-elixir</id>
    <content type="html"><![CDATA[<p><a href="http://www.elixirconf.jp/">Elixir Conf Japan</a> に行きましたが、よく考えてみたら
まだこの PC に <a href="http://elixir-lang.org/">Elixir</a> をインストールしていないことに気がついたので
隣の<a href="https://twitter.com/zzak_jp">英語のうまいおじさん</a>にインストール方法を<a href="https://gist.github.com/katsyoshi/7ac2579bbe903ff65685570fd3873379">教えてもらいながら</a>インストールしました<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2>準備</h2>

<p>ここでは <a href="https://gentoo.org/">Gentoo Linux</a> を前提としております。
まず、Elixir を動かすために <a href="https://www.erlang.org">Erlang</a> をインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo eix-sync</span>
</span><span class='line'><span class="go">sudo emerge erlang</span>
</span></code></pre></td></tr></table></div></figure>


<p>準備はこれだけです。</p>

<h2>インストール</h2>

<p>次にインストールなのですが、Elixir は Earlang VM 上で動くプログラミング言語のため、コンパイルされたバイナリを置くだけでインストールがおわります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">wget https://github.com/elixir-lang/elixir/releases/download/v1.4.2/Precompiled.zip</span>
</span><span class='line'><span class="go">unzip Precompiled.zip -d elixir</span>
</span><span class='line'><span class="go">mv elixir /path/to/elixir</span>
</span><span class='line'><span class="go">echo &#39;export PATH=/path/to/elixir/bin:$PATH&#39; &gt;&gt; ~/.bashrc</span>
</span><span class='line'><span class="go">source ~/.bashrc</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>さいごに <code>iex</code> を起動して確認すればおわり</p>

<h3>参考</h3>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>elixir getting started, https://gist.github.com/zzak/a765d6a63860d75c4444e35f57daed13, 2017/04/01 閲覧<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[basic authenticate in h2o]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/02/20/basic-authenticate-in-h2o/"/>
    <updated>2017-02-20T21:53:49+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/02/20/basic-authenticate-in-h2o</id>
    <content type="html"><![CDATA[<p>H2Oでベーシック認証したい場合は以下のようにします<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="s">&quot;/&quot;</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mruby.handler</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>      <span class="no">require &quot;htpasswd.rb&quot;</span>
</span><span class='line'>      <span class="no">Htpasswd.new(&quot;/etc/h2o/.htpasswd&quot;, &quot;realm-name&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、 <code>.htpasswd</code> で plain フォーマットはサポートされていません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">failed to validate password using file:/etc/h2o/.htpasswd:crypt-style password hash is not supported</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.htpasswd</code> を手動で作成したい場合は以下の方法でできます<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;digest/sha1&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;base64&quot;</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;/etc/h2o/.htpasswd&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;user:{SHA}</span><span class="si">#{</span><span class="no">Base64</span><span class="o">.</span><span class="n">encode64</span><span class="p">(</span><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">digest</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">))</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Configure > Using Basic Authentication, DeNA Co., Ltd. et al., https://h2o.examp1e.net/configure/basic_auth.html, 2017/02/20 閲覧<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Password Formats, The Apache Software Foundation., https://httpd.apache.org/docs/2.4/misc/password_encryptions.html, 2017/02/20 閲覧<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogのテーマかえた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/02/12/octopress-themes/"/>
    <updated>2017-02-12T20:16:01+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/02/12/octopress-themes</id>
    <content type="html"><![CDATA[<p>表題のとおり、Blog(octopress) のテーマをdefaultの classics から <a href="https://github.com/tommy351/Octopress-Theme-Slash">slash</a> に変更した。
変更の方法は以下のようになります<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/octopress
</span><span class='line'><span class="nv">$ </span>git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake install<span class="se">\[</span><span class="s1">&#39;slash&#39;</span><span class="se">\]</span>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake generate
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake preview
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>ついでにfaviconもかえよう。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Octopressのテーマを変更してみよう!, facestarbaby, http://qiita.com/fakestarbaby/items/ab532088453105e1bea4, 2017/02/12 閲覧<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年買ってよかったもの]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/01/01/good-buy-of-2016/"/>
    <updated>2017-01-01T09:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/01/01/good-buy-of-2016</id>
    <content type="html"><![CDATA[<p>おおきな買いものなかったなぁとおもったが、わりとあったので書きとめておく</p>

<h2><a href="https://www.acer.com/ac/ja/JP/content/model/MR.JFZ11.00G">Acer H6510BD フルHD プロジェクター</a> と <a href="http://jp.yamaha.com/products/audio-visual/hometheater-systems/digital-sound-projector/ysp-1600__j/">YAMAHA YSP-1600</a></h2>

<p>このふたつはもともとホームシアターが欲しいなぁということで買いました。
プロジェクターは、4Kはまだまだ高いので音がうるさいの気にしないでもいいので FullHD のやつが欲くて購入。スピーカーもBTが利用できればいいなっておもってたのでこいつにしてたら、HDMIのパススルーができると聞いたので購入これも比較的安価だったので購入。
両方とも割と安く手に入るところが魅力でしたので購入、現在は主にAmazon Prime Videoの鑑賞に利用しています。</p>

<h2><a href="http://www.sony.jp/cyber-shot/products/DSC-RX100M3/">Sony Cyber-shot DCS-RX100M3</a></h2>

<p>携帯をiPhoneからNexusに変更してからずっとカメラに不満だったので購入。これはカメラとの連携アプリがわかりやすいので大変よい買いものでした。</p>

<h2><a href="http://www.philips.co.jp/c-p/HR2365_01/premium-collection-pasta-maker">Philips Noodle Maker</a></h2>

<p>こいつは買ったのではなく、頂きものですが、ずっとwish listに入ってたのでここに。
まだ1回しか使ってないけど、わいわい製麺できてたのしいので1台あると便利です。</p>

<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[みくったーでえもじ]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/12/17/emoji-in-mikutter/"/>
    <updated>2016-12-17T00:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/12/17/emoji-in-mikutter</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/1375">mikutter advent calenedar 2016</a> 17日目の記事です
たぶんだれかが作ってた気がするけど、mikuterで<a href="https://slack.com">slack</a>や、<a href="https://github.com">github</a>のような絵文字を表示するプラグインを作成しました。</p>

<h2>なんぞそれ？</h2>

<p>ここにあります。<a href="https://github.com/katsyoshi/mikutter-emoji">mikutter-emoji</a>
<code>:tofu_on_fire:</code> みたいに <code>:</code> で囲われた文字列を絵文字に置換するだけです。</p>

<h2>つかいかた</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/katsyoshi/mikutter-emoji.git ~/.mikutter/plugin/emoji
</span><span class='line'>EDIT ~/.mikutter/plugin/emoji/emoji.yml
</span></code></pre></td></tr></table></div></figure>


<p>gitでプラグインディレクトリにコピーします。
コピーしたら、絵文字の設定を <code>emoji.yml</code> に入れます。
今は5つしか登録していないので皆で登録しましょう</p>

<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[板前さんでGentooを管理]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/12/10/itamae-loves-gentoo/"/>
    <updated>2016-12-10T16:00:38+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/12/10/itamae-loves-gentoo</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/1493">Gentoo Advent Calendar 2016</a> の10日目の記事です</p>

<h2>Itamaeでgentoo管理するには？</h2>

<p>そらはー(<a href="https://twitter.com/sora_h">@sora_h</a>)が作ってる <a href="https://github.com/sorah/itamae-plugin-resource-portage">itamae-plugin-resource-portage</a> 使え</p>

<h2>自作のportage管理ソフトの紹介</h2>

<p><a href="https://github.com/katsyoshi/itamae-recipes/tree/master/cookbook/gentoo">ここ</a>にあります。</p>

<h3>使いかた</h3>

<p>簡単な使いかたとしては以下のようになります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>itamae local gentoo.rb -j package.json</span></code></pre></td></tr></table></div></figure>


<p>これだけです。</p>

<h3>パッケージの指定方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;category/package&#39;</span>
</span><span class='line'>   <span class="l-Scalar-Plain">portage</span><span class="p-Indicator">:</span>
</span><span class='line'>     <span class="l-Scalar-Plain">use</span><span class="p-Indicator">:</span> <span class="s">&#39;package&#39;</span>
</span><span class='line'>     <span class="l-Scalar-Plain">accept_keywords</span><span class="p-Indicator">:</span> <span class="s">&#39;package&#39;</span>
</span><span class='line'>     <span class="l-Scalar-Plain">license</span><span class="p-Indicator">:</span> <span class="s">&#39;pakcage&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>name</code> で <code>category/package</code> を指定することでインストールすることができます。
<code>portage</code> では <code>use</code> などのフラグを指定して管理します。
<code>use</code> ディレクトリを作成してそこにファイルを置く必要があります。
自動生成したいけど、依存パッケージの指定方法とかまだ考えていないので取り敢えず直接指定です。</p>

<h2>おわり</h2>

<p>この方法ではitamaeのパッケージ管理方法とちがうのでいろいろとあれだなあ
とおもってたら itamae-plugin-resource-portage みつけてしまったので
itamaeで管理したいとおもう人は itamae-plugin-resource-portage を使いましょう</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[d250g2 advent calendar 2016 5日目]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/12/05/d250g2/"/>
    <updated>2016-12-05T00:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/12/05/d250g2</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/1377">d250g2 Advent Calendar</a> 5日目の記事です</p>

<h2>d250g2 について</h2>

<p style="text-align:center;"> <img src="https://d250g2.com/d250g2.jpg" alt="" /></p>

<h2>d250g2 とは？</h2>

<p>しらん</p>

<h2>KernelVM Camp #4 に行ってきた</h2>

<p>成果物です</p>

<p style="text-align:center;"> <img src="https://d250g2.com/d250g2.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock'n' Roll Star]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/12/01/im-rockn-roll-star/"/>
    <updated>2016-12-01T00:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/12/01/im-rockn-roll-star</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/1537">ロックバンド Advent Calendar</a> 1日目です。
Oasisについて適当に書きます。</p>

<h2>たいとるについて</h2>

<p>はいそうですねみんな大好き Oasis の <a href="https://www.amazon.co.jp/%E3%82%AA%E3%82%A2%E3%82%B7%E3%82%B9-20%E5%91%A8%E5%B9%B4%E8%A8%98%E5%BF%B5%E3%83%87%E3%83%A9%E3%83%83%E3%82%AF%E3%82%B9%E3%83%BB%E3%82%A8%E3%83%87%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3-OASIS/dp/B00K2ZK2Y2/ref=ntt_mus_dp_dpt_18">Definitely Maybe</a> の最初にはいってる<a href="https://www.amazon.co.jp/dp/B00K2ZK3UA/ref=dm_ws_tlw_trk1">曲</a>ですね。
Firstはこの曲よりも <a href="https://www.amazon.co.jp/dp/B00K2ZK5OE/ref=dm_ws_tlw_trk3">Live Forever</a> のほうがすきですが。
ロックバンド Advent Calendar 2016 ということでこのタイトルにしました<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<h2>Oasisについて</h2>

<p>最も好きなロックバンドの一つだった(解散中)ので書いてみることにします。</p>

<p>出会いは高校生だったころ MTV<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> みてたら <a href="https://www.amazon.co.jp/dp/B00FS7WKDK/ref=dm_ws_tlw_trk2">Go Let It Out!</a> が Power Push されてたのではじめて <a href="https://www.amazon.co.jp/%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%BB%E3%82%AA%E3%83%B3%E3%83%BB%E3%82%B6%E3%83%BB%E3%82%B7%E3%83%A7%E3%83%AB%E3%83%80%E3%83%BC%E3%83%BB%E3%82%AA%E3%83%96%E3%83%BB%E3%82%B8%E3%83%A3%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%84-OASIS/dp/B00FS7WIKA/ref=pd_sim_sbs_340_1?_encoding=UTF8&amp;psc=1&amp;refRID=CC18CK2V5MCE6YZFAB7H">Standing On Shoulder Of Gaints</a> を買いそこから。このころの曲はあまり好きでないのが多いですね。
このころも解散でもめてた気がします。そのあと大学でボッチ&amp;&amp;ひきこもりだったのでずっとOasisばっかり聞いてました。
そのときに買ったのが <a href="https://www.amazon.co.jp/%E3%82%B6%E3%83%BB%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%83%B3-OASIS/dp/B00FS80BTO/ref=pd_sim_340_5?_encoding=UTF8&amp;psc=1&amp;refRID=3BME19Z3FRFP8SCGMPZ4">Master Plan</a>、 <a href="https://www.amazon.co.jp/%E3%83%92%E3%83%BC%E3%82%B6%E3%83%B3%E3%83%BB%E3%82%B1%E3%83%9F%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC-OASIS/dp/B00FXV4YTE/ref=pd_sim_340_5?_encoding=UTF8&amp;psc=1&amp;refRID=0HW35K2Y4M3XGJRH28ZY">Heathen Chemistry</a>、 <a href="https://www.amazon.co.jp/%E3%83%93%E3%82%A3%E3%83%BB%E3%83%92%E3%82%A2%E3%83%BB%E3%83%8A%E3%82%A6-OASIS/dp/B00FUYQG72/ref=pd_sim_340_3?_encoding=UTF8&amp;psc=1&amp;refRID=3BME19Z3FRFP8SCGMPZ4">Be Here Now</a> の3枚で Master Plan はベストアルバム(B面)ってのがすごく好き。</p>

<p>ライブは2度ほど見ました。2005年に2回みてます。<a href="http://www.summersonic.com/05/">Summer Sonic 2005</a> と <a href="http://www.setlist.fm/setlist/oasis/2005/yoyogi-daiichi-taiikukan-tokyo-japan-1bd79964.html">日本ツアー</a> を行ってました。日本ツアーのほうでは、Master Planの曲をやってくれたので本当に満足しました。</p>

<p>そのあとも<a href="https://www.amazon.co.jp/The-Longcut/e/B001LHT232/digital/ref=ntt_mp3_rdr?_encoding=UTF8&amp;sn=d">The Longcut</a>、<a href="https://www.amazon.co.jp/The-Music/e/B000APTYQQ/digital/ref=ntt_mp3_rdr?_encoding=UTF8&amp;sn=d">The Music</a><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、<a href="https://www.amazon.co.jp/Bloc-Party/e/B000APY4UC/digital/ref=ntt_mp3_rdr?_encoding=UTF8&amp;sn=d">Bloc Party</a>、<a href="https://www.amazon.co.jp/The-Strokes/e/B000APQBEY/digital/ref=ntt_mp3_rdr?_encoding=UTF8&amp;sn=d">The Strokes</a>、<a href="https://www.amazon.co.jp/ASIAN-KUNG-FU-GENERATION/e/B00197HZ7O/digital/ref=ntt_mp3_rdr?_encoding=UTF8&amp;sn=d">ASIAN KUNG-FU GENERATION</a>、<a href="https://www.amazon.co.jp/Coldplay/e/B000APPUFK/digital/ref=ntt_mp3_rdr?_encoding=UTF8&amp;sn=d">Coldplay</a>とかに浮気しながらもきちんと御布施としてCDは買ってました。最近のリマスターはさすがに買ってないですが…</p>

<h2>解散について</h2>

<p><a href="http://mhnews2504.blog109.fc2.com/blog-entry-1930.html">伝統芸的なこと</a> もあるのでハイハイとしか好きなひとは思ってなかったとおもいます。</p>

<p>で2009年いつも通りまゆげ兄弟(ノエル・ギャラガーとリアム・ギャラガー)の兄弟喧嘩だとおもっていたら本気でまゆげ兄(ノエル)がブチギレて解散したのでそっかーてちょっとショック(ほんとにちょっと)だった<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>ほんとは<a href="https://ja.wikipedia.org/wiki/%E3%83%8E%E3%82%A8%E3%83%AB%E3%83%BB%E3%82%AE%E3%83%A3%E3%83%A9%E3%82%AC%E3%83%BC#.E7.99.BA.E8.A8.80">ノエルの発言</a>を付けたかったけどさすがにね…<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>だったけなこのころVibeって名前だった気も<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>そんなことより The Music の<a href="https://www.google.com/trends/explore?geo=JP&amp;q=%2Fm%2F0130zt,%2Fm%2F03d_2z,%2Fm%2F03zgq4,%2Fm%2F0kr_t,%2Fm%2F04zbp3">google trends</a>で熊本が肥ゆいけどなんで？<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>このころtwitterでやりとりしてた人とかともオフで解散したねーとか言ってた<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YARAKASHI CUDA編]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/11/29/introduced-cuda/"/>
    <updated>2016-11-29T00:48:15+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/11/29/introduced-cuda</id>
    <content type="html"><![CDATA[<p><a href="http://blog.katsyoshi.org/blog/2016/11/28/hello/">昨日</a>かいた奴でGTX 1050があるのでCUDAを導入してみた。</p>

<h2>CUDA導入</h2>

<p>これは簡単で <a href="https://developer.nvidia.com/cuda-downloads">ここ</a> から必要なパッケージをダウンロードしてきます。
今回は Linux x86_64 Ubuntu 14.04 runfile(local) を順に選択。
インストールはここでダウンロードしたrunfileを実行して、指示に従うだけです。
これが終ったら、SampleProjectもインストールされてるとおもうのでこのプロジェクトをコンパイルします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 555 ./cuda_8.0.44_linux.run
</span><span class='line'>$ ./cuda_8.0.44_linux.run
</span><span class='line'>:
</span><span class='line'>:
</span><span class='line'>$ cd NVIDIA_CUDA-8.0_Samples
</span><span class='line'>$ make</span></code></pre></td></tr></table></div></figure>


<p>でコンパイルが終了したらサンプルプログラムを実行します。とりあえず <code>deviceQuery</code> を実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd bin/x86_64/linux/release
</span><span class='line'>$ ./deviceQuery
</span><span class='line'>./deviceQuery Starting...
</span><span class='line'>
</span><span class='line'> CUDA Device Query (Runtime API) version (CUDART static linking)
</span><span class='line'>
</span><span class='line'>cudaGetDeviceCount returned 38
</span><span class='line'>-&gt; no CUDA-capable device is detected
</span><span class='line'>Result = FAIL</span></code></pre></td></tr></table></div></figure>


<p>と出ます。どうみてもエラーですね</p>

<p>で、以下のようにrootで実行すると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo ./deviceQuery
</span><span class='line'>./deviceQuery Starting...
</span><span class='line'>
</span><span class='line'> CUDA Device Query (Runtime API) version (CUDART static linking)
</span><span class='line'>
</span><span class='line'>Detected 1 CUDA Capable device(s)
</span><span class='line'>
</span><span class='line'>Device 0: "GeForce GTX 1050"
</span><span class='line'>  CUDA Driver Version / Runtime Version          8.0 / 8.0
</span><span class='line'>  CUDA Capability Major/Minor version number:    6.1
</span><span class='line'>  Total amount of global memory:                 1965 MBytes (2060255232 bytes)
</span><span class='line'>  ( 5) Multiprocessors, (128) CUDA Cores/MP:     640 CUDA Cores
</span><span class='line'>  GPU Max Clock rate:                            1455 MHz (1.46 GHz)
</span><span class='line'>  Memory Clock rate:                             3504 Mhz
</span><span class='line'>  Memory Bus Width:                              128-bit
</span><span class='line'>  L2 Cache Size:                                 1048576 bytes
</span><span class='line'>  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)
</span><span class='line'>  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers
</span><span class='line'>  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers
</span><span class='line'>  Total amount of constant memory:               65536 bytes
</span><span class='line'>  Total amount of shared memory per block:       49152 bytes
</span><span class='line'>  Total number of registers available per block: 65536
</span><span class='line'>  Warp size:                                     32
</span><span class='line'>  Maximum number of threads per multiprocessor:  2048
</span><span class='line'>  Maximum number of threads per block:           1024
</span><span class='line'>  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
</span><span class='line'>  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
</span><span class='line'>  Maximum memory pitch:                          2147483647 bytes
</span><span class='line'>  Texture alignment:                             512 bytes
</span><span class='line'>  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)
</span><span class='line'>  Run time limit on kernels:                     Yes
</span><span class='line'>  Integrated GPU sharing Host Memory:            No
</span><span class='line'>  Support host page-locked memory mapping:       Yes
</span><span class='line'>  Alignment requirement for Surfaces:            Yes
</span><span class='line'>  Device has ECC support:                        Disabled
</span><span class='line'>  Device supports Unified Addressing (UVA):      Yes
</span><span class='line'>  Device PCI Domain ID / Bus ID / location ID:   0 / 129 / 0
</span><span class='line'>  Compute Mode:
</span><span class='line'>     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;
</span><span class='line'>
</span><span class='line'>deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = GeForce GTX 1050
</span><span class='line'>Result = PASS</span></code></pre></td></tr></table></div></figure>


<p>と出てきますので、パーミッションがなかったようです。
あとは簡単、CUDA使いたいユーザーにパーミッションつけたらおわりです。</p>

<h2>おわり</h2>

<p>こんなのに3時間ほど時間を費しましたね。はい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[あったらしーPCかったよー]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/11/28/hello/"/>
    <updated>2016-11-28T01:14:21+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/11/28/hello</id>
    <content type="html"><![CDATA[<h2>あたらしいPC買いました</h2>

<p>先月のおわりに注文し今月頭のOSCあたりに新しいPCを組み立てました。
先月おわりあたりまではDDR4の32GBメモリーが2万円と安く売っていたので勢いで購入。
構成は以下のようになっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CPU: XeonE5-2620V4 * 2
</span><span class='line'>MB: X10PE-D16WS
</span><span class='line'>DISK: INTEL 600 シリーズ 512GB
</span><span class='line'>MEM: Crucial [Micron製] DDR4 サーバー用メモリー 32GB ECC Registered * 4
</span><span class='line'>NIC: X540-T2
</span><span class='line'>GPU: Zotac GeForce GTX 1050</span></code></pre></td></tr></table></div></figure>


<p>というかんじになっています。
今回はメモリー4枚しか買っていないので安くなったらあと12枚買いたいとおもってます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[went to 8 jou island]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/11/09/went-to-8-jou-island/"/>
    <updated>2016-11-09T20:13:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/11/09/went-to-8-jou-island</id>
    <content type="html"><![CDATA[<p>11/3-11/5 で八丈島にいってきました。
決めたのは10/28の朝でした。</p>

<h2>出発</h2>

<p>は竹橋桟橋から船が出ているのでそこからのっていきます。
船は11/2 22:30(JST)からでていますのでそれでいきました。</p>

<h2>到着</h2>

<p>は11/3 の朝8時ころに底土港に到着します。</p>

<h2>島一周</h2>

<p>朝到着し、やることないので宿に荷物を置いて自轉車を借ります。
この自轉車がブレーキ効かないのであきらめてスクーターを借りました。
滞在時間ずっと使えるように二日借りることにしました。</p>

<p>スクーターかりたあとは島観光として一周まわることにしました。
途中いくつか良いポイントがあったので写真をとったりしましたが、
だいたい2時間ぐらいで島一周できました。</p>

<p>一周してひまだったので、昼飯を宿のちかくで</p>

<h2>釣り 1日目</h2>

<p>やることないなどうしようかなとおもってたら、宿の部屋に入れるようになったので、PCの充電と携帯の充電を
そんなこんなしてたら、時間が16時ごろになったので釣りへ。
この日は釣る気があまりなかったので坊主で終了。
飯は島の適当なラーメン屋で。</p>

<h2>釣り 2日目</h2>

<p>この日は起きてすぐに温泉に行ってみたら、温泉施設自体がどこ行ってもだめで一番遠いとこは、朝10時からでした。
ので温泉は諦めて釣りへ行ってみた。</p>

<p>釣りはじめて30分ぐらいで釣れたし、一人で刺身にして食べるには十分な大きさだしで、あとは昼ごろまで適当に釣ってました。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/hachijo-ipara.jpg" alt="アイッパラ" /></p>

<h2>温泉</h2>

<p>釣りおわったあとは温泉でまったり2時間ほど時間をつぶしてあとは夕日を見にいきました。</p>

<p style="text-align:center;"> <img src="http://blog.katsyoshi.org/images/photo/hachijo-sunset.jpg" alt="サンセット" /></p>

<h2>おわり</h2>

<p>たのしい一人旅でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh permission]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/10/10/fxxking-ssh-permission/"/>
    <updated>2016-10-10T20:14:30+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/10/10/fxxking-ssh-permission</id>
    <content type="html"><![CDATA[<p>またやらかしたので</p>

<h2>経緯</h2>

<p>サーバーにSSHログインが急にできなくなった</p>

<h2>対処</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 744 ~/.ssh</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ItamaeつかってOSのインストールをやってみた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae/"/>
    <updated>2016-10-09T16:43:27+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae</id>
    <content type="html"><![CDATA[<p>9月はRubyKiagiにいってたりしました。
そのときに<a href="http://mikutter.blogspot.jp/2016/09/mikutter-3312-343.html">mikutterのコミッター</a>とかになったようです。</p>

<p>シルバーウィークにThinkPadのOS再インストールをしたのでその記録を</p>

<h2>なにやったの？</h2>

<p><a href="https://twitter.com/mtsmfm">@mtsmfm</a> と以前話していたとき、&ldquo;ansibleつかってOSインストールしてるんだけど、完全自動化できないんですよね~&rdquo; みたいな事を聞いたので<a href="https://github.com/itamae-kitchen/itamae">Itamae</a> をつかってやってみました。
結論から言うと完全自動化は無理だけど、ある程度は自動化できた。</p>

<h3>環境</h3>

<ul>
<li>machine: ThinkPad X250</li>
<li>OS: Gentoo Linux</li>
<li>Provisioning tool: Itamae</li>
<li>repo: <a href="https://github.com/katsyoshi/itamae-recipes">https://github.com/katsyoshi/itamae-recipes</a></li>
</ul>


<h2>インストール</h2>

<p>インストールディスクを起動するところはipmiとか搭載していない(しらべていない)し<a href="https://wiki.openstack.org/wiki/Ironic">Ironic</a>はつかいたくないので手動で起動し、
sshdの起動とrootのパスワードを設定します。起動したら以下の手順でパーティション作成からカーネルのインストールまでします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git clone https://github.com/katsyoshi/itamae-recipes.git</span>
</span><span class='line'><span class="go">cd itamae-recipes</span>
</span><span class='line'><span class="go">bundle install</span>
</span><span class='line'><span class="go">wget http://ftp.iij.ad.jp/pub/linux/gentoo/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20161006.tar.bz2</span>
</span><span class='line'><span class="go">cp stage3-amd64-20161006.tar.bz2 cookbook/install/stage3.tar.bz2</span>
</span><span class='line'><span class="go">itamae ssh -h nu-machine cookbook/install/gentoo.rb -u root -j cookbook/install/gentoo.json</span>
</span></code></pre></td></tr></table></div></figure>


<p>でOSのインストールまでできるのですが、gentooのインストールメディアだと、diffがインストールされていないのでitamaeからfileのコピーができません。
都度コピーしてください(というよりgentooインストーラーにdiffを入れたほうが早そう)</p>

<h2>パッケージのインストール</h2>

<p>ここまで終ったら、パッケージのインストールします。これも以下コマンドを実行することで終ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">itamae ssh -h nu-machine cookbook/gentoo/emerge.rb -j cookbook/gentoo/package.json</span>
</span></code></pre></td></tr></table></div></figure>


<h2>owari</h2>

<p>ItamaeつかってOSのインストールを実行してみました。diffが失いところがとくにつらいですね。
おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello mikutter]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/08/31/hello-mikutter/"/>
    <updated>2016-08-31T22:55:03+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/08/31/hello-mikutter</id>
    <content type="html"><![CDATA[<p>表題のとおりmikutterをgemでインストールできるようにしてみました。</p>

<h2>どうやって？</h2>

<p><a href="https://rubygems.org">rubygems</a> からはまだインストールはできません。
ので、以下の様にしてgem packageを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git clone github.com/katsyoshi/mikutter.git
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>mikutter
</span><span class='line'><span class="gp">$</span> git checkout reokure-ru
</span><span class='line'><span class="gp">$</span> bundle install
</span><span class='line'><span class="gp">$</span> bundle <span class="nb">exec </span>rake build
</span><span class='line'><span class="gp">$</span> gem install pkg/mikutter-3.5.0.pre.dev.gem
</span><span class='line'><span class="gp">$</span> mikutter
</span></code></pre></td></tr></table></div></figure>


<p>これでmikutterコマンドで起動できるようになっています
これすらめんどうな人は<a href="https://katsyoshi.org/mikutter-3.5.0.pre.dev.gem">ここ</a>にあります。
ダウンロードして <code>gem install mikutter-3.5.0.pre.dev.gem</code> でインストールできます。
プラグインで起動できないとかあるなら必要なgemをインストールしてください。</p>
]]></content>
  </entry>
  
</feed>
