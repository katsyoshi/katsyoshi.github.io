<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Itamae | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/itamae/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2016-12-10T17:06:51+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[板前さんでGentooを管理]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/12/10/itamae-loves-gentoo/"/>
    <updated>2016-12-10T16:00:38+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/12/10/itamae-loves-gentoo</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/1493">Gentoo Advent Calendar 2016</a> の10日目の記事です</p>

<h2>Itamaeでgentoo管理するには？</h2>

<p>そらはー(<a href="https://twitter.com/sora_h">@sora_h</a>)が作ってる <a href="https://github.com/sorah/itamae-plugin-resource-portage">itamae-plugin-resource-portage</a> 使え</p>

<h2>自作のportage管理ソフトの紹介</h2>

<p><a href="https://github.com/katsyoshi/itamae-recipes/tree/master/cookbook/gentoo">ここ</a>にあります。</p>

<h3>使いかた</h3>

<p>簡単な使いかたとしては以下のようになります</p>

<p><code>
itamae local gentoo.rb -j package.json
</code></p>

<p>これだけです。</p>

<h3>パッケージの指定方法</h3>

<p>```yaml
packages:
 &ndash; name: &lsquo;category/package&rsquo;
   portage:</p>

<pre><code> use: 'package'
 accept_keywords: 'package'
 license: 'pakcage'
</code></pre>

<p>```</p>

<p><code>name</code> で <code>category/package</code> を指定することでインストールすることができます。
<code>portage</code> では <code>use</code> などのフラグを指定して管理します。
<code>use</code> ディレクトリを作成してそこにファイルを置く必要があります。
自動生成したいけど、依存パッケージの指定方法とかまだ考えていないので取り敢えず直接指定です。</p>

<h2>おわり</h2>

<p>この方法ではitamaeのパッケージ管理方法とちがうのでいろいろとあれだなあ
とおもってたら itamae-plugin-resource-portage みつけてしまったので
itamaeで管理したいとおもう人は itamae-plugin-resource-portage を使いましょう</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ItamaeつかってOSのインストールをやってみた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae/"/>
    <updated>2016-10-09T16:43:27+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae</id>
    <content type="html"><![CDATA[<p>9月はRubyKiagiにいってたりしました。
そのときに<a href="http://mikutter.blogspot.jp/2016/09/mikutter-3312-343.html">mikutterのコミッター</a>とかになったようです。</p>

<p>シルバーウィークにThinkPadのOS再インストールをしたのでその記録を</p>

<h2>なにやったの？</h2>

<p><a href="https://twitter.com/mtsmfm">@mtsmfm</a> と以前話していたとき、&ldquo;ansibleつかってOSインストールしてるんだけど、完全自動化できないんですよね~&rdquo; みたいな事を聞いたので<a href="https://github.com/itamae-kitchen/itamae">Itamae</a> をつかってやってみました。
結論から言うと完全自動化は無理だけど、ある程度は自動化できた。</p>

<h3>環境</h3>

<ul>
<li>machine: ThinkPad X250</li>
<li>OS: Gentoo Linux</li>
<li>Provisioning tool: Itamae</li>
<li>repo: <a href="https://github.com/katsyoshi/itamae-recipes">https://github.com/katsyoshi/itamae-recipes</a></li>
</ul>


<h2>インストール</h2>

<p>インストールディスクを起動するところはipmiとか搭載していない(しらべていない)し<a href="https://wiki.openstack.org/wiki/Ironic">Ironic</a>はつかいたくないので手動で起動し、
sshdの起動とrootのパスワードを設定します。起動したら以下の手順でパーティション作成からカーネルのインストールまでします。</p>

<p><code>console
git clone https://github.com/katsyoshi/itamae-recipes.git
cd itamae-recipes
bundle install
wget http://ftp.iij.ad.jp/pub/linux/gentoo/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20161006.tar.bz2
cp stage3-amd64-20161006.tar.bz2 cookbook/install/stage3.tar.bz2
itamae ssh -h nu-machine cookbook/install/gentoo.rb -u root -j cookbook/install/gentoo.json
</code></p>

<p>でOSのインストールまでできるのですが、gentooのインストールメディアだと、diffがインストールされていないのでitamaeからfileのコピーができません。
都度コピーしてください(というよりgentooインストーラーにdiffを入れたほうが早そう)</p>

<h2>パッケージのインストール</h2>

<p>ここまで終ったら、パッケージのインストールします。これも以下コマンドを実行することで終ります。</p>

<p><code>console
itamae ssh -h nu-machine cookbook/gentoo/emerge.rb -j cookbook/gentoo/package.json
</code></p>

<h2>owari</h2>

<p>ItamaeつかってOSのインストールを実行してみました。diffが失いところがとくにつらいですね。
おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[こんにちは、いたまえさん]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/08/02/hello-itamae-plugins/"/>
    <updated>2015-08-02T21:33:46+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/08/02/hello-itamae-plugins</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sstephenson/rbenv">rbenv</a> を <a href="https://github.com/itamae-kitchen/itamae">itamae</a> の <a href="https://github.com/k0kubun/itamae-plugin-recipe-rbenv">プラグイン</a> を利用してインストールしようとしたら、対象サーバがプロキシーのあるネットワークであり、gitでダウンロードできなかったので、<a href="https://github.com/k0kubun/itamae-plugin-recipe-rbenv/pull/9">httpsを指定できる</a>ようしてもらいました。</p>

<h2>plenv と pyenv</h2>

<p>また、rbenv のプラグインを参考に <a href="https://github.com/katsyoshi/itamae-plugin-recipe-plenv">plenv</a> と <a href="https://github.com/katsyoshi/itamae-plugin-recipe-pyenv">pyenv</a> を作ってみました。</p>

<p>これらふたつのプラグインはまだgemになっていないので、<code>Gemfile</code> に以下のように追加し、</p>

<p><code>ruby
gem 'itamae'
gem 'itamae-plugin-recipe-plenv', github: 'katsyoshi/itamae-plugin-recipe-plenv'
gem 'itamae-plugin-recipe-pyenv', github: 'katsyoshi/itamae-plugin-recipe-pyenv'
</code></p>

<p>recipeとしては以下のようにしてください。</p>

<p><code>ruby recipe.rb
include_recipe 'pyenv::system'
include_recipe 'plenv::system'
</code></p>

<p>設定例としては、rbenvのプラグインと同じように設定します。</p>

<p>```json
{
  &ldquo;plenv&rdquo; : {</p>

<pre><code>"versions" : ["5.22.0", "5.20.2"],
"global"   : "5.22.0"
</code></pre>

<p>  },
  &ldquo;pyenv&rdquo; : {</p>

<pre><code>"versions" : ["3.4.3", "3.5.0b2"],
"global"   : "3.4.3"
</code></pre>

<p>  }
}
```</p>

<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
</feed>
