<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-10-19T00:48:06+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[くーも]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/11/cumo/"/>
    <updated>2018-09-11T00:13:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/11/cumo</id>
    <content type="html"><![CDATA[<p>Rubyで <a href="https://developer.nvidia.com/cuda-downloads"><code>cuda</code></a> を利用して GPGPU 使いたいの
で <a href="https://github.com/sonots/cumo"><code>cumo</code></a> を導入してみた。</p>

<h2>install</h2>

<p>はじめに <code>cuda</code> をインストールしておきます。
<code>gem</code> に登録されているので、雑に <code>gem install</code> 実施してみます。</p>

<p><code>
export CUDA_PATH="/opt/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
gem install cumo
</code></p>

<p>とすると以下のようなエラーが出てだめです。</p>

<p>```
gcc -I. -Iinclude -Inarray -Icuda -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/x86_64-linux -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/ruby/backward -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0 -I. -I/home/katsyoshi/.rbenv/versions/2.5.1/lib/ruby/gems/2.5.0/gems/numo-narray-0.9.1.3/ext/numo/narray -DHAVE_NUMO_NARRAY_H -DHAVE_DLFCN_H -DHAVE_DLOPEN -DHAVE_STDBOOL_H -DHAVE_STDINT_H -DHAVE_TYPE_BOOL -DHAVE_TYPE_U_INT8_T -DHAVE_TYPE_U_INT16_T -DHAVE_TYPE_INT32_T -DHAVE_TYPE_U_INT32_T -DHAVE_TYPE_INT64_T -DHAVE_TYPE_U_INT64_T -DHAVE_EXP10 -DHAVE_RB_CCOMPLEX -DHAVE_RB_THREAD_CALL_WITHOUT_GVL -I/opt/cuda/include -I/home/katsyoshi/.rbenv/versions/2.5.1/include -fPIC -O3 -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Wimplicit-int -Wpointer-arith -Wwrite-strings -Wdeclaration-after-statement -Wimplicit-function-declaration -Wdeprecated-declarations -Wmisleading-indentation -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -Wduplicated-cond -Wno-maybe-uninitialized -o narray/types/bit.o -c narray/types/bit.c
narray/gen/tmpl/lib.c:22:7: エラー: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘<strong>attribute</strong>’ before ‘/’ token
 #define m_map(x) m_num_to_data(rb_yield(m_data_to_num(x)))</p>

<pre><code>   ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: エラー: 終端する > 文字がありません</p>

<pre><code>                         ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: 致命的エラー: static ID id_cast;: そのようなファイルやディレクトリはありません
コンパイルを停止しました。
make: *** [Makefile:453: narray/types/bit.o] エラー 1
```</p>

<p>公式リポジトリ覗いてもとくに問題なさそうなので <code>gem</code> からのインストールは一旦おいてソースからインストールします。</p>

<h3>build</h3>

<p>公式リポジトリからダウンロードしてコンパイルをはじめます。</p>

<p><code>
git clone https://github.com/sonotz/cumo.git
cd cumo
export CUDA_PATH="/usr/local/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
bundle install
rake compile
rake install
</code></p>

<p>ってインストールできますが、その前に僕の環境が <code>gcc-8.2.0</code> だったりして、これを <code>gcc-6.4.0</code> に戻したりしてインストールしました。</p>

<h2>run</h2>

<p>これでインストール終わりましたので、 <code>irb</code> で確認してみようと思います。</p>

<p><code>
irb(main):001:0&gt; require 'cumo/narray'
=&gt; true
irb(main):002:0&gt; Cumo::Int32.new(3, 3).fill(0)
=&gt; Cumo::Int32#shape=[3,3]
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
</code></p>

<p>とこれで実行されたことを確認できます。</p>

<p>と簡単に書きましたが、インストール後にGPUへのアクセス権が無いユーザーで実行したためエラーが出ます(エビデンス取得忘れ)。
手元のPCではGPUにアクセス権がvideo groupにもあるので利用ユーザーをvideo groupへ追加して再起動することでようやく動作確認ができます。</p>

<h2>おわり</h2>

<p>簡単にGPGPUを利用したプログラムが書けるようになりましたのでおわりです。
技術書典5はこれを使ったはなしを出展しますのできてみてくださいな。</p>

<p>え37でまってます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2018]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018/"/>
    <updated>2018-06-03T23:44:28+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018</id>
    <content type="html"><![CDATA[<p>RubyKaigi2018 に行ってきた</p>

<h2>1日目</h2>

<p>1日目は、 ずっと会場Aにいました。</p>

<ol>
<li>Matz: <a href="http://rubykaigi.org/2018/presentations/yukihiro_matz.html#may31">Keynote</a></li>
<li>Aaron Patterson: <a href="http://rubykaigi.org/2018/presentations/tenderlove.html#may31">Analyzing and Reducing Ruby Memory Usage</a></li>
<li>Kenta Murata, and Yusaku Hatanaka: <a href="http://rubykaigi.org/2018/presentations/mrkn.html#may31">Deep Learning Programming on Ruby</a></li>
<li>Bozhidar Batsov: <a href="http://rubykaigi.org/2018/presentations/bbatsov.html#may31">All About RuboCop</a></li>
<li>Naotoshi Seo: <a href="http://rubykaigi.org/2018/presentations/sonots.html#may31">Fast Numerical Computing and Deep Learning in Ruby with Cumo</a></li>
<li>Emma Haruka Iwao: <a href="http://rubykaigi.org/2018/presentations/Yuryu.html#may31">Exploring Internal Ruby Through C Extensions</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/lt/">Lightning Talks</a></li>
</ol>


<p>この日、今年の RubyKaigi 2018 で最も楽しみにしてたのが <code>rubocop</code> の作者のトークで、彼のプロダクト(<code>rubocop</code>, <code>flycheck-ruby</code>)を利用してる身としては非常に楽しみでした。
DLと数値計算のやつは進捗が聞けてよかったっていうのとDeep Learningに関していうと難しいのかなあという感想が…
Haruka さんのやつは、やっぱり今の実装十分に速いってのがわかって、これ以上速くするには非常に大変だなってのがよかったですね。
LTはどれもよくて <code>rib</code> も面白いし、 csvの高速化の話が特に好きでした。</p>

<h2>2日目</h2>

<p>2日目もほとんどA会場できいていたのと、GitHubの電源スペースにいました。</p>

<ol>
<li>Kouhei Sutou: <a href="http://rubykaigi.org/2018/presentations/ktou.html#jun01">My way with Ruby</a></li>
<li>Kouichi Sasada: <a href="http://rubykaigi.org/2018/presentations/ko1.html#jun01">Guild Prototype</a></li>
<li>Yuichiro Kaneko: <a href="http://rubykaigi.org/2018/presentations/spikeolaf.html#jun01">RNode with code positions</a></li>
<li>Yusuke Endo: <a href="http://rubykaigi.org/2018/presentations/mametter.html#jun01">Type Profiler: An analysis to guess type signatures</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/rubylangorg.html#jun01">Ruby Commiters vs. the World</a></li>
</ol>


<p>この日のトークは特に楽しみにしていたのはなかったのですが、ここ最近毎年聞いていた <a href="http://rubykaigi.org/2018/presentations/v0dro.html#jun01">@v0dro</a> の発表を聞いていなかった。
金子さんの発表がわりとたのしく聞けて、「あーやっぱり型のはなしは興味ないな」って感じで遠藤さんの発表聞いてました。
この日の懇親会で飲みすぎた。</p>

<h2>3日目</h2>

<p>3日目はパフォーマンス改善を中心として聞いてました。</p>

<ol>
<li>Benoit Daloze: <a href="http://rubykaigi.org/2018/presentations/eregontp.html#jun02">Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby</a></li>
<li>Takashi Kokubun: <a href="http://rubykaigi.org/2018/presentations/k0kubun.html#jun02">The Method JIT Compiler for Ruby 2.6</a></li>
<li>Takeshi Watanabe: <a href="http://rubykaigi.org/2018/presentations/take-cheeze.html#jun02">LuaJIT as a Ruby backend.</a></li>
<li>Prasun Anand: <a href="http://rubykaigi.org/2018/presentations/prasun_anand.html#jun02">High Performance GPU computing with Ruby</a></li>
<li>Vladimir Makarov: <a href="http://rubykaigi.org/2018/presentations/vnmakarov.html#jun02">Three Ruby performance projects</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/tric.html#jun02">TRICK 2018 (FINAL)</a></li>
</ol>


<p>TuffleRubyとはやくてとてもよさそう。
国分さん、Vladimirの話はいつもどおりで安心した。</p>

<p>TRICK、どうしてこんなプログラムが思いつくのかさっぱりわからんがとにかく凄い以上の感想がうかんでこない。</p>

<h2>おわり</h2>

<p>RubyKaigi 2018に行ってきてたいへんたのしいイベントでした。</p>

<p>(型のはなしはやはり興味がないというかまだまだ理解が浅いのでTaPL読むべきだな)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRubyはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/12/18/hello/"/>
    <updated>2017-12-18T21:56:55+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/12/18/hello</id>
    <content type="html"><![CDATA[<p>表題のとおり、 <a href="https://github.com/SciRuby/iruby">IRuby</a> をはじめてみました</p>

<h3>インストール</h3>

<p>インストールは簡単で <code>gem install iruby</code> でいけますが、私の利用している環境では依存している <a href="https://github.com/zeromq/czmq">czmq</a> が古かったので手動でインストールして回避しています。</p>

<p><code>console
git clone https://github.com/zeromq/czmq.git
cd czmq
./autogen
./configure --prefix=${HOME}/.local
make -j4
make install
gem install iruby cztop
LD_LIBRARY_PATH=${HOME}/.local/lib iruby
</code></p>

<p>でインストールと動作はできます。画像貼るのがメンドイので <code>ipython</code> 貼っておきます。</p>

<p>```
{
 &ldquo;cells&rdquo;: [
  {
   &ldquo;cell_type&rdquo;: &ldquo;code&rdquo;,
   &ldquo;execution_count&rdquo;: 4,
   &ldquo;metadata&rdquo;: {},
   &ldquo;outputs&rdquo;: [</p>

<pre><code>{
 "data": {
  "text/html": [
   "\n",
   "  &lt;script&gt;\n",
   "  requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] }})\n",
   "  &lt;/script&gt;\n",
   "\n",
   "\n",
   "&lt;div id=\"c34db0db-dc37-4ae3-a2b3-33ab99830b89\" style=\"height: 100%; width: 100%;\"&gt;&lt;/div&gt;\n",
   "\n",
   "&lt;script&gt;\n",
   " require(['plotly'], function(Plotly) { \n",
   "Plotly.newPlot(\n",
   "  'c34db0db-dc37-4ae3-a2b3-33ab99830b89',\n",
   "  [{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"y\":[100,81,64,49,36,25,16,9,4,1,0,1,4,9,16,25,36,49,64,81,100],\"type\":null,\"mode\":\"\"}],\n",
   "  {\"width\":1000,\"height\":500},\n",
   "  {\"linkText\":\"Export to plot.ly\",\"showLink\":true}\n",
   ")\n",
   "\n",
   "window.addEventListener('resize', function() {\n",
   "  Plotly.Plots.resize(document.getElementById('c34db0db-dc37-4ae3-a2b3-33ab99830b89'))\n",
   "})\n",
   " }) \n",
   "&lt;/script&gt;"
  ],
  "text/plain": [
   "#&lt;Plotly::Offline::HTML:0x000056356f14be00 @id=\"c34db0db-dc37-4ae3-a2b3-33ab99830b89\", @data=[{:x=&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], :y=&gt;[100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100], :type=&gt;nil, :mode=&gt;\"\"}], @layout={:width=&gt;1000, :height=&gt;500}, @config={:linkText=&gt;\"Export to plot.ly\", :showLink=&gt;true}, @embedded=true&gt;"
  ]
 },
 "metadata": {},
 "output_type": "display_data"
},
{
 "data": {
  "text/plain": [
   "#&lt;CZTop::Socket::PUB:0x56356e7f3620 last_endpoint=\"tcp://127.0.0.1:45835\"&gt;"
  ]
 },
 "execution_count": 4,
 "metadata": {},
 "output_type": "execute_result"
}
</code></pre>

<p>   ],
   &ldquo;source&rdquo;: [</p>

<pre><code>"require 'daru'\n",
"require 'daru/plotly'\n",
"include Daru::Plotly::Methods\n",
"\n",
"dv = Daru::Vector.new((-10..10).map{|n| n ** 2 })\n",
"plot(dv, x: \"x\", y: \"y\").show"
</code></pre>

<p>   ]
  }
 ],
 &ldquo;metadata&rdquo;: {
  &ldquo;kernelspec&rdquo;: {
   &ldquo;display_name&rdquo;: &ldquo;Ruby 2.4.2&rdquo;,
   &ldquo;language&rdquo;: &ldquo;ruby&rdquo;,
   &ldquo;name&rdquo;: &ldquo;ruby&rdquo;
  },
  &ldquo;language_info&rdquo;: {
   &ldquo;file_extension&rdquo;: &ldquo;.rb&rdquo;,
   &ldquo;mimetype&rdquo;: &ldquo;application/x-ruby&rdquo;,
   &ldquo;name&rdquo;: &ldquo;ruby&rdquo;,
   &ldquo;version&rdquo;: &ldquo;2.4.2&rdquo;
  }
 },
 &ldquo;nbformat&rdquo;: 4,
 &ldquo;nbformat_minor&rdquo;: 2
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello mikutter]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/08/31/hello-mikutter/"/>
    <updated>2016-08-31T22:55:03+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/08/31/hello-mikutter</id>
    <content type="html"><![CDATA[<p>表題のとおりmikutterをgemでインストールできるようにしてみました。</p>

<h2>どうやって？</h2>

<p><a href="https://rubygems.org">rubygems</a> からはまだインストールはできません。
ので、以下の様にしてgem packageを作成します。</p>

<p><code>console
$ git clone github.com/katsyoshi/mikutter.git
$ cd mikutter
$ git checkout reokure-ru
$ bundle install
$ bundle exec rake build
$ gem install pkg/mikutter-3.5.0.pre.dev.gem
$ mikutter
</code></p>

<p>これでmikutterコマンドで起動できるようになっています
これすらめんどうな人は<a href="https://katsyoshi.org/mikutter-3.5.0.pre.dev.gem">ここ</a>にあります。
ダウンロードして <code>gem install mikutter-3.5.0.pre.dev.gem</code> でインストールできます。
プラグインで起動できないとかあるなら必要なgemをインストールしてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on RailsでTypeScriptを使ってみる]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/01/12/typescript-in-rails/"/>
    <updated>2015-01-12T11:41:25+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/01/12/typescript-in-rails</id>
    <content type="html"><![CDATA[<p>ふとRuby on RailsでTypeScriptを使いたくなったのでうごくようにしてみた。</p>

<h2>インストール</h2>

<p>これは簡単で <code>Gemfile</code> に <code>typescript-rails</code> を追加すればいけます。ですが、<a href="http://stackoverflow.com/questions/28117786/why-am-i-not-able-to-compile-a-file-that-references-jquery-d-ts">jQueryがTypeScript v1.4以上しかサポートしていないようなので</a>それに対応したものも追加します。</p>

<p><code>ruby
gem 'typescript-src', github: 'katsyoshi/typescript-src-ruby'
gem 'typescript-rails'
</code></p>

<p>インストールはこれだけでOKです。</p>

<h3>jQueryをつかう</h3>

<p>TypeScriptでjQueryを使う場合、TypeScriptの型定義ファイルをインストールする必要があります。
で、それを自力で作るのは大変なので、 <code>tsd</code> を利用してインストールします。</p>

<h4>tsd をインストール</h4>

<p><code>tsd</code> は <code>npm</code> でインストールできるので、それでインストールします。</p>

<p><code>
$ npm install tsd -g
</code></p>

<p>でインストールできたので、この <code>tsd</code> を利用してjQueryの型定義ファイルをインストールします。</p>

<p><code>
$ tsd init
$ $EDITOR tsd.json
  path: "app/assets/javascripts/typings",
  bundle: "app/assets/javascripts/typings/tsd.d.ts"
$ tsd query jquery -osa install
</code></p>

<p>でjQueryを利用する準備は整いました。</p>

<h2>TypeScriptを書いてみよう</h2>

<p>コンソールに <code>hello, world!</code> を出すだけの例を示します。</p>

<p><code>javascript
$(() =&gt; {
  console.log("hello, world!");
});
</code></p>

<p>でいけますよ。
が <code>$('#hello').text('hoge');</code> いかねぇ。</p>
]]></content>
  </entry>
  
</feed>
