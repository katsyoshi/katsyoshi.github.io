<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-09-11T00:43:16+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello, Itamae from docker!!]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/07/09/hello/"/>
    <updated>2018-07-09T22:54:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/07/09/hello</id>
    <content type="html"><![CDATA[<p><a href="https://itamae.kitchen/">Itamae</a> の plugin 書いててそろそろ test 欲しいなあとおもって2年くらいたちましたが、
ようやく <a href="https://www.docker.com/">Docker</a> 使って test 書きました。</p>

<h3>方向性</h3>

<p>ここでテストを実施するとして何に対しておこなうのかというのを考えましたが、E2Eのテストだけで良いだろうという方向でテストを書くようにしています。
VMを立てて実行することにはチョット大袈裟だろうということでもっと簡単に、楽にということで <code>docker</code> を選択しています。</p>

<p>itamae で E2E のテストなのでここでは <a href="https://serverspec.org/">serverspec</a> を利用してテストを行います。
E2E のテスト準備として <code>docker</code> 内で最初に目的のレシピを実施し、そのレシピが正しく動作しているかをテストしています。</p>

<h3>準備とテスト実施</h3>

<p>準備として以下の <code>gem</code> を追加しますが、 <a href="https://github.com/swipely/docker-api">docker-api.gem</a> の方はなくてもとくに問題ないです。
<code>serverspec</code> の対象バックエンドで <code>docker</code> が<a href="https://tsub.hatenablog.com/entry/2016/06/25/222508">指定できるようになります</a>が、 <code>docker</code> 内 (<code>docker run -t hoge bundle exec serverspec</code> など) で <code>serverspec</code> を実施すれば実行できますので、好みで追加しましょう。</p>

<p><code>
spec.add_development_dependency "docker-api"
spec.add_development_dependency "serverspec"
</code></p>

<p>次に <code>Dockerfile</code> を作成します。ここでは単純に必要な準備を実施、テストしたいディレクトリの追加、 <code>bundler</code> を利用して <code>gem</code> のインストールを実施してから、対象のディレクトリで <code>itamae</code> の <code>local</code> を指定して対象の <code>docker</code> にレシピ適用します。そのあと <code>docker run</code> や <code>serverspec</code> を実施することでテストをすることが可能となります。</p>

<p><code>
FROM ruby
RUN echo "gem: --no-rdoc --no-ri" &gt;&gt; /.gemrc
RUN gem install bundler
ADD . /app
WORKDIR /app
RUN bundle install
RUN bundle exec itamae local samples/recipe.rb
CMD bundle exec rake
</code></p>

<h3><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a></h3>

<p><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a> でできるようになってます。
とくに <a href="https://docker.io">docker.io</a> とかで公開していませんので、以下に例を</p>

<p><code>
cd /path/to/itamae-plugin-resource-pip
docker build -t katsyoshi/itamae-plugin-resource-pip .
docker run -t katsyoshi/itamae-plugin-resource-pip bundle exec rake
</code></p>

<h3>おわり</h3>

<p>これやろうと思って調べてたらみつからずに <code>Dockerfile</code> 書き終えて、<a href="https://travis-ci.org">travis</a> を追加しようとしたときに、<a href="https://twitter.com/sue445">@sue445</a> さんが<a href="https://sue445.hatenablog.com/entry/2018/05/01/115522">やってた</a>のをみつけてしまった。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerではまってます]]></title>
    <link href="http://blog.katsyoshi.org/blog/2014/10/01/pitfall-in-docker/"/>
    <updated>2014-10-01T21:11:04+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2014/10/01/pitfall-in-docker</id>
    <content type="html"><![CDATA[<p>タイトルのとおりです。
Gentoo/LinuxでDockerが起動しないのでとりあえずメモ。</p>

<h2>インストール</h2>

<p>dockerの<a href="https://docs.docker.com/installation/gentoolinux/">Gentooインストールページ</a>を参考に<a href="https://github.com/tianon/docker-overlay">overlay</a>を導入します。</p>

<p><code>
$ sudo layman -a docker
$ sudo eix-sync
$ sudo emerge -av app-emulators/docker
</code></p>

<p>ここでカーネルオプションの警告が出るのでひとつひとつ潰しておきます。</p>

<h2>起動</h2>

<p>インストールおわったら、起動させますが、以下のようなログが出てるので起動できません。</p>

<p><code>
2014/10/01 18:39:17 docker daemon: 1.1.2 d84a070; execdriver: native; graphdriver:
[6c541422] +job serveapi(unix:///var/run/docker.sock)
[6c541422] +job initserver()
[6c541422.initserver()] Creating server
[6c541422] +job init_networkdriver()
[6c541422.init_networkdriver()] creating new bridge for docker0
package not installed
[6c541422] -job init_networkdriver() = ERR (1)
package not installed
[6c541422] -job initserver() = ERR (1)
2014/10/01 18:39:17 package not installed
</code></p>

<p>このときは <code>bridge-utils</code> をインストールすればいいのかなと思ってたら、インストールしても解決できないです。</p>

<h2>おわり</h2>

<p>どなたか助けてくだされ〜</p>

<h2>追記</h2>

<p>再構築したカーネルをインストールしてなかったというオチでした。</p>

<p>ちゃんちゃん</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker on OS Xで嵌ったおはなし]]></title>
    <link href="http://blog.katsyoshi.org/blog/2014/06/10/pitfall-in-boot2docker/"/>
    <updated>2014-06-10T19:52:53+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2014/06/10/pitfall-in-boot2docker</id>
    <content type="html"><![CDATA[<p>MacOS XでDockerを動かしてたら嵌ったのでメモ</p>

<h2>Docker on OS X</h2>

<p>OS XでもDockerが<a href="http://docs.docker.com/installation/mac/">動かせるよう</a>になりました。
インストールは<a href="http://dev.classmethod.jp/tool/docker/getting-started-docker-on-osx/">ここ</a>とかを参考にしてください。</p>

<h2>で嵌ったところ</h2>

<p>Docker上で動いているアプリケーションとどうしても通信ができない。どうやらDockerとアプリケーションは起動はしてるようなんだが、
どうしても通信できないということがわかりました。</p>

<p><code>
$ docker run -p 9199:9199 hogehoge
$ netstat -a | grep 9199
</code></p>

<p>でも見えない。なんでかなあと思ってたら<a href="https://github.com/dotcloud/docker/issues/4007">こんな</a>ことや<a href="http://k-shogo.github.io/article/2014/02/13/boot2docker-portforward/">こんな</a>ことがわかりました。</p>

<h2>解決策</h2>

<p>VirtualBoxからboot2docker-vmのポートフォワードを設定すればいいです。</p>

<p><code>
$ netstat -a | grep 9199
tcp4       0      0  localhost.9199         *.*                    LISTEN
</code></p>

<p>ちゃんちゃん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JubatusをDocker上で動かしてみた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2014/05/12/jubatus-runs-on-docker/"/>
    <updated>2014-05-12T23:50:33+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2014/05/12/jubatus-runs-on-docker</id>
    <content type="html"><![CDATA[<p>最近話題の<a href="https://www.docker.io/">Docker</a>使ってJubatusを動かしてみたのでメモ的なものを</p>

<h2>環境</h2>

<p>環境はVagrantでUbuntu14.04を動かしその上でDockerでJubatusVMを動作</p>

<ul>
<li>Vagrant: 1.5.4</li>
<li>docker: 0.11.1</li>
</ul>


<h2>Dockerfile</h2>

<p><a href="https://github.com/katsyoshi/docker-jubatus">リポジトリ</a>を作成しておきましたのでcloneして実行します。</p>

<p><code>
$ git clone https://github.com/katsyoshi/docker-jubatus
$ cd docker-jubatus
$ docker build .
$ docker run -p 9199:9199 最後に出てきたハッシュ値
</code></p>

<p>で動きはじめます。</p>
]]></content>
  </entry>
  
</feed>
