<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gentoo | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/gentoo/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2016-10-10T20:18:16+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ItamaeつかってOSのインストールをやってみた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae/"/>
    <updated>2016-10-09T16:43:27+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/10/09/hello-gentoo-using-itamae</id>
    <content type="html"><![CDATA[<p>9月はRubyKiagiにいってたりしました。
そのときに<a href="http://mikutter.blogspot.jp/2016/09/mikutter-3312-343.html">mikutterのコミッター</a>とかになったようです。</p>

<p>シルバーウィークにThinkPadのOS再インストールをしたのでその記録を</p>

<h2>なにやったの？</h2>

<p><a href="https://twitter.com/mtsmfm">@mtsmfm</a> と以前話していたとき、&ldquo;ansibleつかってOSインストールしてるんだけど、完全自動化できないんですよね~&rdquo; みたいな事を聞いたので<a href="https://github.com/itamae-kitchen/itamae">Itamae</a> をつかってやってみました。
結論から言うと完全自動化は無理だけど、ある程度は自動化できた。</p>

<h3>環境</h3>

<ul>
<li>machine: ThinkPad X250</li>
<li>OS: Gentoo Linux</li>
<li>Provisioning tool: Itamae</li>
<li>repo: <a href="https://github.com/katsyoshi/itamae-recipes">https://github.com/katsyoshi/itamae-recipes</a></li>
</ul>


<h2>インストール</h2>

<p>インストールディスクを起動するところはipmiとか搭載していない(しらべていない)し<a href="https://wiki.openstack.org/wiki/Ironic">Ironic</a>はつかいたくないので手動で起動し、
sshdの起動とrootのパスワードを設定します。起動したら以下の手順でパーティション作成からカーネルのインストールまでします。</p>

<p><code>console
git clone https://github.com/katsyoshi/itamae-recipes.git
cd itamae-recipes
bundle install
wget http://ftp.iij.ad.jp/pub/linux/gentoo/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20161006.tar.bz2
cp stage3-amd64-20161006.tar.bz2 cookbook/install/stage3.tar.bz2
itamae ssh -h nu-machine cookbook/install/gentoo.rb -u root -j cookbook/install/gentoo.json
</code></p>

<p>でOSのインストールまでできるのですが、gentooのインストールメディアだと、diffがインストールされていないのでitamaeからfileのコピーができません。
都度コピーしてください(というよりgentooインストーラーにdiffを入れたほうが早そう)</p>

<h2>パッケージのインストール</h2>

<p>ここまで終ったら、パッケージのインストールします。これも以下コマンドを実行することで終ります。</p>

<p><code>console
itamae ssh -h nu-machine cookbook/gentoo/emerge.rb -j cookbook/gentoo/package.json
</code></p>

<h2>owari</h2>

<p>ItamaeつかってOSのインストールを実行してみました。diffが失いところがとくにつらいですね。
おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emerge --syncをgitにかえたはなし]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/02/24/portage2git/"/>
    <updated>2015-02-24T00:13:18+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/02/24/portage2git</id>
    <content type="html"><![CDATA[<p>portageはデフォルトだと <code>rsync</code> を利用しての更新をしているので、
<code>git</code> を用いた方法に変更します。</p>

<h2>準備</h2>

<p><code>portage</code> を <code>2.2.17</code> に変更し、USEフラグとして <code>git</code> をつかいます。</p>

<p>```sh</p>

<h1>USE=&ldquo;git ${USE}&rdquo; emerge -av \=portage-2.2.17</h1>

<p>```</p>

<p>つぎに、Gitのリポジトリを見に行くように<a href="http://qiita.com/wjn/items/a3b71059211711501e35">設定</a>します。</p>

<p>と設定してあとはいつもどおり <code>sudo eix-sync</code> させるだけで大丈夫です。</p>

<h2>おわり</h2>

<p>基本的にはリンク先だけ見てればいけると思います。</p>

<p>引越ししてWiMAXの電波の入りがわるくなったので鉄製ボウル買おうかとおもってたら2時間ほど<a href="https://ingress.com">徘徊</a>してました。</p>

<h3>参考サイト</h3>

<ol>
<li><a href="http://qiita.com/wjn/items/a3b71059211711501e35">http://qiita.com/wjn/items/a3b71059211711501e35</a></li>
<li><a href="https://wiki.gentoo.org/wiki/Project:Portage/Sync">https://wiki.gentoo.org/wiki/Project:Portage/Sync</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[とりあえずibusやめてみた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/02/12/remove-ibus/"/>
    <updated>2015-02-12T07:10:29+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/02/12/remove-ibus</id>
    <content type="html"><![CDATA[<p><a href="https://www.google.co.jp/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#newwindow=1&amp;q=ibus1.5">ibus-1.5</a>からあまり評判がよろしくない(特に不満はない)ので、あたらしく<a href="https://code.google.com/p/fcitx/">fcitx</a>を導入してみた。</p>

<h2>前提条件</h2>

<p>ここでは<a href="http://www.gentoo.org">Gentoo/Linux</a>での導入方法について述べています。
日本語変換エンジンとしてMozcについて述べています。</p>

<h2>導入</h2>

<p>とりあえずfcitxをインストール、設定します。</p>

<p>```sh
$ emerge -av fcitx</p>

<p>$ $EDITOR .xinitrc</p>

<p>export XMODIFIERS=@im=&ldquo;fcitx&rdquo;
export GTK_IM_MODULE=&ldquo;fcitx&rdquo;
export QT_IM_MODULE=&ldquo;fcitx&rdquo;
fcitx
```</p>

<p>これでインストールはこれでおわりです。</p>

<h2>fcitxでmozc</h2>

<p>これは、<a href="http://gpo.zugaina.org/app-i18n/mozc">overlay</a>が提供されいているのでそれで導入します。</p>

<p>```sh
$ $EDITOR /etc/portage/make.conf
USE=&ldquo;fcitx ${USE}&rdquo;</p>

<p>$ sudo emerge -av mozc
```</p>

<p>で、インストールすれば使えるようになります。</p>

<h2>おわり</h2>

<p><a href="http://anond.hatelabo.jp/20150210030728">こういうの</a>があったので、真面目にかこうかと思ったんですがどめんどうなので導入メモになりました。</p>

<p>あと引越ししたので贈っていただいてもいいんですよ？
<a href="http://www.amazon.co.jp/registry/wishlist/V0YZPO1OYFH5/">http://www.amazon.co.jp/registry/wishlist/V0YZPO1OYFH5/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerではまってます]]></title>
    <link href="http://blog.katsyoshi.org/blog/2014/10/01/pitfall-in-docker/"/>
    <updated>2014-10-01T21:11:04+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2014/10/01/pitfall-in-docker</id>
    <content type="html"><![CDATA[<p>タイトルのとおりです。
Gentoo/LinuxでDockerが起動しないのでとりあえずメモ。</p>

<h2>インストール</h2>

<p>dockerの<a href="https://docs.docker.com/installation/gentoolinux/">Gentooインストールページ</a>を参考に<a href="https://github.com/tianon/docker-overlay">overlay</a>を導入します。</p>

<p><code>sh
$ sudo layman -a docker
$ sudo eix-sync
$ sudo emerge -av app-emulators/docker
</code></p>

<p>ここでカーネルオプションの警告が出るのでひとつひとつ潰しておきます。</p>

<h2>起動</h2>

<p>インストールおわったら、起動させますが、以下のようなログが出てるので起動できません。</p>

<p><code>
2014/10/01 18:39:17 docker daemon: 1.1.2 d84a070; execdriver: native; graphdriver:
[6c541422] +job serveapi(unix:///var/run/docker.sock)
[6c541422] +job initserver()
[6c541422.initserver()] Creating server
[6c541422] +job init_networkdriver()
[6c541422.init_networkdriver()] creating new bridge for docker0
package not installed
[6c541422] -job init_networkdriver() = ERR (1)
package not installed
[6c541422] -job initserver() = ERR (1)
2014/10/01 18:39:17 package not installed
</code></p>

<p>このときは <code>bridge-utils</code> をインストールすればいいのかなと思ってたら、インストールしても解決できないです。</p>

<h2>おわり</h2>

<p>どなたか助けてくだされ〜</p>

<h2>追記</h2>

<p>再構築したカーネルをインストールしてなかったというオチでした。</p>

<p>ちゃんちゃん</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo LinuxむけのJubatusパッケージ書いたよ]]></title>
    <link href="http://blog.katsyoshi.org/blog/2014/09/12/jubatus-in-gentoo/"/>
    <updated>2014-09-12T12:29:20+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2014/09/12/jubatus-in-gentoo</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/08/20/gentoo-install-battle-part-i/">PC</a>を<a href="/blog/2014/08/21/gentoo-install-battle-part-ii/">買い替えた</a>ので<a href="/blog/2014/08/31/gentoo-install-battle-part-iii/">環境構築</a>してます。
<a href="https://github.com/kazuki/overlay/tree/master/sci-calculators/jubatus">Jubatusのoverlay</a>があったのですが、古かったので新しく<a href="https://github.com/katsyoshi/overlay">Jubatusのoverlay</a>作成しました。</p>

<h2>インストール</h2>

<p>これは、以下のコマンドでインストールができます。</p>

<p>```sh</p>

<h1>curl <a href="https://raw.githubusercontent.com/katsyoshi/overlay/master/profiles/layman.xml">https://raw.githubusercontent.com/katsyoshi/overlay/master/profiles/layman.xml</a> > /etc/layman/overlays/katsyoshi.xml</h1>

<h1>layman -f -a katsyoshi</h1>

<h1>eix-sync</h1>

<h1>emerge -av jubatus</h1>

<p>```</p>

<p>でいけるとおもいます。</p>

<h2>未実装</h2>

<ul>
<li>jubatus_coreのオプションがはたらいてない(ハズ)</li>
<li>jubatus_msgpack-rpcの依存パッケージにdev-libs/msgpackをいれていない</li>
<li>jubatusのオプションを確認していない</li>
</ul>


<p>などなどあるので、PRまってます。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/kazuki/overlay/">よくみたら</a>必要なライブラリのパッケージもあったのでこれのバージョンとjubatus_core追加するだけでよかったかも。</p>

<p>ちゃんちゃん</p>
]]></content>
  </entry>
  
</feed>
