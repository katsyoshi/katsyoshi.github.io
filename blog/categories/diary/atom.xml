<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: diary | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/diary/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2017-05-29T22:46:42+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[installing apache arrow]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/"/>
    <updated>2017-05-29T21:45:29+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow</id>
    <content type="html"><![CDATA[<p><a href="https://slide.rabbit-shocker.org/authors/kou/nagoya-rubykaigi-03/">最近</a><a href="https://github.com/kou">すとうさん</a>が<a href="https://slide.rabbit-shocker.org/authors/kou/data-science-rb/">一押し</a>している<a href="https://arrow.apache.org/">apache arrow</a>をインストールしてみた</p>

<h2>環境</h2>

<p><code>
$ uname -a
Linux rin 4.9.10-gentoo #6 SMP Tue Mar 28 01:29:26 JST 2017 x86_64 Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz GenuineIntel GNU/Linux
$ gcc -v
組み込み spec を使用しています。
COLLECT_GCC=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0/gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-pc-linux-gnu/5.4.0/lto-wrapper
ターゲット: x86_64-pc-linux-gnu
configure 設定: /var/tmp/portage/sys-devel/gcc-5.4.0-r3/work/gcc-5.4.0/configure --host=x86_64-pc-linux-gnu --build=x86_64-pc-linux-gnu --prefix=/usr --bindir=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0 --includedir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include --datadir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0 --mandir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/man --infodir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/info --with-gxx-include-dir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include/g++-v5 --with-python-dir=/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/python --enable-languages=c,c++,fortran --enable-obsolete --enable-secureplt --disable-werror --with-system-zlib --enable-nls --without-included-gettext --enable-checking=release --with-bugurl=https://bugs.gentoo.org/ --with-pkgversion='Gentoo 5.4.0-r3 p1.3, pie-0.6.5' --enable-libstdcxx-time --enable-shared --enable-threads=posix --enable-__cxa_atexit --enable-clocale=gnu --enable-multilib --with-multilib-list=m32,m64 --disable-altivec --disable-fixed-point --enable-targets=all --disable-libgcj --enable-libgomp --disable-libmudflap --disable-libssp --disable-libcilkrts --disable-libmpx --enable-vtable-verify --enable-libvtv --enable-lto --without-isl --enable-libsanitizer
スレッドモデル: posix
gcc バージョン 5.4.0 (Gentoo 5.4.0-r3 p1.3, pie-0.6.5)
</code></p>

<h2>いんすとーる</h2>

<p>今回まだGentooにパッケージがないのでgitからインストールします。ほしいのはrubygems.orgに公開されている<a href="https://rubygems.org/gems/red-arrow">red-arrow</a>をコンパイルするためにglibとこれを利用するために必要な依存パッケージとしてcppをインストールします。インストールはかんたんで <code>cmake</code> を実行すればインストールデキルはずです。</p>

<p><code>console
$ git clone git@github.com:apache/arrow.git
$ cd arrow/cpp
$ mkdir release
$ cd release
$ cmake .. -DCMAKE_BUILD_TYPE=Release
</code></p>

<p>でリリース用パッケージがビルドされるはずですが<a href="https://gist.github.com/katsyoshi/4486792ad43feae4d690d589dac1a157">エラー</a>が出ます。
これはJIRAで<a href="https://issues.apache.org/jira/browse/ARROW-667">検索した結果</a>より <code>gcc</code> のバージョン情報がとれずにエラーをだしているやりとりが発見されたのでわかりました。
ログを見ると実際に取得できていないことも確認しました。で <code>cpp/cmake_modules/CompilerInfo.cmake</code> をみるとどうやら日本語のバージョン情報は考慮されていないような作りになっていました。
なので <code>LANG=C</code> をつけて <code>cmake</code> 再びつけて実行します。</p>

<p><code>console
$ LANG=C cmake .. -DCMAKE_BUILD_TYPE=Release
$ make
$ make install
</code></p>

<p>これでC++のインストールは終了です。続いてglibをインストールします。</p>

<p><code>console
$ cd ../../c_glib
$ ./autgen.sh
$ ./configure
$ make
$ make install
</code></p>

<p>でインストールできます。こちら久々に野良ビルドしたため <code>PKG_CONFIG_PATH</code> や <code>LD_LIBRARY_PATH</code> の設定をわすれてただけなのですんなりいけました。
で最後に <code>gem install red-arrow</code> を実行して目的を達成しました!!!!11</p>

<h2>おわり</h2>

<p>ほんとうのもくてきは <code>fluentd</code> のぷらぐいんをかくことですがつかれたのできょうはここまで</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start watching dazn]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/21/start-watching-dazn/"/>
    <updated>2017-05-21T14:49:19+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/21/start-watching-dazn</id>
    <content type="html"><![CDATA[<p>タイトルのとおり、DAZNを見はじめた。
Netflix, Huluを契約してたけど、ぜんぜん見ていなかったので解約した。
DAZN をみようとおもったきっかけはNBAのカンファレンスファイナルをみようとおもったため。</p>

<p>とりあえず視聴感想ですが、表示は色々なところで言われてるとおもいますが、
接続開始時にブロックノイズが気になりますが、一旦綺麗に表示されるとそのあとは
特に気になりません。</p>

<p>肝心の試合内容が現在非常に残念なため試合内の評価はしません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[raspiでdnsを運用してみはじめた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/04/09/use-dnsmasq-for-domestic-network/"/>
    <updated>2017-04-09T00:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/04/09/use-dnsmasq-for-domestic-network</id>
    <content type="html"><![CDATA[<p>RasPi2 が3台あってつかっていないので DNS として動かすようにしてみた。
RasPi とはいえ中身は Ubuntu Linux なのでのインストールは <code>apt install dnsmasq</code> するだけでおわります。</p>

<h2>はまったところ</h2>

<p>いつもどおりはまりました。今回は以下の二点</p>

<ul>
<li>/etc/dnsmasq.d/ に hosts ファイルを置くとエラー</li>
<li>/etc/hosts ファイルのパーミッションが <code>600</code> になっていたためエラー</li>
</ul>


<h3>/etc/dnsmasq.d/ に hosts ファイルを置くとエラー</h3>

<p>ログを見ても以下のログしか出ておらず理由の調査に時間がかかった。hosts ファイルは設定ファイルではないため当然といえば当然なのですが…</p>

<p><code>
Jan  1 00:00:08 localhost dnsmasq[673]: bad option at line 1 of /etc/dnsmasq.d/hosts
</code></p>

<p>今、<code>/etc/defaults/dnsmasq</code> を調べてみるとそうなってました。はい。</p>

<p><code>
CONFIG_DIR=/etc/dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new
</code></p>

<h3>/etc/hosts ファイルのパーミッションが <code>600</code> になっていたためエラー</h3>

<p>こちらは上記問題を解決したあと、反映されないのでログを見たときにわかりました。</p>

<p><code>
Apr  8 08:57:20 localhost dnsmasq[4733]: failed to load names from /etc/hosts: Permission denied
</code></p>

<p>これの原因は <code>itamae</code> でファイルを送信するときに <code>mode '644'</code> を指定する必要があったのだが、指定せずに
送信してしまったため発生。</p>

<h2>おわり</h2>

<p>おわり</p>

<h3>関連リポジトリ</h3>

<p><a href="https://github.com/katsyoshi/itamae-recipes">https://github.com/katsyoshi/itamae-recipes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixirのインストール方法]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/04/01/how-to-install-elixir/"/>
    <updated>2017-04-01T09:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/04/01/how-to-install-elixir</id>
    <content type="html"><![CDATA[<p><a href="http://www.elixirconf.jp/">Elixir Conf Japan</a> に行きましたが、よく考えてみたら
まだこの PC に <a href="http://elixir-lang.org/">Elixir</a> をインストールしていないことに気がついたので
隣の<a href="https://twitter.com/zzak_jp">英語のうまいおじさん</a>にインストール方法を<a href="https://gist.github.com/katsyoshi/7ac2579bbe903ff65685570fd3873379">教えてもらいながら</a>インストールしました<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2>準備</h2>

<p>ここでは <a href="https://gentoo.org/">Gentoo Linux</a> を前提としております。
まず、Elixir を動かすために <a href="https://www.erlang.org">Erlang</a> をインストールします。</p>

<p><code>console
sudo eix-sync
sudo emerge erlang
</code></p>

<p>準備はこれだけです。</p>

<h2>インストール</h2>

<p>次にインストールなのですが、Elixir は Earlang VM 上で動くプログラミング言語のため、コンパイルされたバイナリを置くだけでインストールがおわります。</p>

<p><code>console
wget https://github.com/elixir-lang/elixir/releases/download/v1.4.2/Precompiled.zip
unzip Precompiled.zip -d elixir
mv elixir /path/to/elixir
echo 'export PATH=/path/to/elixir/bin:$PATH' &gt;&gt; ~/.bashrc
source ~/.bashrc
</code></p>

<h2>おわり</h2>

<p>さいごに <code>iex</code> を起動して確認すればおわり</p>

<h3>参考</h3>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>elixir getting started, https://gist.github.com/zzak/a765d6a63860d75c4444e35f57daed13, 2017/04/01 閲覧<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[basic authenticate in h2o]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/02/20/basic-authenticate-in-h2o/"/>
    <updated>2017-02-20T21:53:49+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/02/20/basic-authenticate-in-h2o</id>
    <content type="html"><![CDATA[<p>H2Oでベーシック認証したい場合は以下のようにします<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>```yaml
paths:
  &ldquo;/&rdquo;:</p>

<pre><code>mruby.handler: |
  require "htpasswd.rb"
  Htpasswd.new("/etc/h2o/.htpasswd", "realm-name")
</code></pre>

<p>```</p>

<p>また、 <code>.htpasswd</code> で plain フォーマットはサポートされていません。</p>

<p><code>console
failed to validate password using file:/etc/h2o/.htpasswd:crypt-style password hash is not supported
</code></p>

<p><code>.htpasswd</code> を手動で作成したい場合は以下の方法でできます<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p><code>ruby
require "digest/sha1"
require "base64"
open("/etc/h2o/.htpasswd", "w") do |w|
  w.write("user:{SHA}#{Base64.encode64(Digest::SHA1.digest("password"))}")
end
</code></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Configure > Using Basic Authentication, DeNA Co., Ltd. et al., https://h2o.examp1e.net/configure/basic_auth.html, 2017/02/20 閲覧<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Password Formats, The Apache Software Foundation., https://httpd.apache.org/docs/2.4/misc/password_encryptions.html, 2017/02/20 閲覧<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
