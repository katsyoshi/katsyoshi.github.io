<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Diary | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/diary/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2016-11-29T01:08:16+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YARAKASHI CUDA編]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/11/29/introduced-cuda/"/>
    <updated>2016-11-29T00:48:15+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/11/29/introduced-cuda</id>
    <content type="html"><![CDATA[<p><a href="/blog/2016/11/28/hello/">昨日</a>かいた奴でGTX 1050があるのでCUDAを導入してみた。</p>

<h2>CUDA導入</h2>

<p>これは簡単で <a href="https://developer.nvidia.com/cuda-downloads">ここ</a> から必要なパッケージをダウンロードしてきます。
今回は Linux x86_64 Ubuntu 14.04 runfile(local) を順に選択。
インストールはここでダウンロードしたrunfileを実行して、指示に従うだけです。
これが終ったら、SampleProjectもインストールされてるとおもうのでこのプロジェクトをコンパイルします。</p>

<p><code>
$ chmod 555 ./cuda_8.0.44_linux.run
$ ./cuda_8.0.44_linux.run
:
:
$ cd NVIDIA_CUDA-8.0_Samples
$ make
</code></p>

<p>でコンパイルが終了したらサンプルプログラムを実行します。とりあえず <code>deviceQuery</code> を実行します。</p>

<p>```
$ cd bin/x86_64/linux/release
$ ./deviceQuery
./deviceQuery Starting&hellip;</p>

<p> CUDA Device Query (Runtime API) version (CUDART static linking)</p>

<p>cudaGetDeviceCount returned 38
&ndash;> no CUDA-capable device is detected
Result = FAIL
```</p>

<p>と出ます。どうみてもエラーですね</p>

<p>で、以下のようにrootで実行すると
```
$ sudo ./deviceQuery
./deviceQuery Starting&hellip;</p>

<p> CUDA Device Query (Runtime API) version (CUDART static linking)</p>

<p>Detected 1 CUDA Capable device(s)</p>

<p>Device 0: &ldquo;GeForce GTX 1050&rdquo;
  CUDA Driver Version / Runtime Version          8.0 / 8.0
  CUDA Capability Major/Minor version number:    6.1
  Total amount of global memory:                 1965 MBytes (2060255232 bytes)
  ( 5) Multiprocessors, (128) CUDA Cores/MP:     640 CUDA Cores
  GPU Max Clock rate:                            1455 MHz (1.46 GHz)
  Memory Clock rate:                             3504 Mhz
  Memory Bus Width:                              128-bit
  L2 Cache Size:                                 1048576 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)
  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  2048
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)
  Run time limit on kernels:                     Yes
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Device PCI Domain ID / Bus ID / location ID:   0 / 129 / 0
  Compute Mode:</p>

<pre><code> &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;
</code></pre>

<p>deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = GeForce GTX 1050
Result = PASS
```
と出てきますので、パーミッションがなかったようです。
あとは簡単、CUDA使いたいユーザーにパーミッションつけたらおわりです。</p>

<h2>おわり</h2>

<p>こんなのに3時間ほど時間を費しましたね。はい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[あったらしーPCかったよー]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/11/28/hello/"/>
    <updated>2016-11-28T01:14:21+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/11/28/hello</id>
    <content type="html"><![CDATA[<h2>あたらしいPC買いました</h2>

<p>先月のおわりに注文し今月頭のOSCあたりに新しいPCを組み立てました。
先月おわりあたりまではDDR4の32GBメモリーが2万円と安く売っていたので勢いで購入。
構成は以下のようになっています。</p>

<p><code>
CPU: XeonE5-2620V4 * 2
MB: X10PE-D16WS
DISK:
MEM: Crucial [Micron製] DDR4 サーバー用メモリー 32GB ECC Registered * 4
NIC: X540-T2
GPU: Zotac GeForce GTX 1050
</code></p>

<p>というかんじになっています。
今回はメモリー4枚しか買っていないので安くなったらあと12枚買いたいとおもってます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Went to 8 Jou Island]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/11/09/went-to-8-jou-island/"/>
    <updated>2016-11-09T20:13:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/11/09/went-to-8-jou-island</id>
    <content type="html"><![CDATA[<p>11/3-11/5 で八丈島にいってきました。
決めたのは10/28の朝でした。</p>

<h2>出発</h2>

<p>は竹橋桟橋から船が出ているのでそこからのっていきます。
船は11/2 22:30(JST)からでていますのでそれでいきました。</p>

<h2>到着</h2>

<p>は11/3 の朝8時ころに底土港に到着します。</p>

<h2>島一周</h2>

<p>朝到着し、やることないので宿に荷物を置いて自轉車を借ります。
この自轉車がブレーキ効かないのであきらめてスクーターを借りました。
滞在時間ずっと使えるように二日借りることにしました。</p>

<p>スクーターかりたあとは島観光として一周まわることにしました。
途中いくつか良いポイントがあったので写真をとったりしましたが、
だいたい2時間ぐらいで島一周できました。</p>

<p>一周してひまだったので、昼飯を宿のちかくで</p>

<h2>釣り 1日目</h2>

<p>やることないなどうしようかなとおもってたら、宿の部屋に入れるようになったので、PCの充電と携帯の充電を
そんなこんなしてたら、時間が16時ごろになったので釣りへ。
この日は釣る気があまりなかったので坊主で終了。
飯は島の適当なラーメン屋で。</p>

<h2>釣り 2日目</h2>

<p>この日は起きてすぐに温泉に行ってみたら、温泉施設自体がどこ行ってもだめで一番遠いとこは、朝10時からでした。
ので温泉は諦めて釣りへ行ってみた。</p>

<p>釣りはじめて30分ぐらいで釣れたし、一人で刺身にして食べるには十分な大きさだしで、あとは昼ごろまで適当に釣ってました。</p>

<p style="text-align:center;"> <img src="/images/photo/hachijo-ipara.jpg" alt="アイッパラ" /></p>

<h2>温泉</h2>

<p>釣りおわったあとは温泉でまったり2時間ほど時間をつぶしてあとは夕日を見にいきました。</p>

<p style="text-align:center;"> <img src="/images/photo/hachijo-sunset.jpg" alt="サンセット" /></p>

<h2>おわり</h2>

<p>たのしい一人旅でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RENEWAL MY SITE!!!]]></title>
    <link href="http://blog.katsyoshi.org/blog/2016/08/08/renewal-my-site/"/>
    <updated>2016-08-08T21:05:47+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2016/08/08/renewal-my-site</id>
    <content type="html"><![CDATA[<p>ってのは嘘ではないですが、嘘に近いです。
実はおとといの土曜日に katsyoshi.org をのぞいたら、 <em>nginx</em> の初期ページが表示されたので
とくにコンテンツはないですが、いそいでサイトの復旧をしました。
が、もともとあったファイル置場を失念したため似た感じで再構築してました。
再構築ついでにssl化、<code>nginx</code> から <code>h2o</code> へのWebサーバー変更しました。
あと <code>systemd</code> でデーモン化とかも。</p>

<h2>Let&rsquo;s Encrypt</h2>

<p>リリースされてだいぶたつのですが、<a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a>を利用してみました。
Ubuntu Linux 16.04 では、簡単に導入できます。</p>

<p><code>console
$ sudo apt install letsencrypt
$ sudo letsencrypt certonly
</code></p>

<p>でいくつかの質問に答えればおわりです。
ここで、戸惑った場面としては認証を受けたいサーバーの確認があるのですが、
サーバーポート443を開ける<a href="https://letsencrypt.jp">必要があり</a>、1回失敗しました。</p>

<h2>H2O</h2>

<p>せっかくだし、<a href="https://h2o.examp1e.net/">H2O</a>を使おうと思います。
インストールはかんたんでいかのようにすればokです。</p>

<p><code>
$ git clone h2o/h2o
$ cd h2o
$ cmake -DCMAKE_INSTALL_PREFIX_PATH=/opt/local .
$ make &amp;&amp; make install
</code></p>

<p>設定は<a href="https://h2o.examp1e.net/configure/quick_start.html">ここ</a>と<a href="https://github.com/h2o/h2o/wiki/redirect-HTTP-to-HTTPS">ここ</a>を参考にして以下にしています。</p>

<p>```
user: www-data
hosts:
  &ldquo;katsyoshi.org:80&rdquo;:</p>

<pre><code>listen:
  port: 80
paths:
  /:
    redirect: https://katsyoshi.org
</code></pre>

<p>hosts:
  &ldquo;katsyoshi.org:443&rdquo;:</p>

<pre><code>listen:
  port: 443
  ssl:
    certificate-file: /etc/letsencrypt/live/katsyoshi.org/fullchain.pem
    key-file: /etc/letsencrypt/live/katsyoshi.org/privkey.pem
paths:
  /:
    file.dir: /opt/website/top
</code></pre>

<p>access-log: /var/log/h2o/access.log
error-log: /var/log/h2o/error.log
pid-file: /var/run/h2o.pid
http2-reprioritize-blocking-assets: ON
```</p>

<h2><a href="https://negima.mobi/2015/10/2092">h2o.service</a></h2>

<p>さいきんわだいのしすてむでーってやつででーもん？かしようとおもいます</p>

<p>```
[Unit]
Description=H2O the optimized HTTP/1, HTTP/2 server
After=syslog.target network.target remote-fs.target nss-lookup.target</p>

<p>[Service]
Type=forking
PIDFile=/var/run/h2o.pid
ExecStartPre=/opt/local/bin/h2o -c /etc/h2o/h2o.conf -t
ExecStart=/opt/local/bin/h2o -c /etc/h2o/h2o.conf -m daemon
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true</p>

<p>[Install]
WantedBy=multi-user.target
```</p>

<p>いやーしすてむでーってべんりですねー</p>

<h2>owari</h2>

<p>サイトがぶっとんだのでサイトの復旧？と let&rsquo;s encrypt でのSSL化、 h2oへのウェブサーバー変更と <code>systemd</code> でのデーモン化をやりました。</p>

<p>1年ぶりの日記だたので、Markdownどうかくんだっけ？とか、別のところで大変でした。</p>

<h2>参考サイト</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[すくりーんきゃすと]]></title>
    <link href="http://blog.katsyoshi.org/blog/2015/05/15/screencast-use-gif/"/>
    <updated>2015-05-15T23:47:14+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2015/05/15/screencast-use-gif</id>
    <content type="html"><![CDATA[<p>LinuxでScreenCast用の環境を整えてみた。</p>

<h2>必要パッケージ</h2>

<ul>
<li>ffmpeg</li>
<li>gtk-recordMyDesktop</li>
</ul>


<h2>使いかた</h2>

<p><code>gtk-recordMyDesktop</code> でデスクトップをキャプチャする。
その後は、 <code>ffmpeg</code> を使って好きな動画形式に変換します。
ここでは、gif画像に変更しています。</p>

<p><code>sh
$ ffmpeg -i ~/screencast.ovg img/screencast.gif
</code></p>

<p style="text-align:center;"> <img src="/images/screenshot/gtk-recordMyDesktop.gif" width="512" alt="" /></p>

<h3>参考サイト</h3>

<ol>
<li><a href="http://d.hatena.ne.jp/over80/20080802/1217693705">http://d.hatena.ne.jp/over80/20080802/1217693705</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
