<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: diary | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/diary/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-09-11T00:43:16+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[くーも]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/11/cumo/"/>
    <updated>2018-09-11T00:13:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/11/cumo</id>
    <content type="html"><![CDATA[<p>Rubyで <a href="https://developer.nvidia.com/cuda-downloads"><code>cuda</code></a> を利用して GPGPU 使いたいの
で <a href="https://github.com/sonots/cumo"><code>cumo</code></a> を導入してみた。</p>

<h2>install</h2>

<p>はじめに <code>cuda</code> をインストールしておきます。
<code>gem</code> に登録されているので、雑に <code>gem install</code> 実施してみます。</p>

<p><code>
export CUDA_PATH="/opt/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
gem install cumo
</code></p>

<p>とすると以下のようなエラーが出てだめです。</p>

<p>```
gcc -I. -Iinclude -Inarray -Icuda -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/x86_64-linux -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/ruby/backward -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0 -I. -I/home/katsyoshi/.rbenv/versions/2.5.1/lib/ruby/gems/2.5.0/gems/numo-narray-0.9.1.3/ext/numo/narray -DHAVE_NUMO_NARRAY_H -DHAVE_DLFCN_H -DHAVE_DLOPEN -DHAVE_STDBOOL_H -DHAVE_STDINT_H -DHAVE_TYPE_BOOL -DHAVE_TYPE_U_INT8_T -DHAVE_TYPE_U_INT16_T -DHAVE_TYPE_INT32_T -DHAVE_TYPE_U_INT32_T -DHAVE_TYPE_INT64_T -DHAVE_TYPE_U_INT64_T -DHAVE_EXP10 -DHAVE_RB_CCOMPLEX -DHAVE_RB_THREAD_CALL_WITHOUT_GVL -I/opt/cuda/include -I/home/katsyoshi/.rbenv/versions/2.5.1/include -fPIC -O3 -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Wimplicit-int -Wpointer-arith -Wwrite-strings -Wdeclaration-after-statement -Wimplicit-function-declaration -Wdeprecated-declarations -Wmisleading-indentation -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -Wduplicated-cond -Wno-maybe-uninitialized -o narray/types/bit.o -c narray/types/bit.c
narray/gen/tmpl/lib.c:22:7: エラー: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘<strong>attribute</strong>’ before ‘/’ token
 #define m_map(x) m_num_to_data(rb_yield(m_data_to_num(x)))</p>

<pre><code>   ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: エラー: 終端する > 文字がありません</p>

<pre><code>                         ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: 致命的エラー: static ID id_cast;: そのようなファイルやディレクトリはありません
コンパイルを停止しました。
make: *** [Makefile:453: narray/types/bit.o] エラー 1
```</p>

<p>公式リポジトリ覗いてもとくに問題なさそうなので <code>gem</code> からのインストールは一旦おいてソースからインストールします。</p>

<h3>build</h3>

<p>公式リポジトリからダウンロードしてコンパイルをはじめます。</p>

<p><code>
git clone https://github.com/sonotz/cumo.git
cd cumo
export CUDA_PATH="/usr/local/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
bundle install
rake compile
rake install
</code></p>

<p>ってインストールできますが、その前に僕の環境が <code>gcc-8.2.0</code> だったりして、これを <code>gcc-6.4.0</code> に戻したりしてインストールしました。</p>

<h2>run</h2>

<p>これでインストール終わりましたので、 <code>irb</code> で確認してみようと思います。</p>

<p><code>
irb(main):001:0&gt; require 'cumo/narray'
=&gt; true
irb(main):002:0&gt; Cumo::Int32.new(3, 3).fill(0)
=&gt; Cumo::Int32#shape=[3,3]
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
</code></p>

<p>とこれで実行されたことを確認できます。</p>

<p>と簡単に書きましたが、インストール後にGPUへのアクセス権が無いユーザーで実行したためエラーが出ます(エビデンス取得忘れ)。
手元のPCではGPUにアクセス権がvideo groupにもあるので利用ユーザーをvideo groupへ追加して再起動することでようやく動作確認ができます。</p>

<h2>おわり</h2>

<p>簡単にGPGPUを利用したプログラムが書けるようになりましたのでおわりです。
技術書典5はこれを使ったはなしを出展しますのできてみてくださいな。</p>

<p>え37でまってます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SATySFi使って本書いてみてる]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/09/satysfi/"/>
    <updated>2018-09-09T14:29:46+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/09/satysfi</id>
    <content type="html"><![CDATA[<p>技術書典5出しますので、それを書くために <a href="https://ocaml.org/">OCaml</a> で作成された <a href="https://github.com/gfngfn/SATySFi">SATySFi</a> を使いはじめました。</p>

<h2>インストール</h2>

<p>今回は <a href="https://opam.ocaml.org">OPAM</a> を利用してインストールをしています。まあ単純にパッケージが今普段使いしてるOSにないだけなんですけどね。
インストール手順は <a href="https://github.com/gfngfn/SATySFi/blob/master/README-ja.md">公式のREADME.md</a> を参考にしています。</p>

<h3>OPAM</h3>

<p>OCaml Package Manager の略らしいです。
こいつは <code>OCaml</code> のインストールもしてくれるのでこれを利用します。
<code>OPAM</code> のインストールは簡単で以下の<a href="https://opam.ocaml.org/doc/Install.html">スクリプトを実行する</a>だけです。</p>

<p><code>
wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin
</code></p>

<h3>OCaml</h3>

<p><code>OPAM</code> のインストールが終ったら、 <code>OCaml</code> をインストールします。</p>

<p><code>
opam switch 4.06.0
eval `opam config env`
</code></p>

<h3>SATySFi</h3>

<p><code>OPAM</code> の準備が整ったら <code>SATySFi</code> の準備、インストールをします。</p>

<p>```
opam repository satysfi-external <a href="https://github.com/gfngfn/satysfi-external-repo.git">https://github.com/gfngfn/satysfi-external-repo.git</a>
opam update
git clone <a href="https://github.com/gfngfn/SATySFi.git">https://github.com/gfngfn/SATySFi.git</a>
cd SATiSFi</p>

<p>opam pin add satysfi .
opam install satysfi
```</p>

<h2>compile!!!!</h2>

<p>これでインストールされたのでとりあえずリポジトリにある <code>demo/demo.saty</code> をコンパイルしてみましょう。</p>

<p><code>
cd demo
make
</code></p>

<p>なにも準備していないといきなりエラーがでますのでそれを<a href="https://github.com/gfngfn/SATySFi/blob/master/memo-ja-how-to-use.md">公式を参考にして</a>解消します。
解消できたら <code>demo.pdf</code> ができますのでこれでつかえるようになります。</p>

<h2>おわり</h2>

<p>ちょっと簡単でしたが、 <code>satysfi</code> の導入日記でした。</p>

<p>そんなことより<a href="https://techbookfest.org/event/tbf05">技術書典5</a>に出します。ネタは酒に関するネタでやっていく予定です。
仕上がっていれば <code>え37</code> に居るとおもわれます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Itamae from docker!!]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/07/09/hello/"/>
    <updated>2018-07-09T22:54:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/07/09/hello</id>
    <content type="html"><![CDATA[<p><a href="https://itamae.kitchen/">Itamae</a> の plugin 書いててそろそろ test 欲しいなあとおもって2年くらいたちましたが、
ようやく <a href="https://www.docker.com/">Docker</a> 使って test 書きました。</p>

<h3>方向性</h3>

<p>ここでテストを実施するとして何に対しておこなうのかというのを考えましたが、E2Eのテストだけで良いだろうという方向でテストを書くようにしています。
VMを立てて実行することにはチョット大袈裟だろうということでもっと簡単に、楽にということで <code>docker</code> を選択しています。</p>

<p>itamae で E2E のテストなのでここでは <a href="https://serverspec.org/">serverspec</a> を利用してテストを行います。
E2E のテスト準備として <code>docker</code> 内で最初に目的のレシピを実施し、そのレシピが正しく動作しているかをテストしています。</p>

<h3>準備とテスト実施</h3>

<p>準備として以下の <code>gem</code> を追加しますが、 <a href="https://github.com/swipely/docker-api">docker-api.gem</a> の方はなくてもとくに問題ないです。
<code>serverspec</code> の対象バックエンドで <code>docker</code> が<a href="https://tsub.hatenablog.com/entry/2016/06/25/222508">指定できるようになります</a>が、 <code>docker</code> 内 (<code>docker run -t hoge bundle exec serverspec</code> など) で <code>serverspec</code> を実施すれば実行できますので、好みで追加しましょう。</p>

<p><code>
spec.add_development_dependency "docker-api"
spec.add_development_dependency "serverspec"
</code></p>

<p>次に <code>Dockerfile</code> を作成します。ここでは単純に必要な準備を実施、テストしたいディレクトリの追加、 <code>bundler</code> を利用して <code>gem</code> のインストールを実施してから、対象のディレクトリで <code>itamae</code> の <code>local</code> を指定して対象の <code>docker</code> にレシピ適用します。そのあと <code>docker run</code> や <code>serverspec</code> を実施することでテストをすることが可能となります。</p>

<p><code>
FROM ruby
RUN echo "gem: --no-rdoc --no-ri" &gt;&gt; /.gemrc
RUN gem install bundler
ADD . /app
WORKDIR /app
RUN bundle install
RUN bundle exec itamae local samples/recipe.rb
CMD bundle exec rake
</code></p>

<h3><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a></h3>

<p><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a> でできるようになってます。
とくに <a href="https://docker.io">docker.io</a> とかで公開していませんので、以下に例を</p>

<p><code>
cd /path/to/itamae-plugin-resource-pip
docker build -t katsyoshi/itamae-plugin-resource-pip .
docker run -t katsyoshi/itamae-plugin-resource-pip bundle exec rake
</code></p>

<h3>おわり</h3>

<p>これやろうと思って調べてたらみつからずに <code>Dockerfile</code> 書き終えて、<a href="https://travis-ci.org">travis</a> を追加しようとしたときに、<a href="https://twitter.com/sue445">@sue445</a> さんが<a href="https://sue445.hatenablog.com/entry/2018/05/01/115522">やってた</a>のをみつけてしまった。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100 Knock Section IV]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/02/26/nlp-100-section-4/"/>
    <updated>2018-02-26T23:45:52+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/02/26/nlp-100-section-4</id>
    <content type="html"><![CDATA[<p>NLP100本ノック第4節おわりましたのでまとめます</p>

<h2><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#ch4">第4章 形態素解析</a></h2>

<p>形態素解析やからむずいやろとおもってた</p>

<h3>準備</h3>

<p>この章では、形態素解析済ファイルを作成する必要がありますが、毎回対象ファイルをダウンロード、解析して解いています。
ここではいつもどおり <code>HashMap</code> を利用するため <code>ANALYZED_MECAB_KEYS</code> を作成してこれをキーにします。
またよく利用する品詞を <code>enum</code> で定義しておき、変換関数 <code>inspect</code> を作成します。</p>

<p>```rust
const ANALYZED_MECAB_KEYS: [&str; 9] = [&ldquo;pos&rdquo;, &ldquo;pos1&rdquo;, &ldquo;pos2&rdquo;, &ldquo;pos3&rdquo;, &ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;base&rdquo;, &ldquo;read&rdquo;, &ldquo;speech&rdquo;];
enum PartOfSpeech {</p>

<pre><code>VERB,
NOUN,
PARTICLE,
</code></pre>

<p>}</p>

<p>use PartOfSpeech::*;</p>

<p>fn inspect(val: PartOfSpeech) &ndash;> String {</p>

<pre><code>match val {
    VERB =&gt; "動詞",
    NOUN =&gt; "名詞",
    PARTICLE =&gt; "助詞",
}.to_string()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec30">30. 形態素解析結果の読み込み</a></h3>

<p><code>Map</code> を使えと指定があるので素直に利用します</p>

<p>```rust
fn feature(node: &amp;Node) &ndash;> HashMap&lt;String, String> {</p>

<pre><code>let mut h: HashMap&lt;String, String&gt; = HashMap::new();
let surface: String = (&amp;(node.surface)[..node.length as usize]).to_string();
h.insert("surface".to_string(), surface);
let values: Vec&lt;String&gt; = node.feature.split(",").map(|m| m.to_string()).collect();
for (a, b) in ANALYZED_MECAB_KEYS.iter().zip(values.iter()) {
    h.insert(a.to_string(), b.to_string());
}
h
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let url = "http://www.cl.ecei.tohoku.ac.jp/nlp100/data/neko.txt".to_string();
let neco: Vec&lt;String&gt; = NLP100::get(url).split("\n").filter(|f| f.ne(&amp;"")).map(|m| m.to_string()).collect();
let mut morph = Vec::new();

for line in neco {
    let mut tagger: Tagger = mecab::Tagger::new("");
    let nodes: Node = tagger.parse_to_node(line);

    let mut mecabu: Vec&lt;HashMap&lt;String, String&gt;&gt; = Vec::new();
    for node in nodes.iter_next() {
        match node.stat as i32 {
            mecab::MECAB_BOS_NODE =&gt; (),
            mecab::MECAB_EOS_NODE =&gt; (),
            _ =&gt; {
                mecabu.push(feature(&amp;node));
            }
        }
    }
    morph.push(mecabu);
}
for morph in morphs {
    for mecab in morph {
        println!("{}", format!("surface: {}, base: {}, pos: {}, pos1: {}", mecab["surface"], mecab["base"], mecab["pos"], mecab["pos1"]));
    }
    println!("");
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec31">31. 動詞</a></h3>

<p>動詞だけ抽出するので以下のコードで抽出し、表層形(<code>"surface"</code>)を取得する</p>

<p>```rust
fn verb(nodes: Vec&lt;HashMap&lt;String, String>>) &ndash;> Vec&lt;HashMap&lt;String, String>> {</p>

<pre><code>nodes.iter().filter(|m| m["pos"] == inspect(VERB)).map(|hm| hm.clone()).collect()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec32">32. 動詞の原形</a></h3>

<p>動詞だけ抽出するので上記のコードで抽出し、原形(<code>"base"</code>)を取得する</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec33">33. サ変名詞</a></h3>

<p>サ変接続を抽出</p>

<p>```rust
fn sa_noun(nodes: Vec&lt;HashMap&lt;String, String>>) &ndash;> Vec&lt;HashMap&lt;String, String>>{</p>

<pre><code>noun(nodes).iter().filter(|node| node["pos1"] == "サ変接続").map(|hm| hm.clone()).collect()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec34">34. 「AのB」</a></h3>

<p>「の」を挾んでいる名詞を抽出</p>

<p>```rust
fn between_noun(node: &amp;Node) &ndash;> Option<String> {</p>

<pre><code>let mecab = feature(node);
if mecab["surface"] == "の" &amp;&amp; mecab["pos"] == inspect(PARTICLE) &amp;&amp; mecab["pos1"] == "連体化" {
    let prev = feature(&amp;node.prev().unwrap());
    let next = feature(&amp;node.next().unwrap());

    Some(format!("{}{}{}", &amp;prev["surface"], &amp;mecab["surface"], &amp;next["surface"]))
} else {
    None
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec35">35. 名詞の連接</a></h3>

<p>連続した名詞を抽出するが、<code>mecab</code> でうまく関数化できなかったので割愛(あとでうかんだら追記)します。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec36">36. 単語の出現頻度</a></h3>

<p>単純に頻度をまとめ、 <code>sort</code> するとよい</p>

<p>```rust
fn word_histgram(nodes: Vec&lt;HashMap&lt;String, String>>) &ndash;> HashMap&lt;String, u64> {</p>

<pre><code>let mut results: HashMap&lt;String, u64&gt; = HashMap::new();
for node in nodes {
    let base = &amp;node["base"];
    *results.entry(base.to_string()).or_insert(0) += 1;
}
results
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec37">37. 頻度上位10語</a></h3>

<p>上記の結果より <code>.take(10)</code> するだけです。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec38">38. ヒストグラム</a></h3>

<p>37 と違いがわからずおわり。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec39">39. Zipfの法則</a></h3>

<p>単純に両対数グラフ化でおわり。</p>

<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP 100 Knock section 3]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/02/09/nlp-100-section-3/"/>
    <updated>2018-02-09T23:53:24+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/02/09/nlp-100-section-3</id>
    <content type="html"><![CDATA[<p>正規表現苦手なようでだいぶ時間がかかりました。</p>

<h2><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#ch3">第3章 正規表現</a></h2>

<p>正規表現ときいて楽勝やろと思ってた時期もあったんですが・・・</p>

<h3>準備</h3>

<p>この章では、gzファイルに入ったJSONをパースする必要があるのでさきにgzファイルから読み込むようにします。</p>

<p>```rust
fn read_gzip(path: String) &ndash;> Vec<String> {</p>

<pre><code>let mut file = File::open(path).unwrap();
let mut string = String::new();
Decoder::new(&amp;mut file).unwrap().read_to_string(&amp;mut string).unwrap();
string.split("\n").filter(|m| m.ne(&amp;"")).map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec20">20. JSONデータの読み込み</a></h3>

<p>こいつは、<a href="https://docs.serde.rs/serde/"><code>serde</code></a> の <a href="https://docs.serde.rs/serde_json/index.html"><code>serde_json</code></a> を利用して <a href="https://docs.serde.rs/serde_json/fn.from_str.html"><code>from_str</code></a> で読み込むだけです。</p>

<p>```rust
let v: Value = match serde_json::from_str(&amp;l.as_str()) {</p>

<pre><code> Ok(v) =&gt; v,
 Err(_) =&gt; { continue; },
</code></pre>

<p>};
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec21">21. カテゴリ名を含む行を抽出</a> &amp;&amp; <a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec22">22. カテゴリ名の抽出</a></h3>

<p><a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">早見表</a> を参考に <a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">Regex::captures</a> で抽出することで解決。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
extern crate serde_json;</p>

<p>use serde_json::Value;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let file = File::open(path).unwrap();
let lines = BufReader::new(file).lines();
let re = Regex::new(r"\[\[Category:.+\]\]").unwrap();
let cap = Regex::new(r"\[\[Category:(?P&lt;name&gt;.+?)(?:\|.*)*\]\]").unwrap();

for l in lines {
    let v: Value = serde_json::from_str(&amp;l.unwrap()).unwrap();

    let title = &amp;v["title"].as_str().unwrap().to_string();
    if keywords.contains(title) {
        for content in v["text"].as_str().unwrap().to_string().split("\n").filter(|m| re.is_match(m)) {
            for c in cap.captures_iter(content) {
                println!("{}", &amp;c["name"]);
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec23">23. セクション構造</a></h3>

<p>こちらは前節の問題と同様に解けばよいですが、<code>=の数 - 1</code> という罠があります。
```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
extern crate serde_json;</p>

<p>use serde_json::Value;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let file = File::open(path).unwrap();
let lines = BufReader::new(file).lines();
let re = Regex::new(r"(?P&lt;level&gt;==+)(?P&lt;headline&gt;.+?)(?:=+)").unwrap();

for l in lines {
    let v: Value = serde_json::from_str(&amp;l.unwrap()).unwrap();

    let title = &amp;v["title"].as_str().unwrap().to_string();
    if keywords.contains(title) {
        for content in v["text"].as_str().unwrap().to_string().split("\n").filter(|m| re.is_match(m)) {
            for caps in re.captures_iter(content) {
                println!("level: {}, headline: {}", &amp;caps["level"].len() - 1, &amp;caps["headline"]);
            }
        }
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec24">24. ファイル参照の抽出</a></h3>

<p>このあたりは問題ないとおもいます。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
extern crate serde_json;</p>

<p>use serde_json::Value;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let file = File::open(path).unwrap();
let lines = BufReader::new(file).lines();
let re = Regex::new(r"\[\[(File|ファイル):(?P&lt;filename&gt;.+?)(?:\|.*)*(?:\|.*)*\]\]").unwrap();

for l in lines {
    let v: Value = serde_json::from_str(&amp;l.unwrap()).unwrap();

    let title = &amp;v["title"].as_str().unwrap().to_string();
    if keywords.contains(title) {
        for content in v["text"].as_str().unwrap().to_string().split("\n").filter(|m| re.is_match(m)) {
            for caps in re.captures_iter(content) {
                println!("filename: {}", &amp;caps["filename"]);
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec25">25. テンプレートの抽出</a></h3>

<p>こいつは大変でしたので参考サイト<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> を参考に以下の正規表現でとりあえず抽出しています。</p>

<p><code>rust
let re = Regex::new(r"(?ms)(?:^\{\{基礎情報.*?$)(?P&lt;dict&gt;.+?)(?:^\}\}$)").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec26">26. 強調マークアップの除去</a></h3>

<p>こちらも同様に参考サイト<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を参考に以下の正規表現で</p>

<p><code>rust
let strong = Regex::new(r"'{2,5}").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec27">27. 内部リンクの除去</a></h3>

<p>こちらも同様に参考サイト<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を参考に以下の正規表現で
<code>rust
let link = Regex::new(r"(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec28">28. MediaWikiマークアップの除去</a></h3>

<p>どうよう<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> (ry</p>

<p><code>
let link = Regex::new(r"(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})").unwrap();
let lang = Regex::new(r"(?:\{\{lang\|.+?\|)(?P&lt;lang&gt;.+?)(?:\}\})").unwrap();
let markup = Regex::new(r"&lt;/*.+?&gt;").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec29">29. 国旗画像のURLを取得する</a></h3>

<p>こちらもさんこおおう<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>にしてますが、主にURL部分だけです。
こちらは <a href="https://hyper.rs/">Hyper</a> を利用することで解決しています。</p>

<p>```rust
extern crate futures;
extern crate hyper;
extern crate hyper_tls;
extern crate libflate;
extern crate regex;
extern crate serde_json;
extern crate tokio_core;</p>

<p>use futures::{Future, Stream};
use hyper::Client;
use hyper_tls::HttpsConnector;
use libflate::gzip::Decoder;
use regex::Regex;
use serde_json::Value;
use std::collections::HashMap;
use std::env;
use std::fs::File;
use std::io::Read;
use tokio_core::reactor::Core;</p>

<p>fn get_image(query: String) &ndash;> String {</p>

<pre><code>let re = Regex::new(r" ").unwrap();
let uri = format!("https://en.wikipedia.org/w/api.php?action=query&amp;titles=File:{}&amp;format=json&amp;prop=imageinfo&amp;iiprop=url", re.replace_all(&amp;query, "%20"));
let uri = uri.parse().unwrap();
let mut core = Core::new().unwrap();
let handle = core.handle();
let client = Client::configure()
    .connector(HttpsConnector::new(4, &amp;handle).unwrap())
    .build(&amp;handle);
let work = client.get(uri).and_then(|res| {
    res.body().concat2().and_then(move |body| {
        let v: Value = serde_json::from_slice(&amp;body).unwrap();
        let page_ids = v["query"]["pages"].as_object().unwrap().keys().map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
        let imageinfo = &amp;v["query"]["pages"][&amp;page_ids[0]]["imageinfo"];
        let r = format!("{}", imageinfo[0]["url"].as_str().unwrap());
        Ok(r)
    })
});
core.run(work).unwrap()
</code></pre>

<p>}</p>

<p>fn read_gzip(path: String) &ndash;> Vec<String> {</p>

<pre><code>let mut file = File::open(path).unwrap();
let mut string = String::new();
Decoder::new(&amp;mut file).unwrap().read_to_string(&amp;mut string).unwrap();
string.split("\n").filter(|m| m.ne(&amp;"")).map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;()
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let lines = read_gzip(path.to_string());
let re = Regex::new(r"(?ms)(?:^\{\{基礎情報.*?$)(?P&lt;dict&gt;.+?)(?:^\}\}$)").unwrap();
let bar_hat = Regex::new(r"(?ms)(?:^\|)").unwrap();
let dict = Regex::new(r"(?P&lt;key&gt;.+?)\s*=\s*(?P&lt;val&gt;.+)").unwrap();
let media = Regex::new(r"\[\[(File|ファイル):(?P&lt;filename&gt;.+?)(?:\|.*)*(?:\|.*)*\]\]").unwrap();
let strong = Regex::new(r"'{2,5}").unwrap();
let link = Regex::new(r"(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})").unwrap();
let lang = Regex::new(r"(?:\{\{lang\|.+?\|)(?P&lt;lang&gt;.+?)(?:\}\})").unwrap();
let markup = Regex::new(r"&lt;/*.+?&gt;").unwrap();

for l in lines {
    let v: Value = match serde_json::from_str(&amp;l.as_str()) {
        Ok(v) =&gt; v,
        Err(_) =&gt; { continue; },
    };
    let text: String = match v["text"].as_str() {
        Some(x) =&gt; x.to_string(),
        None =&gt; { continue; },
    };
    let title: String = match v["title"].as_str() {
        Some(x) =&gt; x.to_string(),
        None =&gt; { continue; },
    };

    if keywords.contains(&amp;title) {
        let mut results: HashMap&lt;String, String&gt; = HashMap::new();
        let re: String = match re.captures(&amp;text) {
            Some(caps) =&gt; caps["dict"].to_string(),
            None =&gt; {
                println!("cannot capture dict!!");
                continue;
            },
        };
        for line in bar_hat.split(&amp;re).filter(|f| f.ne(&amp;"")).map(|m| m.to_string()) {
            let line = line.replace("\n", "");
            let dict = match dict.captures(&amp;line) {
                Some(x) =&gt; x,
                None =&gt; {continue;},
            };

            let val = dict["val"].to_string();
            let key = dict["key"].to_string();
            let file: String = media.replace_all(&amp;val, "$filename").trim().to_string();
            let strong: String = strong.replace_all(&amp;file, "").trim().to_string();
            let link: String = link.replace_all(&amp;strong, "$link").trim().to_string();
            let markup: String = markup.replace_all(&amp;link, "").trim().to_string();
            let val: String = match key.as_ref() {
                "国旗画像" =&gt; get_image(markup.to_string()),
                _ =&gt; lang.replace_all(&amp;markup, "$lang").trim().to_string(),
            };
            results.insert(key, val);
        }
        for (k, v) in results {
            println!("{}: {}", k, v);
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>とりあえず3章まで終わらせましたので形態素解析へと進みたいとおもいます(思っているだけ)</p>

<h2>参考資料</h2>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>素人の言語処理100本ノック:25, segavvy, <a href="https://qiita.com/segavvy/items/e402ad0a5b0f52453d7f">https://qiita.com/segavvy/items/e402ad0a5b0f52453d7f</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>素人の言語処理100本ノック:26, segavvy, <a href="https://qiita.com/segavvy/items/f6d0f3d6eee5acc33c58">https://qiita.com/segavvy/items/f6d0f3d6eee5acc33c58</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>素人の言語処理100本ノック:27, segavvy, <a href="https://qiita.com/segavvy/items/9a8137f045852bc299d6">https://qiita.com/segavvy/items/9a8137f045852bc299d6</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>素人の言語処理100本ノック:28, segavvy, <a href="https://qiita.com/segavvy/items/8c4567ec1124320d3354">https://qiita.com/segavvy/items/8c4567ec1124320d3354</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>素人の言語処理100本ノック:29, segavvy, <a href="https://qiita.com/segavvy/items/fc7257012d8a590185e5">https://qiita.com/segavvy/items/fc7257012d8a590185e5</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
