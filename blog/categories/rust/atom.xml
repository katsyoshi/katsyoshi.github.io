<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rust | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-01-19T20:54:18+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NLP100本ノック section 1 part 2]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2/"/>
    <updated>2018-01-19T20:05:49+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2</id>
    <content type="html"><![CDATA[<p>前回、<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> の01までやったので02からやっていきます。</p>

<h2><code>extern crate nlp100;</code></h2>

<p>ってやれるように <a href="https://github.com/katsyoshi/zatsu/tree/master/rust/nlp100"><code>Cargo</code></a> を作成
<code>
cargo new nlp100
</code></p>

<h3>02. 「パトカー」+「タクシー」=「パタトクカシーー」</h3>

<p>これはムズカシイので素直に <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip"><code>zip</code></a> を利用する</p>

<p>```rust
fn concat(t: (Vec<char>, Vec<char>)) {</p>

<pre><code>let (f, s) = t;
let mut r = String::new();

for (x, y) in f.iter().zip(s.iter()) {
    r.push_str(&amp;format!("{}{}", x, y));
}
println!("{}", r);
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let p: Vec&lt;char&gt; = String::from("パトカー").chars().collect();
let t: Vec&lt;char&gt; = String::from("タクシー").chars().collect();
let f = (p, t);
concat(f);
</code></pre>

<p>}
```</p>

<h3>03. 円周率</h3>

<p>この問題は思い切り勘違いしてたので、「これのどこが円周率なの？」って思ってました。こいつは <a href="https://doc.rust-lang.org/regex/regex/index.html"><code>Regex</code></a> を用いて単語毎に分解、単語毎に文字数数えて解決してます。</p>

<p>```rust
fn char_count_list(w: &amp;str) &ndash;> Vec<usize> {</p>

<pre><code>Regex::new(r"\W+").unwrap().split(w).map(|m| m.len()).collect()
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let pi = char_count_list("Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.");
println!("{:?}", pi);
</code></pre>

<p>}
```</p>

<h3>04. 元素記号</h3>

<p>これは、英語版「水兵リーベー僕の船」ですので条件に合うときだけ1文字に変更します。</p>

<p>```rust
use std::collections::HashMap;</p>

<p>fn main() {</p>

<pre><code>let atomic_words: Vec&lt;&amp;str&gt; = "Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.".split(' ').collect();
let mut atomic_table = HashMap::new();
for (i, a) in atomic_words.iter().enumerate() {
    let chars = a.chars().map(|v| v.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
    let r = match i {
        0 | 4...8 | 14...15 | 18 =&gt; chars[0].to_string(),
        _ =&gt; chars[0..2].join(""),
    };
    atomic_table.insert(r, i + 1);
}

for (k, v) in &amp;atomic_table {
    println!("{}: {}", k, v);
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>やっぱり難しいのを実感</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rustful web]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/06/04/rustful-web/"/>
    <updated>2017-06-04T23:17:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/06/04/rustful-web</id>
    <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org/ja-JP/">rust</a> で Web Application をつくろうと思って <a href="https://github.com/Ogeon/rustful">rustful</a> を使ってやってみてたりした。</p>

<p>ドキュメントと利用しているバージョンのコードが異なり、必要なモジュールが読み込めなかったり、関数の引数が異なったりしてうごかねぇってなったのでHEADを使うことで解決。</p>

<h2>🍻</h2>

<p>とりあえずいつものメンバーで🍻にいってきた。浅草のカンピオンエールという店でのんでそのあと隣の店でお好み焼きをたべてた。お好み焼き屋のあとは河原まであるて吾妻橋からみえる
やつをながめながらビールのんでた</p>
]]></content>
  </entry>
  
</feed>
