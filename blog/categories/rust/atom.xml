<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rust | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-01-27T20:27:37+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NLP100ノック第2章]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/27/nlp-100-section-2/"/>
    <updated>2018-01-27T19:46:23+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/27/nlp-100-section-2</id>
    <content type="html"><![CDATA[<p>第2章を一通り終えたので書きます。</p>

<h3>10. 行数のカウント</h3>

<p>タイトルのままです。 <code>Rust</code> では <a href="https://doc.rust-lang.org/std/str/struct.Lines.html"><code>std::str::Lines</code></a> で <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count"><code>count()</code></a> がありますので利用しておわりです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();

args.next();
for path in args {
    let f = File::open(path).unwrap();
    let br = BufReader::new(f);

    println!("{}", br.lines().count());
}
</code></pre>

<p>}
```</p>

<h3>11. タブをスペースに置換</h3>

<p>コチラも、<a href="https://doc.rust-lang.org/std/string/struct.String.html#method.replace"><code>std::string::String.replace()</code></a> 利用するだけです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();
args.next();
for path in args {
    let file = File::open(path).unwrap();
    let reader = BufReader::new(file);

    for line in reader.lines() {
        println!("{}", line.unwrap().replace("\t", " "));
    }
}
</code></pre>

<p>}
```</p>

<h3>12. 1列目をcol1.txtに,2列目をcol2.txtに保存</h3>

<p>こちらは単純にファイルに書き込むのと、分割ができれば問題ないです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::{BufReader, BufWriter, Write};
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();

args.next();
for path in args {
    let f = path.clone().replace(".txt", "");
    let s = path.clone().replace(".txt", "");
    let file = File::open(path).unwrap();
    let br = BufReader::new(file);
    let mut first_column = BufWriter::new(File::create(format!("{}_col1.txt", f)).unwrap());
    let mut second_column = BufWriter::new(File::create(format!("{}_col2.txt", s)).unwrap());

    for line in br.lines() {
        let words = line.unwrap().split("\t").map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
        first_column.write(format!("{}\n", words[0]).as_bytes()).unwrap();
        second_column.write(format!("{}\n", words[1]).as_bytes()).unwrap();
    }
}
</code></pre>

<p>}
```</p>

<h3>13. col1.txtとcol2.txtをマージ</h3>

<p>こちらは以前利用した、<code>zip</code> があれば問題ないです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::{BufReader, BufWriter, Write};
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();
if args.len() &lt; 2 { panic!("col1.txt col2.txt"); }

args.next();

let first = args.next().unwrap();
let second = args.next().unwrap();

let fr = BufReader::new(File::open(first).unwrap()).lines().map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;();

let sr = BufReader::new(File::open(second).unwrap()).lines().map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
let mut merge_file =
    BufWriter::new(File::create("merge.txt".to_string()).unwrap());

for (x, y) in fr.iter().zip(&amp;sr) {
    merge_file.write(format!("{}\t{}\n", x, y).as_bytes()).unwrap();
}
</code></pre>

<p>}
```</p>

<h3>14. 先頭からN行を出力</h3>

<p><code>head</code> コマンドですので <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take"><code>std::iter::Iterator.take()</code></a> を利用するだけです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args = env::args().skip(1).collect::&lt;Vec&lt;String&gt;&gt;();
let file = File::open(&amp;args[0]).unwrap();

let br = BufReader::new(file).lines().take((&amp;args[1]).to_string().parse::&lt;usize&gt;().unwrap());

for line in br.map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;() {
    println!("{}", line);
}
</code></pre>

<p>}
```</p>

<h3>15. 末尾のN行を出力</h3>

<p><code>tail</code> コマンドです。こちらは <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip"><code>std::iter::Iterator.skip()</code></a> を利用してやるだけです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args = env::args().skip(1).collect::&lt;Vec&lt;String&gt;&gt;();
let file = File::open(&amp;args[0]).unwrap();
let takes = (&amp;args[1]).to_string().parse::&lt;usize&gt;().unwrap();
let br = BufReader::new(&amp;file).lines();
let skips = br.count() - takes;
let file = File::open(&amp;args[0]).unwrap();
let lines = BufReader::new(&amp;file).lines().skip(skips);

for line in lines {
    println!("{}", line.unwrap());
}
</code></pre>

<p>}
```</p>

<h3>16. ファイルをN分割する</h3>

<p>こちらの実装は素朴な実装とし、行数で分割しております。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::BufWriter;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let file = File::open(path).unwrap();
let count: usize = BufReader::new(file).lines().count();
let div: usize = (&amp;args[1]).to_string().parse().unwrap();
let file = File::open(path).unwrap();
let mut br = BufReader::new(file).lines();

let t = (count as f64/ div as f64).ceil() as usize;

for x in 1 .. div + 1 {
    let l = br.by_ref();
    let file = File::create(format!("{}.txt",x)).unwrap();
    let mut bw = BufWriter::new(file);
    for y in l.take(t).map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;() {
        let a = format!("{}\n", y);
        bw.write(a.as_bytes()).unwrap();
        println!("{}: {}", x, y);
    }
}
</code></pre>

<p>}
```</p>

<h3>17. 1列目の文字列の異なり</h3>

<p>ファイル読込 + <code>HashSet</code> で実装</p>

<p>```rust
use std::collections::HashSet;
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let file = File::open(path).unwrap();
let re = Regex::new(r"\W+").unwrap();
let hs = BufReader::new(file).lines().map(|m|{
    let l = m.unwrap().clone();
    re.split(&amp;l).next().unwrap().to_string()
}).collect::&lt;HashSet&lt;_&gt;&gt;();

for s in hs {
    println!("{}", s);
}
</code></pre>

<p>}
```</p>

<h3>18. 各行を3コラム目の数値の降順にソート</h3>

<p>こちら、実数の比較を行う必要があり、すこし <a href="https://gist.github.com/katsyoshi/c76c2f782b3edaeff1d328a84dd582a0">めんどう</a> でした。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let file = File::open(path).unwrap();
let mut val = BufReader::new(file).lines().map(|m| m.unwrap().split("\t").skip(2).next().unwrap().parse::&lt;f64&gt;().unwrap()).collect::&lt;Vec&lt;f64&gt;&gt;();

val.sort_by(|a, b| a.partial_cmp(b).unwrap());
for v in val { println!("{}", v); }
</code></pre>

<p>}
```</p>

<h3>19. 各行の1コラム目の文字列の出現頻度を求め,出現頻度の高い順に並べる</h3>

<p>18の問題を更にカウントできるように変更した。</p>

<p>```rust
use std::collections::HashMap;
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>enum Value {</p>

<pre><code>USIZE(usize),
NONE(()),
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let args = env::args().skip(1).collect::&lt;Vec&lt;String&gt;&gt;();
let file = File::open(&amp;args[0]).unwrap();
let mut words: HashMap&lt;String, usize&gt; = HashMap::new();
for m in BufReader::new(&amp;file).lines() {
    let w = m.unwrap().to_string().split("\t").next().unwrap().to_string();
    let v = match words.get(&amp;w) {
        None =&gt; 1,
        Some(n) =&gt; n + 1,
    };
    words.insert(w, v);
}

let mut vars: Vec&lt;(&amp;String, &amp;usize)&gt; = words.iter().collect();
vars.sort_by(|a, b| b.1.cmp(a.1));
for (w, v) in vars {println!("{}: {}", w, v);}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>この章は慣れてきたのか比較的楽に解けています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nlp 100 section 1 part 3]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/21/nlp-100-section-1-part-3/"/>
    <updated>2018-01-21T10:23:02+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/21/nlp-100-section-1-part-3</id>
    <content type="html"><![CDATA[<p>前回、<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> の04までやったので05からやります。</p>

<h3>05. ngram</h3>

<p>こいつはbi-gramを単語、文字二つを実装するひつようがあります</p>

<p>```rust
fn bigram(words: Vec<String>) &ndash;> Vec<String> {</p>

<pre><code>let mut bi: Vec&lt;String&gt; = Vec::new();
let mut i = 0;

loop {
    let w = i + 2;
    if w &gt; words.len() { break; }
    bi.push(words[i..w].join(""));
    i += 1;
}
bi
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let words = "I am an NLPer".split(' ').map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
println!("\n===word bi-gram");
for word in bigram(words) {
    println!("{}", word);
}

let words = "I am an NLPer".chars().map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
for word in bigram(words) {
    println!("\"{}\"", word);
}
</code></pre>

<p>}
```</p>

<h3>06. 集合</h3>

<p>これは単純に <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html"><code>HashSet</code></a> を利用して、解決します。<code>HashSet</code> の差集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.difference"><code>difference</code></a> を利用し、和集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.union"><code>union</code></a> を、積集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.intersection"><code>intersection</code></a> をそれぞれ利用します。また、特定の要素が含有していることを判定するには <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.contains"><code>contains</code></a> を利用して判定します。</p>

<p>```rust
use std::collections::HashSet;</p>

<p>fn bigram(words: Vec<String>) &ndash;> HashSet<String> {</p>

<pre><code>let mut bi: HashSet&lt;String&gt; = HashSet::new();
let mut i = 0;

loop {
    let w = i + 2;
    if w &gt; words.len() { break; }
    bi.insert(words[i..w].join(""));
    i += 1;
}
bi
</code></pre>

<p>}</p>

<p>fn chars(s: String) &ndash;> Vec<String> {</p>

<pre><code>s.chars().map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;()
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let s1 = bigram(chars("paraparaparadise".to_string()));
let s2 = bigram(chars("paragraph".to_string()));

println!("===UNION===");
for x in s1.union(&amp;s2) {
    println!("{}", x);
}

println!("\n===DIFF===");
println!("===s1 - s2===");
for x in s1.difference(&amp;s2) {
    println!("{}", x);
}
println!("===s2 - s1===");
for x in s2.difference(&amp;s1) {
    println!("{}", x);
}

println!("\n===intersection===");
for x in s1.intersection(&amp;s2) {
    println!("{}", x);
}

println!("\n===INCLUDE===");
let se = "se";
println!("s1: {}", s1.contains(se));
println!("s2: {}", s2.contains(se));
</code></pre>

<p>}
```</p>

<h3>07. テンプレートによる文生成</h3>

<p>これは <a href=""><code>format!</code></a> を使えば終りです。(問題意図ほんとこれなんか？)</p>

<p>```rust
fn string_template(x: i8, y: &amp;str, z: f32) &ndash;> String {</p>

<pre><code>format!("{}時の{}は{}", x, y, z)
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let string = string_template(12, "気温", 22.5);
println!("{}", string);
</code></pre>

<p>}
```</p>

<h3>08. 暗号文</h3>

<p>ASCII以外の判定と、小文字のASCIIが判れば簡単です。</p>

<p>```rust
use std::ascii::AsciiExt;</p>

<p>fn cipher(src: &amp;str) &ndash;> String {</p>

<pre><code>let chars = src.chars().collect::&lt;Vec&lt;char&gt;&gt;();
let mut result: String = String::new();
for c in chars {
    let s = if c.is_ascii() {
        let var: u8 = c as u8;
        match var {
            97 ... 122 =&gt; (219 - (var)) as char,
            _ =&gt; c,
        }
    } else {
        c
    };
    result.push(s);
}
result
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>println!("{}", cipher("Today is fine."));
println!("{}", cipher(&amp;cipher("Today is fine.")));
</code></pre>

<p>}
```</p>

<h3>09. Typoglycemia</h3>

<p>こちらは、 <code>Vec</code> に <code>shuffle</code> 的なものがないので、<a href="https://doc.rust-lang.org/rand"><code>rand</code></a> を呼び出して <a href="https://doc.rust-lang.org/rand/rand/trait.Rng.html#method.shuffle"><code>shuffle</code></a> を使います。</p>

<p>```rust
extern crate rand;
use rand::Rng;</p>

<p>fn words(src: &amp;str) &ndash;> Vec<String> {</p>

<pre><code>let mut result: Vec&lt;String&gt; = Vec::new();

for s in src.split(' ').collect::&lt;Vec&lt;&amp;str&gt;&gt;() {
    let mut chars = s.chars().collect::&lt;Vec&lt;char&gt;&gt;();
    if chars.len() &lt; 5 {
        result.push(s.to_string());
    } else {
        let last_index = chars.len() - 1;
        let first_char = chars[0];
        let last_char = chars[last_index];

        let rand_chars = &amp;mut chars[1..last_index];
        shuffle(rand_chars);
        let mut rand_string = String::new();
        for c in rand_chars { rand_string.push(*c) }
        result.push(format!("{}{}{}", first_char, rand_string, last_char));
    }
}
result
</code></pre>

<p>}</p>

<p>fn shuffle(chars: &amp;mut [char]) {</p>

<pre><code>rand::thread_rng().shuffle(chars);
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let paragraph = "I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .";

for w in words(paragraph) {
    println!("{}", w);
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>ということで <code>Rust</code> で言語処理100本ノック1章をやってみました。
最近 <code>Ruby</code> しか書いていなかったので、新鮮で楽しいですね <code>Rust</code> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100本ノック section 1 part 2]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2/"/>
    <updated>2018-01-19T20:05:49+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2</id>
    <content type="html"><![CDATA[<p>前回、<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> の01までやったので02からやっていきます。</p>

<h2><code>extern crate nlp100;</code></h2>

<p>ってやれるように <a href="https://github.com/katsyoshi/zatsu/tree/master/rust/nlp100"><code>Cargo</code></a> を作成
<code>
cargo new nlp100
</code></p>

<h3>02. 「パトカー」+「タクシー」=「パタトクカシーー」</h3>

<p>これはムズカシイので素直に <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip"><code>zip</code></a> を利用する</p>

<p>```rust
fn concat(t: (Vec<char>, Vec<char>)) {</p>

<pre><code>let (f, s) = t;
let mut r = String::new();

for (x, y) in f.iter().zip(s.iter()) {
    r.push_str(&amp;format!("{}{}", x, y));
}
println!("{}", r);
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let p: Vec&lt;char&gt; = String::from("パトカー").chars().collect();
let t: Vec&lt;char&gt; = String::from("タクシー").chars().collect();
let f = (p, t);
concat(f);
</code></pre>

<p>}
```</p>

<h3>03. 円周率</h3>

<p>この問題は思い切り勘違いしてたので、「これのどこが円周率なの？」って思ってました。こいつは <a href="https://doc.rust-lang.org/regex/regex/index.html"><code>Regex</code></a> を用いて単語毎に分解、単語毎に文字数数えて解決してます。</p>

<p>```rust
fn char_count_list(w: &amp;str) &ndash;> Vec<usize> {</p>

<pre><code>Regex::new(r"\W+").unwrap().split(w).map(|m| m.len()).collect()
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let pi = char_count_list("Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.");
println!("{:?}", pi);
</code></pre>

<p>}
```</p>

<h3>04. 元素記号</h3>

<p>これは、英語版「水兵リーベー僕の船」ですので条件に合うときだけ1文字に変更します。</p>

<p>```rust
use std::collections::HashMap;</p>

<p>fn main() {</p>

<pre><code>let atomic_words: Vec&lt;&amp;str&gt; = "Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.".split(' ').collect();
let mut atomic_table = HashMap::new();
for (i, a) in atomic_words.iter().enumerate() {
    let chars = a.chars().map(|v| v.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
    let r = match i {
        0 | 4...8 | 14...15 | 18 =&gt; chars[0].to_string(),
        _ =&gt; chars[0..2].join(""),
    };
    atomic_table.insert(r, i + 1);
}

for (k, v) in &amp;atomic_table {
    println!("{}: {}", k, v);
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>やっぱり難しいのを実感</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rustful web]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/06/04/rustful-web/"/>
    <updated>2017-06-04T23:17:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/06/04/rustful-web</id>
    <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org/ja-JP/">rust</a> で Web Application をつくろうと思って <a href="https://github.com/Ogeon/rustful">rustful</a> を使ってやってみてたりした。</p>

<p>ドキュメントと利用しているバージョンのコードが異なり、必要なモジュールが読み込めなかったり、関数の引数が異なったりしてうごかねぇってなったのでHEADを使うことで解決。</p>

<h2>🍻</h2>

<p>とりあえずいつものメンバーで🍻にいってきた。浅草のカンピオンエールという店でのんでそのあと隣の店でお好み焼きをたべてた。お好み焼き屋のあとは河原まであるて吾妻橋からみえる
やつをながめながらビールのんでた</p>
]]></content>
  </entry>
  
</feed>
