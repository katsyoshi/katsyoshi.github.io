<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-06-06T18:57:25+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2018]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018/"/>
    <updated>2018-06-03T23:44:28+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018</id>
    <content type="html"><![CDATA[<p>RubyKaigi2018 に行ってきた</p>

<h2>1日目</h2>

<p>1日目は、 ずっと会場Aにいました。</p>

<ol>
<li>Matz: <a href="http://rubykaigi.org/2018/presentations/yukihiro_matz.html#may31">Keynote</a></li>
<li>Aaron Patterson: <a href="http://rubykaigi.org/2018/presentations/tenderlove.html#may31">Analyzing and Reducing Ruby Memory Usage</a></li>
<li>Kenta Murata, and Yusaku Hatanaka: <a href="http://rubykaigi.org/2018/presentations/mrkn.html#may31">Deep Learning Programming on Ruby</a></li>
<li>Bozhidar Batsov: <a href="http://rubykaigi.org/2018/presentations/bbatsov.html#may31">All About RuboCop</a></li>
<li>Naotoshi Seo: <a href="http://rubykaigi.org/2018/presentations/sonots.html#may31">Fast Numerical Computing and Deep Learning in Ruby with Cumo</a></li>
<li>Emma Haruka Iwao: <a href="http://rubykaigi.org/2018/presentations/Yuryu.html#may31">Exploring Internal Ruby Through C Extensions</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/lt/">Lightning Talks</a></li>
</ol>


<p>この日、今年の RubyKaigi 2018 で最も楽しみにしてたのが <code>rubocop</code> の作者のトークで、彼のプロダクト(<code>rubocop</code>, <code>flycheck-ruby</code>)を利用してる身としては非常に楽しみでした。
DLと数値計算のやつは進捗が聞けてよかったっていうのとDeep Learningに関していうと難しいのかなあという感想が…
Haruka さんのやつは、やっぱり今の実装十分に速いってのがわかって、これ以上速くするには非常に大変だなってのがよかったですね。
LTはどれもよくて <code>rib</code> も面白いし、 csvの高速化の話が特に好きでした。</p>

<h2>2日目</h2>

<p>2日目もほとんどA会場できいていたのと、GitHubの電源スペースにいました。</p>

<ol>
<li>Kouhei Sutou: <a href="http://rubykaigi.org/2018/presentations/ktou.html#jun01">My way with Ruby</a></li>
<li>Kouichi Sasada: <a href="http://rubykaigi.org/2018/presentations/ko1.html#jun01">Guild Prototype</a></li>
<li>Yuichiro Kaneko: <a href="http://rubykaigi.org/2018/presentations/spikeolaf.html#jun01">RNode with code positions</a></li>
<li>Yusuke Endo: <a href="http://rubykaigi.org/2018/presentations/mametter.html#jun01">Type Profiler: An analysis to guess type signatures</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/rubylangorg.html#jun01">Ruby Commiters vs. the World</a></li>
</ol>


<p>この日のトークは特に楽しみにしていたのはなかったのですが、ここ最近毎年聞いていた <a href="http://rubykaigi.org/2018/presentations/v0dro.html#jun01">@v0dro</a> の発表を聞いていなかった。
金子さんの発表がわりとたのしく聞けて、「あーやっぱり型のはなしは興味ないな」って感じで遠藤さんの発表聞いてました。
この日の懇親会で飲みすぎた。</p>

<h2>3日目</h2>

<p>3日目はパフォーマンス改善を中心として聞いてました。</p>

<ol>
<li>Benoit Daloze: <a href="http://rubykaigi.org/2018/presentations/eregontp.html#jun02">Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby</a></li>
<li>Takashi Kokubun: <a href="http://rubykaigi.org/2018/presentations/k0kubun.html#jun02">The Method JIT Compiler for Ruby 2.6</a></li>
<li>Takeshi Watanabe: <a href="http://rubykaigi.org/2018/presentations/take-cheeze.html#jun02">LuaJIT as a Ruby backend.</a></li>
<li>Prasun Anand: <a href="http://rubykaigi.org/2018/presentations/prasun_anand.html#jun02">High Performance GPU computing with Ruby</a></li>
<li>Vladimir Makarov: <a href="http://rubykaigi.org/2018/presentations/vnmakarov.html#jun02">Three Ruby performance projects</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/tric.html#jun02">TRICK 2018 (FINAL)</a></li>
</ol>


<p>TuffleRubyとはやくてとてもよさそう。
国分さん、Vladimirの話はいつもどおりで安心した。</p>

<p>TRICK、どうしてこんなプログラムが思いつくのかさっぱりわからんがとにかく凄い以上の感想がうかんでこない。</p>

<h2>おわり</h2>

<p>RubyKaigi 2018に行ってきてたいへんたのしいイベントでした。</p>

<p>(型のはなしはやはり興味がないというかまだまだ理解が浅いのでTaPL読むべきだな)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API キーが凍結されてら]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/05/06/teokure/"/>
    <updated>2018-05-06T23:33:23+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/05/06/teokure</id>
    <content type="html"><![CDATA[<p>mikutter の <a href="http://mikutter.hatenablog.com/entry/2018/05/05/164014">Twitter API キーが凍結された</a> ようです。</p>

<h2>回避方法</h2>

<p>とりあず、twitter の <a href="https://developer.twitter.com/en.html">開発者ページ</a> から API キーを生成してください。
あとは以下の様に編集してください</p>

<p>```diff
diff &mdash;git a/Gemfile b/Gemfile
index 0a88a191..cb48cd4f 100644
&mdash;&ndash; a/Gemfile
+++ b/Gemfile
@@ -21,6 +21,7 @@ group :default do
   gem &lsquo;pluggaloid&rsquo;, &lsquo;>= 1.1.1&rsquo;, &lsquo;&lt; 2.0&rsquo;
   gem &lsquo;delayer-deferred&rsquo;, &lsquo;>= 2.0&rsquo;, &lsquo;&lt; 3.0&rsquo;
   gem &lsquo;twitter-text&rsquo;, &lsquo;>= 2.1.0&rsquo;
+  gem &lsquo;dotenv&rsquo;
 end</p>

<p> group :test do
diff &mdash;git a/core/config.rb b/core/config.rb
index 6e3d95ba..455e3083 100644
&mdash;&ndash; a/core/config.rb
+++ b/core/config.rb
@@ -14,8 +14,8 @@ module CHIConfig
   ACRO = &ldquo;mikutter&rdquo;</p>

<p>   # 下の２行は馬鹿にしか見えない
&ndash;  TWITTER_CONSUMER_KEY = &ldquo;AmDS1hCCXWstbss5624kVw&rdquo;
&ndash;  TWITTER_CONSUMER_SECRET = &ldquo;KOPOooopg9Scu7gJUBHBWjwkXz9xgPJxnhnhO55VQ&rdquo;
+  TWITTER_CONSUMER_KEY = ENV[&ldquo;TWITTER_CONSUMER_KEY&rdquo;]
+  TWITTER_CONSUMER_SECRET = ENV[&ldquo;TWITTER_SECRET_KEY&rdquo;]
   TWITTER_AUTHENTICATE_REVISION = 1</p>

<p>   # pidファイル
diff &mdash;git a/mikutter.rb b/mikutter.rb
index da302ca1..94025817 100755
&mdash;&ndash; a/mikutter.rb
+++ b/mikutter.rb
@@ -32,6 +32,8 @@ require &lsquo;benchmark&rsquo;
 require &lsquo;webrick&rsquo;
 require &lsquo;thread&rsquo;
 require &lsquo;fileutils&rsquo;
+require &lsquo;dotenv&rsquo;
+Dotenv.load(&ldquo;.env&rdquo;)</p>

<p> require_relative &lsquo;core/utils&rsquo;
```</p>

<p>あとは環境変数<code>TWITTER_CONSUMER_KEY</code> と <code>TWITTER_SECRET_KEY</code> を設定してあげると起動できるようになります</p>

<h3>dotenv</h3>

<p>環境変数を指定して毎回起動したくない、とか <code>.bashrc</code> に書きたくない、とかある場合は
<a href="https://github.com/bkeepers/dotenv"><code>dotenv.gem</code> </a> を使うことで良いかんじに読みとってくれるようになります。
つかいかたは <code>Dotenv.load(file_name)</code> で <code>file_name</code> にあるファイルのなかに環境変数を書けばよいです。</p>

<h2>おわり</h2>

<p>おわり。
別に <code>dotenv.gem</code> いらんなこれ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100 Knock Section IV]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/02/26/nlp-100-section-4/"/>
    <updated>2018-02-26T23:45:52+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/02/26/nlp-100-section-4</id>
    <content type="html"><![CDATA[<p>NLP100本ノック第4節おわりましたのでまとめます</p>

<h2><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#ch4">第4章 形態素解析</a></h2>

<p>形態素解析やからむずいやろとおもってた</p>

<h3>準備</h3>

<p>この章では、形態素解析済ファイルを作成する必要がありますが、毎回対象ファイルをダウンロード、解析して解いています。
ここではいつもどおり <code>HashMap</code> を利用するため <code>ANALYZED_MECAB_KEYS</code> を作成してこれをキーにします。
またよく利用する品詞を <code>enum</code> で定義しておき、変換関数 <code>inspect</code> を作成します。</p>

<p>```rust
const ANALYZED_MECAB_KEYS: [&str; 9] = [&ldquo;pos&rdquo;, &ldquo;pos1&rdquo;, &ldquo;pos2&rdquo;, &ldquo;pos3&rdquo;, &ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;base&rdquo;, &ldquo;read&rdquo;, &ldquo;speech&rdquo;];
enum PartOfSpeech {</p>

<pre><code>VERB,
NOUN,
PARTICLE,
</code></pre>

<p>}</p>

<p>use PartOfSpeech::*;</p>

<p>fn inspect(val: PartOfSpeech) &ndash;> String {</p>

<pre><code>match val {
    VERB =&gt; "動詞",
    NOUN =&gt; "名詞",
    PARTICLE =&gt; "助詞",
}.to_string()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec30">30. 形態素解析結果の読み込み</a></h3>

<p><code>Map</code> を使えと指定があるので素直に利用します</p>

<p>```rust
fn feature(node: &amp;Node) &ndash;> HashMap&lt;String, String> {</p>

<pre><code>let mut h: HashMap&lt;String, String&gt; = HashMap::new();
let surface: String = (&amp;(node.surface)[..node.length as usize]).to_string();
h.insert("surface".to_string(), surface);
let values: Vec&lt;String&gt; = node.feature.split(",").map(|m| m.to_string()).collect();
for (a, b) in ANALYZED_MECAB_KEYS.iter().zip(values.iter()) {
    h.insert(a.to_string(), b.to_string());
}
h
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let url = "http://www.cl.ecei.tohoku.ac.jp/nlp100/data/neko.txt".to_string();
let neco: Vec&lt;String&gt; = NLP100::get(url).split("\n").filter(|f| f.ne(&amp;"")).map(|m| m.to_string()).collect();
let mut morph = Vec::new();

for line in neco {
    let mut tagger: Tagger = mecab::Tagger::new("");
    let nodes: Node = tagger.parse_to_node(line);

    let mut mecabu: Vec&lt;HashMap&lt;String, String&gt;&gt; = Vec::new();
    for node in nodes.iter_next() {
        match node.stat as i32 {
            mecab::MECAB_BOS_NODE =&gt; (),
            mecab::MECAB_EOS_NODE =&gt; (),
            _ =&gt; {
                mecabu.push(feature(&amp;node));
            }
        }
    }
    morph.push(mecabu);
}
for morph in morphs {
    for mecab in morph {
        println!("{}", format!("surface: {}, base: {}, pos: {}, pos1: {}", mecab["surface"], mecab["base"], mecab["pos"], mecab["pos1"]));
    }
    println!("");
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec31">31. 動詞</a></h3>

<p>動詞だけ抽出するので以下のコードで抽出し、表層形(<code>"surface"</code>)を取得する</p>

<p>```rust
fn verb(nodes: Vec&lt;HashMap&lt;String, String>>) &ndash;> Vec&lt;HashMap&lt;String, String>> {</p>

<pre><code>nodes.iter().filter(|m| m["pos"] == inspect(VERB)).map(|hm| hm.clone()).collect()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec32">32. 動詞の原形</a></h3>

<p>動詞だけ抽出するので上記のコードで抽出し、原形(<code>"base"</code>)を取得する</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec33">33. サ変名詞</a></h3>

<p>サ変接続を抽出</p>

<p>```rust
fn sa_noun(nodes: Vec&lt;HashMap&lt;String, String>>) &ndash;> Vec&lt;HashMap&lt;String, String>>{</p>

<pre><code>noun(nodes).iter().filter(|node| node["pos1"] == "サ変接続").map(|hm| hm.clone()).collect()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec34">34. 「AのB」</a></h3>

<p>「の」を挾んでいる名詞を抽出</p>

<p>```rust
fn between_noun(node: &amp;Node) &ndash;> Option<String> {</p>

<pre><code>let mecab = feature(node);
if mecab["surface"] == "の" &amp;&amp; mecab["pos"] == inspect(PARTICLE) &amp;&amp; mecab["pos1"] == "連体化" {
    let prev = feature(&amp;node.prev().unwrap());
    let next = feature(&amp;node.next().unwrap());

    Some(format!("{}{}{}", &amp;prev["surface"], &amp;mecab["surface"], &amp;next["surface"]))
} else {
    None
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec35">35. 名詞の連接</a></h3>

<p>連続した名詞を抽出するが、<code>mecab</code> でうまく関数化できなかったので割愛(あとでうかんだら追記)します。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec36">36. 単語の出現頻度</a></h3>

<p>単純に頻度をまとめ、 <code>sort</code> するとよい</p>

<p>```rust
fn word_histgram(nodes: Vec&lt;HashMap&lt;String, String>>) &ndash;> HashMap&lt;String, u64> {</p>

<pre><code>let mut results: HashMap&lt;String, u64&gt; = HashMap::new();
for node in nodes {
    let base = &amp;node["base"];
    *results.entry(base.to_string()).or_insert(0) += 1;
}
results
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec37">37. 頻度上位10語</a></h3>

<p>上記の結果より <code>.take(10)</code> するだけです。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec38">38. ヒストグラム</a></h3>

<p>37 と違いがわからずおわり。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec39">39. Zipfの法則</a></h3>

<p>単純に両対数グラフ化でおわり。</p>

<h2>おわり</h2>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP 100 Knock section 3]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/02/09/nlp-100-section-3/"/>
    <updated>2018-02-09T23:53:24+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/02/09/nlp-100-section-3</id>
    <content type="html"><![CDATA[<p>正規表現苦手なようでだいぶ時間がかかりました。</p>

<h2><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#ch3">第3章 正規表現</a></h2>

<p>正規表現ときいて楽勝やろと思ってた時期もあったんですが・・・</p>

<h3>準備</h3>

<p>この章では、gzファイルに入ったJSONをパースする必要があるのでさきにgzファイルから読み込むようにします。</p>

<p>```rust
fn read_gzip(path: String) &ndash;> Vec<String> {</p>

<pre><code>let mut file = File::open(path).unwrap();
let mut string = String::new();
Decoder::new(&amp;mut file).unwrap().read_to_string(&amp;mut string).unwrap();
string.split("\n").filter(|m| m.ne(&amp;"")).map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;()
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec20">20. JSONデータの読み込み</a></h3>

<p>こいつは、<a href="https://docs.serde.rs/serde/"><code>serde</code></a> の <a href="https://docs.serde.rs/serde_json/index.html"><code>serde_json</code></a> を利用して <a href="https://docs.serde.rs/serde_json/fn.from_str.html"><code>from_str</code></a> で読み込むだけです。</p>

<p>```rust
let v: Value = match serde_json::from_str(&amp;l.as_str()) {</p>

<pre><code> Ok(v) =&gt; v,
 Err(_) =&gt; { continue; },
</code></pre>

<p>};
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec21">21. カテゴリ名を含む行を抽出</a> &amp;&amp; <a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec22">22. カテゴリ名の抽出</a></h3>

<p><a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">早見表</a> を参考に <a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">Regex::captures</a> で抽出することで解決。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
extern crate serde_json;</p>

<p>use serde_json::Value;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let file = File::open(path).unwrap();
let lines = BufReader::new(file).lines();
let re = Regex::new(r"\[\[Category:.+\]\]").unwrap();
let cap = Regex::new(r"\[\[Category:(?P&lt;name&gt;.+?)(?:\|.*)*\]\]").unwrap();

for l in lines {
    let v: Value = serde_json::from_str(&amp;l.unwrap()).unwrap();

    let title = &amp;v["title"].as_str().unwrap().to_string();
    if keywords.contains(title) {
        for content in v["text"].as_str().unwrap().to_string().split("\n").filter(|m| re.is_match(m)) {
            for c in cap.captures_iter(content) {
                println!("{}", &amp;c["name"]);
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec23">23. セクション構造</a></h3>

<p>こちらは前節の問題と同様に解けばよいですが、<code>=の数 - 1</code> という罠があります。
```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
extern crate serde_json;</p>

<p>use serde_json::Value;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let file = File::open(path).unwrap();
let lines = BufReader::new(file).lines();
let re = Regex::new(r"(?P&lt;level&gt;==+)(?P&lt;headline&gt;.+?)(?:=+)").unwrap();

for l in lines {
    let v: Value = serde_json::from_str(&amp;l.unwrap()).unwrap();

    let title = &amp;v["title"].as_str().unwrap().to_string();
    if keywords.contains(title) {
        for content in v["text"].as_str().unwrap().to_string().split("\n").filter(|m| re.is_match(m)) {
            for caps in re.captures_iter(content) {
                println!("level: {}, headline: {}", &amp;caps["level"].len() - 1, &amp;caps["headline"]);
            }
        }
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec24">24. ファイル参照の抽出</a></h3>

<p>このあたりは問題ないとおもいます。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
extern crate serde_json;</p>

<p>use serde_json::Value;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let file = File::open(path).unwrap();
let lines = BufReader::new(file).lines();
let re = Regex::new(r"\[\[(File|ファイル):(?P&lt;filename&gt;.+?)(?:\|.*)*(?:\|.*)*\]\]").unwrap();

for l in lines {
    let v: Value = serde_json::from_str(&amp;l.unwrap()).unwrap();

    let title = &amp;v["title"].as_str().unwrap().to_string();
    if keywords.contains(title) {
        for content in v["text"].as_str().unwrap().to_string().split("\n").filter(|m| re.is_match(m)) {
            for caps in re.captures_iter(content) {
                println!("filename: {}", &amp;caps["filename"]);
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec25">25. テンプレートの抽出</a></h3>

<p>こいつは大変でしたので参考サイト<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> を参考に以下の正規表現でとりあえず抽出しています。</p>

<p><code>rust
let re = Regex::new(r"(?ms)(?:^\{\{基礎情報.*?$)(?P&lt;dict&gt;.+?)(?:^\}\}$)").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec26">26. 強調マークアップの除去</a></h3>

<p>こちらも同様に参考サイト<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を参考に以下の正規表現で</p>

<p><code>rust
let strong = Regex::new(r"'{2,5}").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec27">27. 内部リンクの除去</a></h3>

<p>こちらも同様に参考サイト<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を参考に以下の正規表現で
<code>rust
let link = Regex::new(r"(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec28">28. MediaWikiマークアップの除去</a></h3>

<p>どうよう<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> (ry</p>

<p><code>
let link = Regex::new(r"(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})").unwrap();
let lang = Regex::new(r"(?:\{\{lang\|.+?\|)(?P&lt;lang&gt;.+?)(?:\}\})").unwrap();
let markup = Regex::new(r"&lt;/*.+?&gt;").unwrap();
</code></p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec29">29. 国旗画像のURLを取得する</a></h3>

<p>こちらもさんこおおう<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>にしてますが、主にURL部分だけです。
こちらは <a href="https://hyper.rs/">Hyper</a> を利用することで解決しています。</p>

<p>```rust
extern crate futures;
extern crate hyper;
extern crate hyper_tls;
extern crate libflate;
extern crate regex;
extern crate serde_json;
extern crate tokio_core;</p>

<p>use futures::{Future, Stream};
use hyper::Client;
use hyper_tls::HttpsConnector;
use libflate::gzip::Decoder;
use regex::Regex;
use serde_json::Value;
use std::collections::HashMap;
use std::env;
use std::fs::File;
use std::io::Read;
use tokio_core::reactor::Core;</p>

<p>fn get_image(query: String) &ndash;> String {</p>

<pre><code>let re = Regex::new(r" ").unwrap();
let uri = format!("https://en.wikipedia.org/w/api.php?action=query&amp;titles=File:{}&amp;format=json&amp;prop=imageinfo&amp;iiprop=url", re.replace_all(&amp;query, "%20"));
let uri = uri.parse().unwrap();
let mut core = Core::new().unwrap();
let handle = core.handle();
let client = Client::configure()
    .connector(HttpsConnector::new(4, &amp;handle).unwrap())
    .build(&amp;handle);
let work = client.get(uri).and_then(|res| {
    res.body().concat2().and_then(move |body| {
        let v: Value = serde_json::from_slice(&amp;body).unwrap();
        let page_ids = v["query"]["pages"].as_object().unwrap().keys().map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
        let imageinfo = &amp;v["query"]["pages"][&amp;page_ids[0]]["imageinfo"];
        let r = format!("{}", imageinfo[0]["url"].as_str().unwrap());
        Ok(r)
    })
});
core.run(work).unwrap()
</code></pre>

<p>}</p>

<p>fn read_gzip(path: String) &ndash;> Vec<String> {</p>

<pre><code>let mut file = File::open(path).unwrap();
let mut string = String::new();
Decoder::new(&amp;mut file).unwrap().read_to_string(&amp;mut string).unwrap();
string.split("\n").filter(|m| m.ne(&amp;"")).map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;()
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let keywords = &amp;args[1..];
let lines = read_gzip(path.to_string());
let re = Regex::new(r"(?ms)(?:^\{\{基礎情報.*?$)(?P&lt;dict&gt;.+?)(?:^\}\}$)").unwrap();
let bar_hat = Regex::new(r"(?ms)(?:^\|)").unwrap();
let dict = Regex::new(r"(?P&lt;key&gt;.+?)\s*=\s*(?P&lt;val&gt;.+)").unwrap();
let media = Regex::new(r"\[\[(File|ファイル):(?P&lt;filename&gt;.+?)(?:\|.*)*(?:\|.*)*\]\]").unwrap();
let strong = Regex::new(r"'{2,5}").unwrap();
let link = Regex::new(r"(?:\[{1,2})(?P&lt;link&gt;.+?)(?:\|.+)?(?:\]{1,2})").unwrap();
let lang = Regex::new(r"(?:\{\{lang\|.+?\|)(?P&lt;lang&gt;.+?)(?:\}\})").unwrap();
let markup = Regex::new(r"&lt;/*.+?&gt;").unwrap();

for l in lines {
    let v: Value = match serde_json::from_str(&amp;l.as_str()) {
        Ok(v) =&gt; v,
        Err(_) =&gt; { continue; },
    };
    let text: String = match v["text"].as_str() {
        Some(x) =&gt; x.to_string(),
        None =&gt; { continue; },
    };
    let title: String = match v["title"].as_str() {
        Some(x) =&gt; x.to_string(),
        None =&gt; { continue; },
    };

    if keywords.contains(&amp;title) {
        let mut results: HashMap&lt;String, String&gt; = HashMap::new();
        let re: String = match re.captures(&amp;text) {
            Some(caps) =&gt; caps["dict"].to_string(),
            None =&gt; {
                println!("cannot capture dict!!");
                continue;
            },
        };
        for line in bar_hat.split(&amp;re).filter(|f| f.ne(&amp;"")).map(|m| m.to_string()) {
            let line = line.replace("\n", "");
            let dict = match dict.captures(&amp;line) {
                Some(x) =&gt; x,
                None =&gt; {continue;},
            };

            let val = dict["val"].to_string();
            let key = dict["key"].to_string();
            let file: String = media.replace_all(&amp;val, "$filename").trim().to_string();
            let strong: String = strong.replace_all(&amp;file, "").trim().to_string();
            let link: String = link.replace_all(&amp;strong, "$link").trim().to_string();
            let markup: String = markup.replace_all(&amp;link, "").trim().to_string();
            let val: String = match key.as_ref() {
                "国旗画像" =&gt; get_image(markup.to_string()),
                _ =&gt; lang.replace_all(&amp;markup, "$lang").trim().to_string(),
            };
            results.insert(key, val);
        }
        for (k, v) in results {
            println!("{}: {}", k, v);
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>とりあえず3章まで終わらせましたので形態素解析へと進みたいとおもいます(思っているだけ)</p>

<h2>参考資料</h2>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>素人の言語処理100本ノック:25, segavvy, <a href="https://qiita.com/segavvy/items/e402ad0a5b0f52453d7f">https://qiita.com/segavvy/items/e402ad0a5b0f52453d7f</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>素人の言語処理100本ノック:26, segavvy, <a href="https://qiita.com/segavvy/items/f6d0f3d6eee5acc33c58">https://qiita.com/segavvy/items/f6d0f3d6eee5acc33c58</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>素人の言語処理100本ノック:27, segavvy, <a href="https://qiita.com/segavvy/items/9a8137f045852bc299d6">https://qiita.com/segavvy/items/9a8137f045852bc299d6</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>素人の言語処理100本ノック:28, segavvy, <a href="https://qiita.com/segavvy/items/8c4567ec1124320d3354">https://qiita.com/segavvy/items/8c4567ec1124320d3354</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>素人の言語処理100本ノック:29, segavvy, <a href="https://qiita.com/segavvy/items/fc7257012d8a590185e5">https://qiita.com/segavvy/items/fc7257012d8a590185e5</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100ノック第2章]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/27/nlp-100-section-2/"/>
    <updated>2018-01-27T19:46:23+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/27/nlp-100-section-2</id>
    <content type="html"><![CDATA[<p>第2章を一通り終えたので書きます。</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec10">10. 行数のカウント</a></h3>

<p>タイトルのままです。 <code>Rust</code> では <a href="https://doc.rust-lang.org/std/str/struct.Lines.html"><code>std::str::Lines</code></a> で <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count"><code>count()</code></a> がありますので利用しておわりです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();

args.next();
for path in args {
    let f = File::open(path).unwrap();
    let br = BufReader::new(f);

    println!("{}", br.lines().count());
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec11">11. タブをスペースに置換</a></h3>

<p>コチラも、<a href="https://doc.rust-lang.org/std/string/struct.String.html#method.replace"><code>std::string::String.replace()</code></a> 利用するだけです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();
args.next();
for path in args {
    let file = File::open(path).unwrap();
    let reader = BufReader::new(file);

    for line in reader.lines() {
        println!("{}", line.unwrap().replace("\t", " "));
    }
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec12">12. 1列目をcol1.txtに,2列目をcol2.txtに保存</a></h3>

<p>こちらは単純にファイルに書き込むのと、分割ができれば問題ないです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::{BufReader, BufWriter, Write};
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();

args.next();
for path in args {
    let f = path.clone().replace(".txt", "");
    let s = path.clone().replace(".txt", "");
    let file = File::open(path).unwrap();
    let br = BufReader::new(file);
    let mut first_column = BufWriter::new(File::create(format!("{}_col1.txt", f)).unwrap());
    let mut second_column = BufWriter::new(File::create(format!("{}_col2.txt", s)).unwrap());

    for line in br.lines() {
        let words = line.unwrap().split("\t").map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
        first_column.write(format!("{}\n", words[0]).as_bytes()).unwrap();
        second_column.write(format!("{}\n", words[1]).as_bytes()).unwrap();
    }
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec13">13. col1.txtとcol2.txtをマージ</a></h3>

<p>こちらは以前利用した、<code>zip</code> があれば問題ないです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::{BufReader, BufWriter, Write};
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let mut args = env::args();
if args.len() &lt; 2 { panic!("col1.txt col2.txt"); }

args.next();

let first = args.next().unwrap();
let second = args.next().unwrap();

let fr = BufReader::new(File::open(first).unwrap()).lines().map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;();

let sr = BufReader::new(File::open(second).unwrap()).lines().map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
let mut merge_file =
    BufWriter::new(File::create("merge.txt".to_string()).unwrap());

for (x, y) in fr.iter().zip(&amp;sr) {
    merge_file.write(format!("{}\t{}\n", x, y).as_bytes()).unwrap();
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec14">14. 先頭からN行を出力</a></h3>

<p><code>head</code> コマンドですので <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take"><code>std::iter::Iterator.take()</code></a> を利用するだけです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args = env::args().skip(1).collect::&lt;Vec&lt;String&gt;&gt;();
let file = File::open(&amp;args[0]).unwrap();

let br = BufReader::new(file).lines().take((&amp;args[1]).to_string().parse::&lt;usize&gt;().unwrap());

for line in br.map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;() {
    println!("{}", line);
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec15">15. 末尾のN行を出力</a></h3>

<p><code>tail</code> コマンドです。こちらは <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip"><code>std::iter::Iterator.skip()</code></a> を利用してやるだけです。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args = env::args().skip(1).collect::&lt;Vec&lt;String&gt;&gt;();
let file = File::open(&amp;args[0]).unwrap();
let takes = (&amp;args[1]).to_string().parse::&lt;usize&gt;().unwrap();
let br = BufReader::new(&amp;file).lines();
let skips = br.count() - takes;
let file = File::open(&amp;args[0]).unwrap();
let lines = BufReader::new(&amp;file).lines().skip(skips);

for line in lines {
    println!("{}", line.unwrap());
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec16">16. ファイルをN分割する</a></h3>

<p>こちらの実装は素朴な実装とし、行数で分割しております。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::BufWriter;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let file = File::open(path).unwrap();
let count: usize = BufReader::new(file).lines().count();
let div: usize = (&amp;args[1]).to_string().parse().unwrap();
let file = File::open(path).unwrap();
let mut br = BufReader::new(file).lines();

let t = (count as f64/ div as f64).ceil() as usize;

for x in 1 .. div + 1 {
    let l = br.by_ref();
    let file = File::create(format!("{}.txt",x)).unwrap();
    let mut bw = BufWriter::new(file);
    for y in l.take(t).map(|m| m.unwrap().to_string()).collect::&lt;Vec&lt;String&gt;&gt;() {
        let a = format!("{}\n", y);
        bw.write(a.as_bytes()).unwrap();
        println!("{}: {}", x, y);
    }
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec17">17. 1列目の文字列の異なり</a></h3>

<p>ファイル読込 + <code>HashSet</code> で実装</p>

<p>```rust
use std::collections::HashSet;
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>extern crate regex;
use regex::Regex;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let file = File::open(path).unwrap();
let re = Regex::new(r"\W+").unwrap();
let hs = BufReader::new(file).lines().map(|m|{
    let l = m.unwrap().clone();
    re.split(&amp;l).next().unwrap().to_string()
}).collect::&lt;HashSet&lt;_&gt;&gt;();

for s in hs {
    println!("{}", s);
}
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec18">18. 各行を3コラム目の数値の降順にソート</a></h3>

<p>こちら、実数の比較を行う必要があり、すこし <a href="https://gist.github.com/katsyoshi/c76c2f782b3edaeff1d328a84dd582a0">めんどう</a> でした。</p>

<p>```rust
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>fn main() {</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
let path = &amp;args[0].to_string();
let file = File::open(path).unwrap();
let mut val = BufReader::new(file).lines().map(|m| m.unwrap().split("\t").skip(2).next().unwrap().parse::&lt;f64&gt;().unwrap()).collect::&lt;Vec&lt;f64&gt;&gt;();

val.sort_by(|a, b| a.partial_cmp(b).unwrap());
for v in val { println!("{}", v); }
</code></pre>

<p>}
```</p>

<h3><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec19">19. 各行の1コラム目の文字列の出現頻度を求め,出現頻度の高い順に並べる</a></h3>

<p>18の問題を更にカウントできるように変更した。</p>

<p>```rust
use std::collections::HashMap;
use std::env;
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;</p>

<p>enum Value {</p>

<pre><code>USIZE(usize),
NONE(()),
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let args = env::args().skip(1).collect::&lt;Vec&lt;String&gt;&gt;();
let file = File::open(&amp;args[0]).unwrap();
let mut words: HashMap&lt;String, usize&gt; = HashMap::new();
for m in BufReader::new(&amp;file).lines() {
    let w = m.unwrap().to_string().split("\t").next().unwrap().to_string();
    let v = match words.get(&amp;w) {
        None =&gt; 1,
        Some(n) =&gt; n + 1,
    };
    words.insert(w, v);
}

let mut vars: Vec&lt;(&amp;String, &amp;usize)&gt; = words.iter().collect();
vars.sort_by(|a, b| b.1.cmp(a.1));
for (w, v) in vars {println!("{}: {}", w, v);}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>この章は慣れてきたのか比較的楽に解けています。</p>
]]></content>
  </entry>
  
</feed>
