<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2017-12-18T22:55:51+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IRubyはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/12/18/hello/"/>
    <updated>2017-12-18T21:56:55+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/12/18/hello</id>
    <content type="html"><![CDATA[<p>表題のとおり、 <a href="https://github.com/SciRuby/iruby">IRuby</a> をはじめてみました</p>

<h3>インストール</h3>

<p>インストールは簡単で <code>gem install iruby</code> でいけますが、私の利用している環境では依存している <a href="https://github.com/zeromq/czmq">czmq</a> が古かったので手動でインストールして回避しています。</p>

<p><code>console
git clone https://github.com/zeromq/czmq.git
cd czmq
./autogen
./configure --prefix=${HOME}/.local
make -j4
make install
gem install iruby cztop
LD_LIBRARY_PATH=${HOME}/.local/lib iruby
</code></p>

<p>でインストールと動作はできます。画像貼るのがメンドイので <code>ipython</code> 貼っておきます。</p>

<p>```
{
 &ldquo;cells&rdquo;: [
  {
   &ldquo;cell_type&rdquo;: &ldquo;code&rdquo;,
   &ldquo;execution_count&rdquo;: 4,
   &ldquo;metadata&rdquo;: {},
   &ldquo;outputs&rdquo;: [</p>

<pre><code>{
 "data": {
  "text/html": [
   "\n",
   "  &lt;script&gt;\n",
   "  requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] }})\n",
   "  &lt;/script&gt;\n",
   "\n",
   "\n",
   "&lt;div id=\"c34db0db-dc37-4ae3-a2b3-33ab99830b89\" style=\"height: 100%; width: 100%;\"&gt;&lt;/div&gt;\n",
   "\n",
   "&lt;script&gt;\n",
   " require(['plotly'], function(Plotly) { \n",
   "Plotly.newPlot(\n",
   "  'c34db0db-dc37-4ae3-a2b3-33ab99830b89',\n",
   "  [{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"y\":[100,81,64,49,36,25,16,9,4,1,0,1,4,9,16,25,36,49,64,81,100],\"type\":null,\"mode\":\"\"}],\n",
   "  {\"width\":1000,\"height\":500},\n",
   "  {\"linkText\":\"Export to plot.ly\",\"showLink\":true}\n",
   ")\n",
   "\n",
   "window.addEventListener('resize', function() {\n",
   "  Plotly.Plots.resize(document.getElementById('c34db0db-dc37-4ae3-a2b3-33ab99830b89'))\n",
   "})\n",
   " }) \n",
   "&lt;/script&gt;"
  ],
  "text/plain": [
   "#&lt;Plotly::Offline::HTML:0x000056356f14be00 @id=\"c34db0db-dc37-4ae3-a2b3-33ab99830b89\", @data=[{:x=&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], :y=&gt;[100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100], :type=&gt;nil, :mode=&gt;\"\"}], @layout={:width=&gt;1000, :height=&gt;500}, @config={:linkText=&gt;\"Export to plot.ly\", :showLink=&gt;true}, @embedded=true&gt;"
  ]
 },
 "metadata": {},
 "output_type": "display_data"
},
{
 "data": {
  "text/plain": [
   "#&lt;CZTop::Socket::PUB:0x56356e7f3620 last_endpoint=\"tcp://127.0.0.1:45835\"&gt;"
  ]
 },
 "execution_count": 4,
 "metadata": {},
 "output_type": "execute_result"
}
</code></pre>

<p>   ],
   &ldquo;source&rdquo;: [</p>

<pre><code>"require 'daru'\n",
"require 'daru/plotly'\n",
"include Daru::Plotly::Methods\n",
"\n",
"dv = Daru::Vector.new((-10..10).map{|n| n ** 2 })\n",
"plot(dv, x: \"x\", y: \"y\").show"
</code></pre>

<p>   ]
  }
 ],
 &ldquo;metadata&rdquo;: {
  &ldquo;kernelspec&rdquo;: {
   &ldquo;display_name&rdquo;: &ldquo;Ruby 2.4.2&rdquo;,
   &ldquo;language&rdquo;: &ldquo;ruby&rdquo;,
   &ldquo;name&rdquo;: &ldquo;ruby&rdquo;
  },
  &ldquo;language_info&rdquo;: {
   &ldquo;file_extension&rdquo;: &ldquo;.rb&rdquo;,
   &ldquo;mimetype&rdquo;: &ldquo;application/x-ruby&rdquo;,
   &ldquo;name&rdquo;: &ldquo;ruby&rdquo;,
   &ldquo;version&rdquo;: &ldquo;2.4.2&rdquo;
  }
 },
 &ldquo;nbformat&rdquo;: 4,
 &ldquo;nbformat_minor&rdquo;: 2
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use red-arrow.gem]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem/"/>
    <updated>2017-05-31T23:27:57+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem</id>
    <content type="html"><![CDATA[<p><a href="https://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/">こないだインストール</a> した <a href="https://arrow.apache.org/">Apache Arrow</a> がとりあえず <a href="https://github.com/red-data-tools/red-arrow">Ruby</a> でうごくようになったのでメモ</p>

<h2>メモ</h2>

<p>gemのインストールは前回のインストールを行なえば問題ないです。ですが、arrowを利用しようとすると失敗します。</p>

<p><code>ruby
require "arrow"
/home/katsu/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/gobject-introspection-3.1.4/lib/gobject-introspection/loader.rb:37:in `require':GObjectIntrospection::RepositoryError::TypelibNotFound: Typelib file for namespace 'Arrow' (any version) not found
</code></p>

<p>これは <code>GObjectIntrospection</code> の<a href="https://github.com/red-data-tools/red-arrow/blob/master/lib/arrow.rb#L25">ロードに失敗</a>しているようです。
なので<a href="http://www.clear-code.com/blog/2013/12/16.html">ここ</a>や<a href="http://qiita.com/groonga/items/71b145b37d77bd160bf2">ここ</a>を参考に環境変数 <code>GI_TYPELIB_PATH</code> を設定すると読み込まれるようになり実行できます。</p>

<p><code>console
$ export GI_TYPELIB_PATH=/path/to/girepository-1.0
$ irb -rarrow
</code></p>

<p>とやるとエラーがなくなります。</p>

<p>最後に<a href="https://github.com/red-data-tools/red-arrow/tree/master/example">サンプル</a>を実行して確認しました!</p>

<p>```console
% ruby write-file.rb</p>

<h1>% ruby read-file.rb</h1>

<p>record-batch[0]:
  uint8: [1, 2, 4, 8]
  uint16: [1, 2, 4, 8]
  uint32: [1, 2, 4, 8]
  uint64: [1, 2, 4, 8]
  int8: [1, -2, 4, -8]
  int16: [1, -2, 4, -8]
  int32: [1, -2, 4, -8]
  int64: [1, -2, 4, -8]
  float: [1.100000023841858, -2.200000047683716, 4.400000095367432, -8.800000190734863]</p>

<h1>  double: [1.1, -2.2, 4.4, -8.8]</h1>

<p>record-batch[1]:
  uint8: [2, 4, 8]
  uint16: [2, 4, 8]
  uint32: [2, 4, 8]
  uint64: [2, 4, 8]
  int8: [-2, 4, -8]
  int16: [-2, 4, -8]
  int32: [-2, 4, -8]
  int64: [-2, 4, -8]
  float: [-2.200000047683716, 4.400000095367432, -8.800000190734863]
  double: [-2.2, 4.4, -8.8]
```</p>

<h2>おわり</h2>

<p>最初ろーどえらーでこまってた</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[installing apache arrow]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/"/>
    <updated>2017-05-29T21:45:29+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow</id>
    <content type="html"><![CDATA[<p><a href="https://slide.rabbit-shocker.org/authors/kou/nagoya-rubykaigi-03/">最近</a><a href="https://github.com/kou">すとうさん</a>が<a href="https://slide.rabbit-shocker.org/authors/kou/data-science-rb/">一押し</a>している<a href="https://arrow.apache.org/">apache arrow</a>をインストールしてみた</p>

<h2>環境</h2>

<p><code>
$ uname -a
Linux rin 4.9.10-gentoo #6 SMP Tue Mar 28 01:29:26 JST 2017 x86_64 Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz GenuineIntel GNU/Linux
$ gcc -v
組み込み spec を使用しています。
COLLECT_GCC=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0/gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-pc-linux-gnu/5.4.0/lto-wrapper
ターゲット: x86_64-pc-linux-gnu
configure 設定: /var/tmp/portage/sys-devel/gcc-5.4.0-r3/work/gcc-5.4.0/configure --host=x86_64-pc-linux-gnu --build=x86_64-pc-linux-gnu --prefix=/usr --bindir=/usr/x86_64-pc-linux-gnu/gcc-bin/5.4.0 --includedir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include --datadir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0 --mandir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/man --infodir=/usr/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/info --with-gxx-include-dir=/usr/lib/gcc/x86_64-pc-linux-gnu/5.4.0/include/g++-v5 --with-python-dir=/share/gcc-data/x86_64-pc-linux-gnu/5.4.0/python --enable-languages=c,c++,fortran --enable-obsolete --enable-secureplt --disable-werror --with-system-zlib --enable-nls --without-included-gettext --enable-checking=release --with-bugurl=https://bugs.gentoo.org/ --with-pkgversion='Gentoo 5.4.0-r3 p1.3, pie-0.6.5' --enable-libstdcxx-time --enable-shared --enable-threads=posix --enable-__cxa_atexit --enable-clocale=gnu --enable-multilib --with-multilib-list=m32,m64 --disable-altivec --disable-fixed-point --enable-targets=all --disable-libgcj --enable-libgomp --disable-libmudflap --disable-libssp --disable-libcilkrts --disable-libmpx --enable-vtable-verify --enable-libvtv --enable-lto --without-isl --enable-libsanitizer
スレッドモデル: posix
gcc バージョン 5.4.0 (Gentoo 5.4.0-r3 p1.3, pie-0.6.5)
</code></p>

<h2>いんすとーる</h2>

<p>今回まだGentooにパッケージがないのでgitからインストールします。ほしいのはrubygems.orgに公開されている<a href="https://rubygems.org/gems/red-arrow">red-arrow</a>をコンパイルするためにglibとこれを利用するために必要な依存パッケージとしてcppをインストールします。インストールはかんたんで <code>cmake</code> を実行すればインストールデキルはずです。</p>

<p><code>console
$ git clone git@github.com:apache/arrow.git
$ cd arrow/cpp
$ mkdir release
$ cd release
$ cmake .. -DCMAKE_BUILD_TYPE=Release
</code></p>

<p>でリリース用パッケージがビルドされるはずですが<a href="https://gist.github.com/katsyoshi/4486792ad43feae4d690d589dac1a157">エラー</a>が出ます。
これはJIRAで<a href="https://issues.apache.org/jira/browse/ARROW-667">検索した結果</a>より <code>gcc</code> のバージョン情報がとれずにエラーをだしているやりとりが発見されたのでわかりました。
ログを見ると実際に取得できていないことも確認しました。で <code>cpp/cmake_modules/CompilerInfo.cmake</code> をみるとどうやら日本語のバージョン情報は考慮されていないような作りになっていました。
なので <code>LANG=C</code> をつけて <code>cmake</code> 再びつけて実行します。</p>

<p><code>console
$ LANG=C cmake .. -DCMAKE_BUILD_TYPE=Release
$ make
$ make install
</code></p>

<p>これでC++のインストールは終了です。続いてglibをインストールします。</p>

<p><code>console
$ cd ../../c_glib
$ ./autgen.sh
$ ./configure
$ make
$ make install
</code></p>

<p>でインストールできます。こちら久々に野良ビルドしたため <code>PKG_CONFIG_PATH</code> や <code>LD_LIBRARY_PATH</code> の設定をわすれてただけなのですんなりいけました。
で最後に <code>gem install red-arrow</code> を実行して目的を達成しました!!!!11</p>

<h2>おわり</h2>

<p>ほんとうのもくてきは <code>fluentd</code> のぷらぐいんをかくことですがつかれたのできょうはここまで</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[raspiでdnsを運用してみはじめた]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/04/09/use-dnsmasq-for-domestic-network/"/>
    <updated>2017-04-09T00:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/04/09/use-dnsmasq-for-domestic-network</id>
    <content type="html"><![CDATA[<p>RasPi2 が3台あってつかっていないので DNS として動かすようにしてみた。
RasPi とはいえ中身は Ubuntu Linux なのでのインストールは <code>apt install dnsmasq</code> するだけでおわります。</p>

<h2>はまったところ</h2>

<p>いつもどおりはまりました。今回は以下の二点</p>

<ul>
<li>/etc/dnsmasq.d/ に hosts ファイルを置くとエラー</li>
<li>/etc/hosts ファイルのパーミッションが <code>600</code> になっていたためエラー</li>
</ul>


<h3>/etc/dnsmasq.d/ に hosts ファイルを置くとエラー</h3>

<p>ログを見ても以下のログしか出ておらず理由の調査に時間がかかった。hosts ファイルは設定ファイルではないため当然といえば当然なのですが…</p>

<p><code>
Jan  1 00:00:08 localhost dnsmasq[673]: bad option at line 1 of /etc/dnsmasq.d/hosts
</code></p>

<p>今、<code>/etc/defaults/dnsmasq</code> を調べてみるとそうなってました。はい。</p>

<p><code>
CONFIG_DIR=/etc/dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new
</code></p>

<h3>/etc/hosts ファイルのパーミッションが <code>600</code> になっていたためエラー</h3>

<p>こちらは上記問題を解決したあと、反映されないのでログを見たときにわかりました。</p>

<p><code>
Apr  8 08:57:20 localhost dnsmasq[4733]: failed to load names from /etc/hosts: Permission denied
</code></p>

<p>これの原因は <code>itamae</code> でファイルを送信するときに <code>mode '644'</code> を指定する必要があったのだが、指定せずに
送信してしまったため発生。</p>

<h2>おわり</h2>

<p>おわり</p>

<h3>関連リポジトリ</h3>

<p><a href="https://github.com/katsyoshi/itamae-recipes">https://github.com/katsyoshi/itamae-recipes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixirのインストール方法]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/04/01/how-to-install-elixir/"/>
    <updated>2017-04-01T09:00:00+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/04/01/how-to-install-elixir</id>
    <content type="html"><![CDATA[<p><a href="http://www.elixirconf.jp/">Elixir Conf Japan</a> に行きましたが、よく考えてみたら
まだこの PC に <a href="http://elixir-lang.org/">Elixir</a> をインストールしていないことに気がついたので
隣の<a href="https://twitter.com/zzak_jp">英語のうまいおじさん</a>にインストール方法を<a href="https://gist.github.com/katsyoshi/7ac2579bbe903ff65685570fd3873379">教えてもらいながら</a>インストールしました<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2>準備</h2>

<p>ここでは <a href="https://gentoo.org/">Gentoo Linux</a> を前提としております。
まず、Elixir を動かすために <a href="https://www.erlang.org">Erlang</a> をインストールします。</p>

<p><code>console
sudo eix-sync
sudo emerge erlang
</code></p>

<p>準備はこれだけです。</p>

<h2>インストール</h2>

<p>次にインストールなのですが、Elixir は Earlang VM 上で動くプログラミング言語のため、コンパイルされたバイナリを置くだけでインストールがおわります。</p>

<p><code>console
wget https://github.com/elixir-lang/elixir/releases/download/v1.4.2/Precompiled.zip
unzip Precompiled.zip -d elixir
mv elixir /path/to/elixir
echo 'export PATH=/path/to/elixir/bin:$PATH' &gt;&gt; ~/.bashrc
source ~/.bashrc
</code></p>

<h2>おわり</h2>

<p>さいごに <code>iex</code> を起動して確認すればおわり</p>

<h3>参考</h3>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>elixir getting started, https://gist.github.com/zzak/a765d6a63860d75c4444e35f57daed13, 2017/04/01 閲覧<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
