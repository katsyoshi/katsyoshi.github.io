<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-11-06T01:03:37+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[remove rails assets]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/11/06/remove-rails-assets/"/>
    <updated>2018-11-06T00:40:32+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/11/06/remove-rails-assets</id>
    <content type="html"><![CDATA[<p>ひさびさに <code>Ruby on Rails</code> の話で、自作の rails application で <code>rails-assets</code> というところからいくつか gem を利用してたので
それを <code>Yarn</code> で同様のパッケージをインストールするように変更した。</p>

<h2>なにをやったのか？</h2>

<p>単純に一旦 <code>rails-assets</code> からインストールしている gem を <code>Gemfile</code> から削除します。</p>

<p>そのあと、 <code>yarn add</code> で <code>package.json</code> を生成し <code>node_modules</code> にインストールします。</p>

<p><code>console
yarn add bootstrap@3 font-awesome jquery
yarn install
rails s
</code></p>

<p>インストールが終了し、railsを起動したら必要な情報(<a href="https://blog.zerokol.com/2018/06/ruby-on-rails-yarn-font-awesome-in.html">font-awesome</a>, <a href="https://qiita.com/fuqda/items/c5756b8f56dcc238c110">bootstrap</a>) を <code>app/assets/{javascripts,stylesheets}</code> に記載。</p>

<p>```js:app/assets/javascripts/application.js</p>

<p>//= require rails-ujs
//= require turbolinks
//= require jquery/dist/jquery.js
//= require bootstrap-sass/assets/javascripts/bootstrap
//= require_tree .
```</p>

<p>```css:app/assets/stylesheets/application.scss
@import &lsquo;bootstrap-sass/assets/stylesheets/bootstrap&rsquo;;
@import &ldquo;font-awesome/scss/variables&rdquo;;
$fa-font-path: &ldquo;font-awesome/fonts/&rdquo;;
@import &ldquo;font-awesome/scss/mixins&rdquo;;
@font-face {
  font-family: &lsquo;FontAwesome&rsquo;;
  src: font-url(&lsquo;#{$fa-font-path}/fontawesome-webfont.eot?v=#{$fa-version}&rsquo;);
  src: font-url(&lsquo;#{$fa-font-path}/fontawesome-webfont.eot?#iefix&amp;v=#{$fa-version}&rsquo;) format(&lsquo;embedded-opentype&rsquo;),</p>

<pre><code>font-url('#{$fa-font-path}/fontawesome-webfont.woff2?v=#{$fa-version}') format('woff2'),
font-url('#{$fa-font-path}/fontawesome-webfont.woff?v=#{$fa-version}') format('woff'),
font-url('#{$fa-font-path}/fontawesome-webfont.ttf?v=#{$fa-version}') format('truetype'),
font-url('#{$fa-font-path}/fontawesome-webfont.svg?v=#{$fa-version}#fontawesomeregular') format('svg');
</code></pre>

<p>  font-weight: normal;
  font-style: normal;
}
@import &ldquo;font-awesome/scss/core&rdquo;;
@import &ldquo;font-awesome/scss/larger&rdquo;;
@import &ldquo;font-awesome/scss/fixed-width&rdquo;;
@import &ldquo;font-awesome/scss/list&rdquo;;
@import &ldquo;font-awesome/scss/bordered-pulled&rdquo;;
@import &ldquo;font-awesome/scss/animated&rdquo;;
@import &ldquo;font-awesome/scss/rotated-flipped&rdquo;;
@import &ldquo;font-awesome/scss/stacked&rdquo;;
@import &ldquo;font-awesome/scss/icons&rdquo;;
@import &ldquo;font-awesome/scss/screen-reader&rdquo;;
$icon-font-path: &ldquo;bootstrap-sass/assets/fonts/bootstrap&rdquo;;
```</p>

<p>ってかいたら使えるようになっています!</p>

<h2>おわり</h2>

<p>ということで <em>IMASARA</em> ですが <code>rails-assets</code> からの脱却ついでに簡単に <code>yarn</code> を利用した assets の導入をやってみました!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new keyboard]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/10/18/new-keyboard/"/>
    <updated>2018-10-18T23:45:09+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/10/18/new-keyboard</id>
    <content type="html"><![CDATA[<p>タイトルのとおり家のキーボードを新調しました。</p>

<h2>Iris</h2>

<p>機械学習でよく<a href="https://archive.ics.uci.edu/ml/datasets/iris">評価されるやつ</a>じゃなくてキーボードであるやつです。</p>

<p><a href="https://keeb.io/">keeb.io</a> で売ってます。</p>

<h3>購入</h3>

<p>欲しい欲しいといってたらいつのまにか復活したのでケースとセットで購入。</p>

<h3>組み立て</h3>

<p>公式やASCIIにあるのでそれに従い組み立てハンダ付します。特に言うことはないです。</p>

<p>ハンダ付ミスっても近所に電子工作の得意なお兄さんに工具を借りれたのですぐに解決です。</p>

<h3>完成</h3>

<p>はい。</p>

<p style="text-align:center;"> <img src="/images/photo/iris-keyboard.jpg" alt="" /></p>

<h2>おわり</h2>

<p>この記事は新しいキーボードに慣れるため書いています。</p>

<p>今まで利用していた Kinesis のやつは仕事場に持っていってます。</p>

<p><a href="https://github.com/katsyoshi/qmk_firmware">配列</a>を Kinesis で利用してた時と似せていますが、少し違うのでまだ打ちにくいです。</p>

<p>あと、技術書典5来てくださいた皆さまありがとうございました。
次回も出そうという気が湧いてきましたので次回もよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[くーも]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/11/cumo/"/>
    <updated>2018-09-11T00:13:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/11/cumo</id>
    <content type="html"><![CDATA[<p>Rubyで <a href="https://developer.nvidia.com/cuda-downloads"><code>cuda</code></a> を利用して GPGPU 使いたいの
で <a href="https://github.com/sonots/cumo"><code>cumo</code></a> を導入してみた。</p>

<h2>install</h2>

<p>はじめに <code>cuda</code> をインストールしておきます。
<code>gem</code> に登録されているので、雑に <code>gem install</code> 実施してみます。</p>

<p><code>
export CUDA_PATH="/opt/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
gem install cumo
</code></p>

<p>とすると以下のようなエラーが出てだめです。</p>

<p>```
gcc -I. -Iinclude -Inarray -Icuda -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/x86_64-linux -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/ruby/backward -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0 -I. -I/home/katsyoshi/.rbenv/versions/2.5.1/lib/ruby/gems/2.5.0/gems/numo-narray-0.9.1.3/ext/numo/narray -DHAVE_NUMO_NARRAY_H -DHAVE_DLFCN_H -DHAVE_DLOPEN -DHAVE_STDBOOL_H -DHAVE_STDINT_H -DHAVE_TYPE_BOOL -DHAVE_TYPE_U_INT8_T -DHAVE_TYPE_U_INT16_T -DHAVE_TYPE_INT32_T -DHAVE_TYPE_U_INT32_T -DHAVE_TYPE_INT64_T -DHAVE_TYPE_U_INT64_T -DHAVE_EXP10 -DHAVE_RB_CCOMPLEX -DHAVE_RB_THREAD_CALL_WITHOUT_GVL -I/opt/cuda/include -I/home/katsyoshi/.rbenv/versions/2.5.1/include -fPIC -O3 -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Wimplicit-int -Wpointer-arith -Wwrite-strings -Wdeclaration-after-statement -Wimplicit-function-declaration -Wdeprecated-declarations -Wmisleading-indentation -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -Wduplicated-cond -Wno-maybe-uninitialized -o narray/types/bit.o -c narray/types/bit.c
narray/gen/tmpl/lib.c:22:7: エラー: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘<strong>attribute</strong>’ before ‘/’ token
 #define m_map(x) m_num_to_data(rb_yield(m_data_to_num(x)))</p>

<pre><code>   ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: エラー: 終端する > 文字がありません</p>

<pre><code>                         ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: 致命的エラー: static ID id_cast;: そのようなファイルやディレクトリはありません
コンパイルを停止しました。
make: *** [Makefile:453: narray/types/bit.o] エラー 1
```</p>

<p>公式リポジトリ覗いてもとくに問題なさそうなので <code>gem</code> からのインストールは一旦おいてソースからインストールします。</p>

<h3>build</h3>

<p>公式リポジトリからダウンロードしてコンパイルをはじめます。</p>

<p><code>
git clone https://github.com/sonotz/cumo.git
cd cumo
export CUDA_PATH="/usr/local/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
bundle install
rake compile
rake install
</code></p>

<p>ってインストールできますが、その前に僕の環境が <code>gcc-8.2.0</code> だったりして、これを <code>gcc-6.4.0</code> に戻したりしてインストールしました。</p>

<h2>run</h2>

<p>これでインストール終わりましたので、 <code>irb</code> で確認してみようと思います。</p>

<p><code>
irb(main):001:0&gt; require 'cumo/narray'
=&gt; true
irb(main):002:0&gt; Cumo::Int32.new(3, 3).fill(0)
=&gt; Cumo::Int32#shape=[3,3]
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
</code></p>

<p>とこれで実行されたことを確認できます。</p>

<p>と簡単に書きましたが、インストール後にGPUへのアクセス権が無いユーザーで実行したためエラーが出ます(エビデンス取得忘れ)。
手元のPCではGPUにアクセス権がvideo groupにもあるので利用ユーザーをvideo groupへ追加して再起動することでようやく動作確認ができます。</p>

<h2>おわり</h2>

<p>簡単にGPGPUを利用したプログラムが書けるようになりましたのでおわりです。
技術書典5はこれを使ったはなしを出展しますのできてみてくださいな。</p>

<p>え37でまってます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SATySFi使って本書いてみてる]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/09/satysfi/"/>
    <updated>2018-09-09T14:29:46+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/09/satysfi</id>
    <content type="html"><![CDATA[<p>技術書典5出しますので、それを書くために <a href="https://ocaml.org/">OCaml</a> で作成された <a href="https://github.com/gfngfn/SATySFi">SATySFi</a> を使いはじめました。</p>

<h2>インストール</h2>

<p>今回は <a href="https://opam.ocaml.org">OPAM</a> を利用してインストールをしています。まあ単純にパッケージが今普段使いしてるOSにないだけなんですけどね。
インストール手順は <a href="https://github.com/gfngfn/SATySFi/blob/master/README-ja.md">公式のREADME.md</a> を参考にしています。</p>

<h3>OPAM</h3>

<p>OCaml Package Manager の略らしいです。
こいつは <code>OCaml</code> のインストールもしてくれるのでこれを利用します。
<code>OPAM</code> のインストールは簡単で以下の<a href="https://opam.ocaml.org/doc/Install.html">スクリプトを実行する</a>だけです。</p>

<p><code>
wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin
</code></p>

<h3>OCaml</h3>

<p><code>OPAM</code> のインストールが終ったら、 <code>OCaml</code> をインストールします。</p>

<p><code>
opam switch 4.06.0
eval `opam config env`
</code></p>

<h3>SATySFi</h3>

<p><code>OPAM</code> の準備が整ったら <code>SATySFi</code> の準備、インストールをします。</p>

<p>```
opam repository satysfi-external <a href="https://github.com/gfngfn/satysfi-external-repo.git">https://github.com/gfngfn/satysfi-external-repo.git</a>
opam update
git clone <a href="https://github.com/gfngfn/SATySFi.git">https://github.com/gfngfn/SATySFi.git</a>
cd SATiSFi</p>

<p>opam pin add satysfi .
opam install satysfi
```</p>

<h2>compile!!!!</h2>

<p>これでインストールされたのでとりあえずリポジトリにある <code>demo/demo.saty</code> をコンパイルしてみましょう。</p>

<p><code>
cd demo
make
</code></p>

<p>なにも準備していないといきなりエラーがでますのでそれを<a href="https://github.com/gfngfn/SATySFi/blob/master/memo-ja-how-to-use.md">公式を参考にして</a>解消します。
解消できたら <code>demo.pdf</code> ができますのでこれでつかえるようになります。</p>

<h2>おわり</h2>

<p>ちょっと簡単でしたが、 <code>satysfi</code> の導入日記でした。</p>

<p>そんなことより<a href="https://techbookfest.org/event/tbf05">技術書典5</a>に出します。ネタは酒に関するネタでやっていく予定です。
仕上がっていれば <code>え37</code> に居るとおもわれます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wireguardをはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita/"/>
    <updated>2018-08-17T00:38:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita</id>
    <content type="html"><![CDATA[<p>title 通り、 <a href="https://www.wireguard.com/"><code>wiregaurd</code></a> で家と <a href="https://vps.sakura.ad.jp/">さくらのVPS</a> にあるサーバーを繋いでみました</p>

<h2>install</h2>

<p>導入は簡単で <code>gentoo</code> は公式にあるので</p>

<p><code>
sudo emerge wireguard
</code></p>

<p>だけで、 <code>ubuntu</code> の場合も<a href="https://www.wireguard.com/install/#packages">インストールガイド</a>があるため簡単にインストールできます</p>

<p><code>
sudo apt install software-properties-common
sudo add-apt-repository ppa:wireguard/wireguard
sudo apt-get update
sudo apt-get install wireguard
</code></p>

<h2>引込</h2>

<p>あとは<a href="https://speakerdeck.com/fadis/zuo-tuteli-jie-suruwireguard">非常にかんたん</a>で<a href="https://wiki.archlinux.jp/index.php/WireGuard">ここ</a>を適宜読み替えることで
接続できます。</p>

<h2>おわり</h2>

<p>あとは、再起動時に自動で接続するように変更する必要がありそうですがつながったし、おそいのでこれでおわり</p>
]]></content>
  </entry>
  
</feed>
