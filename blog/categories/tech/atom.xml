<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-01-21T11:28:56+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nlp 100 section 1 part 3]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/21/nlp-100-section-1-part-3/"/>
    <updated>2018-01-21T10:23:02+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/21/nlp-100-section-1-part-3</id>
    <content type="html"><![CDATA[<p>前回、<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> の04までやったので05からやります。</p>

<h3>05. ngram</h3>

<p>こいつはbi-gramを単語、文字二つを実装するひつようがあります</p>

<p>```rust
fn bigram(words: Vec<String>) &ndash;> Vec<String> {</p>

<pre><code>let mut bi: Vec&lt;String&gt; = Vec::new();
let mut i = 0;

loop {
    let w = i + 2;
    if w &gt; words.len() { break; }
    bi.push(words[i..w].join(""));
    i += 1;
}
bi
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let words = "I am an NLPer".split(' ').map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
println!("\n===word bi-gram");
for word in bigram(words) {
    println!("{}", word);
}

let words = "I am an NLPer".chars().map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
for word in bigram(words) {
    println!("\"{}\"", word);
}
</code></pre>

<p>}
```</p>

<h3>06. 集合</h3>

<p>これは単純に <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html"><code>HashSet</code></a> を利用して、解決します。<code>HashSet</code> の差集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.difference"><code>difference</code></a> を利用し、和集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.union"><code>union</code></a> を、積集合は <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.intersection"><code>intersection</code></a> をそれぞれ利用します。また、特定の要素が含有していることを判定するには <a href="https://doc.rust-lang.org/beta/std/collections/struct.HashSet.html#method.contains"><code>contains</code></a> を利用して判定します。</p>

<p>```rust
use std::collections::HashSet;</p>

<p>fn bigram(words: Vec<String>) &ndash;> HashSet<String> {</p>

<pre><code>let mut bi: HashSet&lt;String&gt; = HashSet::new();
let mut i = 0;

loop {
    let w = i + 2;
    if w &gt; words.len() { break; }
    bi.insert(words[i..w].join(""));
    i += 1;
}
bi
</code></pre>

<p>}</p>

<p>fn chars(s: String) &ndash;> Vec<String> {</p>

<pre><code>s.chars().map(|m| m.to_string()).collect::&lt;Vec&lt;String&gt;&gt;()
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let s1 = bigram(chars("paraparaparadise".to_string()));
let s2 = bigram(chars("paragraph".to_string()));

println!("===UNION===");
for x in s1.union(&amp;s2) {
    println!("{}", x);
}

println!("\n===DIFF===");
println!("===s1 - s2===");
for x in s1.difference(&amp;s2) {
    println!("{}", x);
}
println!("===s2 - s1===");
for x in s2.difference(&amp;s1) {
    println!("{}", x);
}

println!("\n===intersection===");
for x in s1.intersection(&amp;s2) {
    println!("{}", x);
}

println!("\n===INCLUDE===");
let se = "se";
println!("s1: {}", s1.contains(se));
println!("s2: {}", s2.contains(se));
</code></pre>

<p>}
```</p>

<h3>07. テンプレートによる文生成</h3>

<p>これは <a href=""><code>format!</code></a> を使えば終りです。(問題意図ほんとこれなんか？)</p>

<p>```rust
fn string_template(x: i8, y: &amp;str, z: f32) &ndash;> String {</p>

<pre><code>format!("{}時の{}は{}", x, y, z)
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let string = string_template(12, "気温", 22.5);
println!("{}", string);
</code></pre>

<p>}
```</p>

<h3>08. 暗号文</h3>

<p>ASCII以外の判定と、小文字のASCIIが判れば簡単です。</p>

<p>```rust
use std::ascii::AsciiExt;</p>

<p>fn cipher(src: &amp;str) &ndash;> String {</p>

<pre><code>let chars = src.chars().collect::&lt;Vec&lt;char&gt;&gt;();
let mut result: String = String::new();
for c in chars {
    let s = if c.is_ascii() {
        let var: u8 = c as u8;
        match var {
            97 ... 122 =&gt; (219 - (var)) as char,
            _ =&gt; c,
        }
    } else {
        c
    };
    result.push(s);
}
result
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>println!("{}", cipher("Today is fine."));
println!("{}", cipher(&amp;cipher("Today is fine.")));
</code></pre>

<p>}
```</p>

<h3>09. Typoglycemia</h3>

<p>こちらは、 <code>Vec</code> に <code>shuffle</code> 的なものがないので、<a href="https://doc.rust-lang.org/rand"><code>rand</code></a> を呼び出して <a href="https://doc.rust-lang.org/rand/rand/trait.Rng.html#method.shuffle"><code>shuffle</code></a> を使います。</p>

<p>```rust
extern crate rand;
use rand::Rng;</p>

<p>fn words(src: &amp;str) &ndash;> Vec<String> {</p>

<pre><code>let mut result: Vec&lt;String&gt; = Vec::new();

for s in src.split(' ').collect::&lt;Vec&lt;&amp;str&gt;&gt;() {
    let mut chars = s.chars().collect::&lt;Vec&lt;char&gt;&gt;();
    if chars.len() &lt; 5 {
        result.push(s.to_string());
    } else {
        let last_index = chars.len() - 1;
        let first_char = chars[0];
        let last_char = chars[last_index];

        let rand_chars = &amp;mut chars[1..last_index];
        shuffle(rand_chars);
        let mut rand_string = String::new();
        for c in rand_chars { rand_string.push(*c) }
        result.push(format!("{}{}{}", first_char, rand_string, last_char));
    }
}
result
</code></pre>

<p>}</p>

<p>fn shuffle(chars: &amp;mut [char]) {</p>

<pre><code>rand::thread_rng().shuffle(chars);
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let paragraph = "I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .";

for w in words(paragraph) {
    println!("{}", w);
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>ということで <code>Rust</code> で言語処理100本ノック1章をやってみました。
最近 <code>Ruby</code> しか書いていなかったので、新鮮で楽しいですね <code>Rust</code> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLP100本ノック section 1 part 2]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2/"/>
    <updated>2018-01-19T20:05:49+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/19/nlp-100-section-1-part-2</id>
    <content type="html"><![CDATA[<p>前回、<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> の01までやったので02からやっていきます。</p>

<h2><code>extern crate nlp100;</code></h2>

<p>ってやれるように <a href="https://github.com/katsyoshi/zatsu/tree/master/rust/nlp100"><code>Cargo</code></a> を作成
<code>
cargo new nlp100
</code></p>

<h3>02. 「パトカー」+「タクシー」=「パタトクカシーー」</h3>

<p>これはムズカシイので素直に <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip"><code>zip</code></a> を利用する</p>

<p>```rust
fn concat(t: (Vec<char>, Vec<char>)) {</p>

<pre><code>let (f, s) = t;
let mut r = String::new();

for (x, y) in f.iter().zip(s.iter()) {
    r.push_str(&amp;format!("{}{}", x, y));
}
println!("{}", r);
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let p: Vec&lt;char&gt; = String::from("パトカー").chars().collect();
let t: Vec&lt;char&gt; = String::from("タクシー").chars().collect();
let f = (p, t);
concat(f);
</code></pre>

<p>}
```</p>

<h3>03. 円周率</h3>

<p>この問題は思い切り勘違いしてたので、「これのどこが円周率なの？」って思ってました。こいつは <a href="https://doc.rust-lang.org/regex/regex/index.html"><code>Regex</code></a> を用いて単語毎に分解、単語毎に文字数数えて解決してます。</p>

<p>```rust
fn char_count_list(w: &amp;str) &ndash;> Vec<usize> {</p>

<pre><code>Regex::new(r"\W+").unwrap().split(w).map(|m| m.len()).collect()
</code></pre>

<p>}</p>

<p>fn main() {</p>

<pre><code>let pi = char_count_list("Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.");
println!("{:?}", pi);
</code></pre>

<p>}
```</p>

<h3>04. 元素記号</h3>

<p>これは、英語版「水兵リーベー僕の船」ですので条件に合うときだけ1文字に変更します。</p>

<p>```rust
use std::collections::HashMap;</p>

<p>fn main() {</p>

<pre><code>let atomic_words: Vec&lt;&amp;str&gt; = "Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.".split(' ').collect();
let mut atomic_table = HashMap::new();
for (i, a) in atomic_words.iter().enumerate() {
    let chars = a.chars().map(|v| v.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();
    let r = match i {
        0 | 4...8 | 14...15 | 18 =&gt; chars[0].to_string(),
        _ =&gt; chars[0..2].join(""),
    };
    atomic_table.insert(r, i + 1);
}

for (k, v) in &amp;atomic_table {
    println!("{}: {}", k, v);
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>やっぱり難しいのを実感</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[happy new year and new language]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/01/16/happy-new-year-and-new-language/"/>
    <updated>2018-01-16T00:32:16+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/01/16/happy-new-year-and-new-language</id>
    <content type="html"><![CDATA[<p>いまさらですが、あけましておめでとうございます。</p>

<h2>happy new language</h2>

<p>年開けから新しくプログラミング言語(Rust)始めました。(ってわけでもない)</p>

<p>雑に <a href="https://doc.rust-lang.org/book/second-edition/">rust book 2nd edition</a> を一通り読み終えたので、
<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100">言語処理100本ノック</a> をやりはじめました。
とりあえず第1章が終ったので、メモとしてのこします。
基本的に <code>Rust</code> (に限らず)でやりたいことがとくにないので
<a href="http://yamasy1549.hateblo.jp/entry/2017/12/28/222631">ちょうどよさそうな勉強</a> として自然言語処理を選択しています。</p>

<h2>躓いたところ</h2>

<p>躓いていないところがないです。
まあやっていくうちに以下二つは常に書いておくと楽になるかなと。</p>

<p>```rust
// 1文字毎
fn chars(string: &amp;str) &ndash;> Vec<char> {</p>

<pre><code>string.chars().collect::&lt;Vec&lt;char&gt;&gt;()
</code></pre>

<p>}</p>

<p>// 1単語毎
fn words(sentence: &amp;str) &ndash;> Vec&lt;&amp;str> {</p>

<pre><code>sentence.split(' ').collect::&lt;Vec&lt;&amp;str&gt;&gt;()
</code></pre>

<p>}
```</p>

<h3>00. 文字列の逆順</h3>

<p>これは簡単で(でもなかった)、1文字ずつ分解して<a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rev">反対化</a>したあと <code>String</code> にします。</p>

<p>```rust
fn reverse_string(string: &amp;str) {</p>

<pre><code>println!("{}", string.chars().rev().collect::&lt;String&gt;());
</code></pre>

<p>}
```</p>

<h3>01. 「パタトクカシーー」</h3>

<p>これも簡単で、1文字ずつ分解して抜き出します。(絶対違う)</p>

<p>```rust
fn main() {</p>

<pre><code>let c = "パタトクカシーー".chars().collect::&lt;Vec&lt;char&gt;&gt;();
println!("{}{}{}{}", c[0], c[2], c[4], c[6]);
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>とりあえず2問解いてみたけど、自然言語処理 &amp;&amp; <code>Rust</code> 難しい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRubyはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/12/18/hello/"/>
    <updated>2017-12-18T21:56:55+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/12/18/hello</id>
    <content type="html"><![CDATA[<p>表題のとおり、 <a href="https://github.com/SciRuby/iruby">IRuby</a> をはじめてみました</p>

<h3>インストール</h3>

<p>インストールは簡単で <code>gem install iruby</code> でいけますが、私の利用している環境では依存している <a href="https://github.com/zeromq/czmq">czmq</a> が古かったので手動でインストールして回避しています。</p>

<p><code>console
git clone https://github.com/zeromq/czmq.git
cd czmq
./autogen
./configure --prefix=${HOME}/.local
make -j4
make install
gem install iruby cztop
LD_LIBRARY_PATH=${HOME}/.local/lib iruby
</code></p>

<p>でインストールと動作はできます。画像貼るのがメンドイので <code>ipython</code> 貼っておきます。</p>

<p>```
{
 &ldquo;cells&rdquo;: [
  {
   &ldquo;cell_type&rdquo;: &ldquo;code&rdquo;,
   &ldquo;execution_count&rdquo;: 4,
   &ldquo;metadata&rdquo;: {},
   &ldquo;outputs&rdquo;: [</p>

<pre><code>{
 "data": {
  "text/html": [
   "\n",
   "  &lt;script&gt;\n",
   "  requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] }})\n",
   "  &lt;/script&gt;\n",
   "\n",
   "\n",
   "&lt;div id=\"c34db0db-dc37-4ae3-a2b3-33ab99830b89\" style=\"height: 100%; width: 100%;\"&gt;&lt;/div&gt;\n",
   "\n",
   "&lt;script&gt;\n",
   " require(['plotly'], function(Plotly) { \n",
   "Plotly.newPlot(\n",
   "  'c34db0db-dc37-4ae3-a2b3-33ab99830b89',\n",
   "  [{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"y\":[100,81,64,49,36,25,16,9,4,1,0,1,4,9,16,25,36,49,64,81,100],\"type\":null,\"mode\":\"\"}],\n",
   "  {\"width\":1000,\"height\":500},\n",
   "  {\"linkText\":\"Export to plot.ly\",\"showLink\":true}\n",
   ")\n",
   "\n",
   "window.addEventListener('resize', function() {\n",
   "  Plotly.Plots.resize(document.getElementById('c34db0db-dc37-4ae3-a2b3-33ab99830b89'))\n",
   "})\n",
   " }) \n",
   "&lt;/script&gt;"
  ],
  "text/plain": [
   "#&lt;Plotly::Offline::HTML:0x000056356f14be00 @id=\"c34db0db-dc37-4ae3-a2b3-33ab99830b89\", @data=[{:x=&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], :y=&gt;[100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100], :type=&gt;nil, :mode=&gt;\"\"}], @layout={:width=&gt;1000, :height=&gt;500}, @config={:linkText=&gt;\"Export to plot.ly\", :showLink=&gt;true}, @embedded=true&gt;"
  ]
 },
 "metadata": {},
 "output_type": "display_data"
},
{
 "data": {
  "text/plain": [
   "#&lt;CZTop::Socket::PUB:0x56356e7f3620 last_endpoint=\"tcp://127.0.0.1:45835\"&gt;"
  ]
 },
 "execution_count": 4,
 "metadata": {},
 "output_type": "execute_result"
}
</code></pre>

<p>   ],
   &ldquo;source&rdquo;: [</p>

<pre><code>"require 'daru'\n",
"require 'daru/plotly'\n",
"include Daru::Plotly::Methods\n",
"\n",
"dv = Daru::Vector.new((-10..10).map{|n| n ** 2 })\n",
"plot(dv, x: \"x\", y: \"y\").show"
</code></pre>

<p>   ]
  }
 ],
 &ldquo;metadata&rdquo;: {
  &ldquo;kernelspec&rdquo;: {
   &ldquo;display_name&rdquo;: &ldquo;Ruby 2.4.2&rdquo;,
   &ldquo;language&rdquo;: &ldquo;ruby&rdquo;,
   &ldquo;name&rdquo;: &ldquo;ruby&rdquo;
  },
  &ldquo;language_info&rdquo;: {
   &ldquo;file_extension&rdquo;: &ldquo;.rb&rdquo;,
   &ldquo;mimetype&rdquo;: &ldquo;application/x-ruby&rdquo;,
   &ldquo;name&rdquo;: &ldquo;ruby&rdquo;,
   &ldquo;version&rdquo;: &ldquo;2.4.2&rdquo;
  }
 },
 &ldquo;nbformat&rdquo;: 4,
 &ldquo;nbformat_minor&rdquo;: 2
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use red-arrow.gem]]></title>
    <link href="http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem/"/>
    <updated>2017-05-31T23:27:57+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2017/05/31/use-red-arrow-dot-gem</id>
    <content type="html"><![CDATA[<p><a href="https://blog.katsyoshi.org/blog/2017/05/29/installing-apache-arrow/">こないだインストール</a> した <a href="https://arrow.apache.org/">Apache Arrow</a> がとりあえず <a href="https://github.com/red-data-tools/red-arrow">Ruby</a> でうごくようになったのでメモ</p>

<h2>メモ</h2>

<p>gemのインストールは前回のインストールを行なえば問題ないです。ですが、arrowを利用しようとすると失敗します。</p>

<p><code>ruby
require "arrow"
/home/katsu/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/gobject-introspection-3.1.4/lib/gobject-introspection/loader.rb:37:in `require':GObjectIntrospection::RepositoryError::TypelibNotFound: Typelib file for namespace 'Arrow' (any version) not found
</code></p>

<p>これは <code>GObjectIntrospection</code> の<a href="https://github.com/red-data-tools/red-arrow/blob/master/lib/arrow.rb#L25">ロードに失敗</a>しているようです。
なので<a href="http://www.clear-code.com/blog/2013/12/16.html">ここ</a>や<a href="http://qiita.com/groonga/items/71b145b37d77bd160bf2">ここ</a>を参考に環境変数 <code>GI_TYPELIB_PATH</code> を設定すると読み込まれるようになり実行できます。</p>

<p><code>console
$ export GI_TYPELIB_PATH=/path/to/girepository-1.0
$ irb -rarrow
</code></p>

<p>とやるとエラーがなくなります。</p>

<p>最後に<a href="https://github.com/red-data-tools/red-arrow/tree/master/example">サンプル</a>を実行して確認しました!</p>

<p>```console
% ruby write-file.rb</p>

<h1>% ruby read-file.rb</h1>

<p>record-batch[0]:
  uint8: [1, 2, 4, 8]
  uint16: [1, 2, 4, 8]
  uint32: [1, 2, 4, 8]
  uint64: [1, 2, 4, 8]
  int8: [1, -2, 4, -8]
  int16: [1, -2, 4, -8]
  int32: [1, -2, 4, -8]
  int64: [1, -2, 4, -8]
  float: [1.100000023841858, -2.200000047683716, 4.400000095367432, -8.800000190734863]</p>

<h1>  double: [1.1, -2.2, 4.4, -8.8]</h1>

<p>record-batch[1]:
  uint8: [2, 4, 8]
  uint16: [2, 4, 8]
  uint32: [2, 4, 8]
  uint64: [2, 4, 8]
  int8: [-2, 4, -8]
  int16: [-2, 4, -8]
  int32: [-2, 4, -8]
  int64: [-2, 4, -8]
  float: [-2.200000047683716, 4.400000095367432, -8.800000190734863]
  double: [-2.2, 4.4, -8.8]
```</p>

<h2>おわり</h2>

<p>最初ろーどえらーでこまってた</p>
]]></content>
  </entry>
  
</feed>
