<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-09-09T15:18:43+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SATySFi使って本書いてみてる]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/09/satysfi/"/>
    <updated>2018-09-09T14:29:46+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/09/satysfi</id>
    <content type="html"><![CDATA[<p>技術書典5出しますので、それを書くために <a href="https://ocaml.org/">OCaml</a> で作成された <a href="https://github.com/gfngfn/SATySFi">SATySFi</a> を使いはじめました。</p>

<h2>インストール</h2>

<p>今回は <a href="https://opam.ocaml.org">OPAM</a> を利用してインストールをしています。まあ単純にパッケージが今普段使いしてるOSにないだけなんですけどね。
インストール手順は <a href="https://github.com/gfngfn/SATySFi/blob/master/README-ja.md">公式のREADME.md</a> を参考にしています。</p>

<h3>OPAM</h3>

<p>OCaml Package Manager の略らしいです。
こいつは <code>OCaml</code> のインストールもしてくれるのでこれを利用します。
<code>OPAM</code> のインストールは簡単で以下の<a href="https://opam.ocaml.org/doc/Install.html">スクリプトを実行する</a>だけです。</p>

<p><code>
wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin
</code></p>

<h3>OCaml</h3>

<p><code>OPAM</code> のインストールが終ったら、 <code>OCaml</code> をインストールします。</p>

<p><code>
opam switch 4.06.0
eval `opam config env`
</code></p>

<h3>SATySFi</h3>

<p><code>OPAM</code> の準備が整ったら <code>SATySFi</code> の準備、インストールをします。</p>

<p>```
opam repository satysfi-external <a href="https://github.com/gfngfn/satysfi-external-repo.git">https://github.com/gfngfn/satysfi-external-repo.git</a>
opam update
git clone <a href="https://github.com/gfngfn/SATySFi.git">https://github.com/gfngfn/SATySFi.git</a>
cd SATiSFi</p>

<p>opam pin add satysfi .
opam install satysfi
```</p>

<h2>compile!!!!</h2>

<p>これでインストールされたのでとりあえずリポジトリにある <code>demo/demo.saty</code> をコンパイルしてみましょう。</p>

<p><code>
cd demo
make
</code></p>

<p>なにも準備していないといきなりエラーがでますのでそれを<a href="https://github.com/gfngfn/SATySFi/blob/master/memo-ja-how-to-use.md">公式を参考にして</a>解消します。
解消できたら <code>demo.pdf</code> ができますのでこれでつかえるようになります。</p>

<h2>おわり</h2>

<p>ちょっと簡単でしたが、 <code>satysfi</code> の導入日記でした。</p>

<p>そんなことより<a href="https://techbookfest.org/event/tbf05">技術書典5</a>に出します。ネタは酒に関するネタでやっていく予定です。
仕上がっていれば <code>え37</code> に居るとおもわれます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wireguardをはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita/"/>
    <updated>2018-08-17T00:38:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita</id>
    <content type="html"><![CDATA[<p>title 通り、 <a href="https://www.wireguard.com/"><code>wiregaurd</code></a> で家と <a href="https://vps.sakura.ad.jp/">さくらのVPS</a> にあるサーバーを繋いでみました</p>

<h2>install</h2>

<p>導入は簡単で <code>gentoo</code> は公式にあるので</p>

<p><code>
sudo emerge wireguard
</code></p>

<p>だけで、 <code>ubuntu</code> の場合も<a href="https://www.wireguard.com/install/#packages">インストールガイド</a>があるため簡単にインストールできます</p>

<p><code>
sudo apt install software-properties-common
sudo add-apt-repository ppa:wireguard/wireguard
sudo apt-get update
sudo apt-get install wireguard
</code></p>

<h2>引込</h2>

<p>あとは<a href="https://speakerdeck.com/fadis/zuo-tuteli-jie-suruwireguard">非常にかんたん</a>で<a href="https://wiki.archlinux.jp/index.php/WireGuard">ここ</a>を適宜読み替えることで
接続できます。</p>

<h2>おわり</h2>

<p>あとは、再起動時に自動で接続するように変更する必要がありそうですがつながったし、おそいのでこれでおわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Itamae from docker!!]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/07/09/hello/"/>
    <updated>2018-07-09T22:54:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/07/09/hello</id>
    <content type="html"><![CDATA[<p><a href="https://itamae.kitchen/">Itamae</a> の plugin 書いててそろそろ test 欲しいなあとおもって2年くらいたちましたが、
ようやく <a href="https://www.docker.com/">Docker</a> 使って test 書きました。</p>

<h3>方向性</h3>

<p>ここでテストを実施するとして何に対しておこなうのかというのを考えましたが、E2Eのテストだけで良いだろうという方向でテストを書くようにしています。
VMを立てて実行することにはチョット大袈裟だろうということでもっと簡単に、楽にということで <code>docker</code> を選択しています。</p>

<p>itamae で E2E のテストなのでここでは <a href="https://serverspec.org/">serverspec</a> を利用してテストを行います。
E2E のテスト準備として <code>docker</code> 内で最初に目的のレシピを実施し、そのレシピが正しく動作しているかをテストしています。</p>

<h3>準備とテスト実施</h3>

<p>準備として以下の <code>gem</code> を追加しますが、 <a href="https://github.com/swipely/docker-api">docker-api.gem</a> の方はなくてもとくに問題ないです。
<code>serverspec</code> の対象バックエンドで <code>docker</code> が<a href="https://tsub.hatenablog.com/entry/2016/06/25/222508">指定できるようになります</a>が、 <code>docker</code> 内 (<code>docker run -t hoge bundle exec serverspec</code> など) で <code>serverspec</code> を実施すれば実行できますので、好みで追加しましょう。</p>

<p><code>
spec.add_development_dependency "docker-api"
spec.add_development_dependency "serverspec"
</code></p>

<p>次に <code>Dockerfile</code> を作成します。ここでは単純に必要な準備を実施、テストしたいディレクトリの追加、 <code>bundler</code> を利用して <code>gem</code> のインストールを実施してから、対象のディレクトリで <code>itamae</code> の <code>local</code> を指定して対象の <code>docker</code> にレシピ適用します。そのあと <code>docker run</code> や <code>serverspec</code> を実施することでテストをすることが可能となります。</p>

<p><code>
FROM ruby
RUN echo "gem: --no-rdoc --no-ri" &gt;&gt; /.gemrc
RUN gem install bundler
ADD . /app
WORKDIR /app
RUN bundle install
RUN bundle exec itamae local samples/recipe.rb
CMD bundle exec rake
</code></p>

<h3><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a></h3>

<p><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a> でできるようになってます。
とくに <a href="https://docker.io">docker.io</a> とかで公開していませんので、以下に例を</p>

<p><code>
cd /path/to/itamae-plugin-resource-pip
docker build -t katsyoshi/itamae-plugin-resource-pip .
docker run -t katsyoshi/itamae-plugin-resource-pip bundle exec rake
</code></p>

<h3>おわり</h3>

<p>これやろうと思って調べてたらみつからずに <code>Dockerfile</code> 書き終えて、<a href="https://travis-ci.org">travis</a> を追加しようとしたときに、<a href="https://twitter.com/sue445">@sue445</a> さんが<a href="https://sue445.hatenablog.com/entry/2018/05/01/115522">やってた</a>のをみつけてしまった。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2018]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018/"/>
    <updated>2018-06-03T23:44:28+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/06/03/rubykaigi2018</id>
    <content type="html"><![CDATA[<p>RubyKaigi2018 に行ってきた</p>

<h2>1日目</h2>

<p>1日目は、 ずっと会場Aにいました。</p>

<ol>
<li>Matz: <a href="http://rubykaigi.org/2018/presentations/yukihiro_matz.html#may31">Keynote</a></li>
<li>Aaron Patterson: <a href="http://rubykaigi.org/2018/presentations/tenderlove.html#may31">Analyzing and Reducing Ruby Memory Usage</a></li>
<li>Kenta Murata, and Yusaku Hatanaka: <a href="http://rubykaigi.org/2018/presentations/mrkn.html#may31">Deep Learning Programming on Ruby</a></li>
<li>Bozhidar Batsov: <a href="http://rubykaigi.org/2018/presentations/bbatsov.html#may31">All About RuboCop</a></li>
<li>Naotoshi Seo: <a href="http://rubykaigi.org/2018/presentations/sonots.html#may31">Fast Numerical Computing and Deep Learning in Ruby with Cumo</a></li>
<li>Emma Haruka Iwao: <a href="http://rubykaigi.org/2018/presentations/Yuryu.html#may31">Exploring Internal Ruby Through C Extensions</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/lt/">Lightning Talks</a></li>
</ol>


<p>この日、今年の RubyKaigi 2018 で最も楽しみにしてたのが <code>rubocop</code> の作者のトークで、彼のプロダクト(<code>rubocop</code>, <code>flycheck-ruby</code>)を利用してる身としては非常に楽しみでした。
DLと数値計算のやつは進捗が聞けてよかったっていうのとDeep Learningに関していうと難しいのかなあという感想が…
Haruka さんのやつは、やっぱり今の実装十分に速いってのがわかって、これ以上速くするには非常に大変だなってのがよかったですね。
LTはどれもよくて <code>rib</code> も面白いし、 csvの高速化の話が特に好きでした。</p>

<h2>2日目</h2>

<p>2日目もほとんどA会場できいていたのと、GitHubの電源スペースにいました。</p>

<ol>
<li>Kouhei Sutou: <a href="http://rubykaigi.org/2018/presentations/ktou.html#jun01">My way with Ruby</a></li>
<li>Kouichi Sasada: <a href="http://rubykaigi.org/2018/presentations/ko1.html#jun01">Guild Prototype</a></li>
<li>Yuichiro Kaneko: <a href="http://rubykaigi.org/2018/presentations/spikeolaf.html#jun01">RNode with code positions</a></li>
<li>Yusuke Endo: <a href="http://rubykaigi.org/2018/presentations/mametter.html#jun01">Type Profiler: An analysis to guess type signatures</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/rubylangorg.html#jun01">Ruby Commiters vs. the World</a></li>
</ol>


<p>この日のトークは特に楽しみにしていたのはなかったのですが、ここ最近毎年聞いていた <a href="http://rubykaigi.org/2018/presentations/v0dro.html#jun01">@v0dro</a> の発表を聞いていなかった。
金子さんの発表がわりとたのしく聞けて、「あーやっぱり型のはなしは興味ないな」って感じで遠藤さんの発表聞いてました。
この日の懇親会で飲みすぎた。</p>

<h2>3日目</h2>

<p>3日目はパフォーマンス改善を中心として聞いてました。</p>

<ol>
<li>Benoit Daloze: <a href="http://rubykaigi.org/2018/presentations/eregontp.html#jun02">Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby</a></li>
<li>Takashi Kokubun: <a href="http://rubykaigi.org/2018/presentations/k0kubun.html#jun02">The Method JIT Compiler for Ruby 2.6</a></li>
<li>Takeshi Watanabe: <a href="http://rubykaigi.org/2018/presentations/take-cheeze.html#jun02">LuaJIT as a Ruby backend.</a></li>
<li>Prasun Anand: <a href="http://rubykaigi.org/2018/presentations/prasun_anand.html#jun02">High Performance GPU computing with Ruby</a></li>
<li>Vladimir Makarov: <a href="http://rubykaigi.org/2018/presentations/vnmakarov.html#jun02">Three Ruby performance projects</a></li>
<li><a href="http://rubykaigi.org/2018/presentations/tric.html#jun02">TRICK 2018 (FINAL)</a></li>
</ol>


<p>TuffleRubyとはやくてとてもよさそう。
国分さん、Vladimirの話はいつもどおりで安心した。</p>

<p>TRICK、どうしてこんなプログラムが思いつくのかさっぱりわからんがとにかく凄い以上の感想がうかんでこない。</p>

<h2>おわり</h2>

<p>RubyKaigi 2018に行ってきてたいへんたのしいイベントでした。</p>

<p>(型のはなしはやはり興味がないというかまだまだ理解が浅いのでTaPL読むべきだな)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API キーが凍結されてら]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/05/06/teokure/"/>
    <updated>2018-05-06T23:33:23+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/05/06/teokure</id>
    <content type="html"><![CDATA[<p>mikutter の <a href="http://mikutter.hatenablog.com/entry/2018/05/05/164014">Twitter API キーが凍結された</a> ようです。</p>

<h2>回避方法</h2>

<p>とりあず、twitter の <a href="https://developer.twitter.com/en.html">開発者ページ</a> から API キーを生成してください。
あとは以下の様に編集してください</p>

<p>```diff
diff &mdash;git a/Gemfile b/Gemfile
index 0a88a191..cb48cd4f 100644
&mdash;&ndash; a/Gemfile
+++ b/Gemfile
@@ -21,6 +21,7 @@ group :default do
   gem &lsquo;pluggaloid&rsquo;, &lsquo;>= 1.1.1&rsquo;, &lsquo;&lt; 2.0&rsquo;
   gem &lsquo;delayer-deferred&rsquo;, &lsquo;>= 2.0&rsquo;, &lsquo;&lt; 3.0&rsquo;
   gem &lsquo;twitter-text&rsquo;, &lsquo;>= 2.1.0&rsquo;
+  gem &lsquo;dotenv&rsquo;
 end</p>

<p> group :test do
diff &mdash;git a/core/config.rb b/core/config.rb
index 6e3d95ba..455e3083 100644
&mdash;&ndash; a/core/config.rb
+++ b/core/config.rb
@@ -14,8 +14,8 @@ module CHIConfig
   ACRO = &ldquo;mikutter&rdquo;</p>

<p>   # 下の２行は馬鹿にしか見えない
&ndash;  TWITTER_CONSUMER_KEY = &ldquo;AmDS1hCCXWstbss5624kVw&rdquo;
&ndash;  TWITTER_CONSUMER_SECRET = &ldquo;KOPOooopg9Scu7gJUBHBWjwkXz9xgPJxnhnhO55VQ&rdquo;
+  TWITTER_CONSUMER_KEY = ENV[&ldquo;TWITTER_CONSUMER_KEY&rdquo;]
+  TWITTER_CONSUMER_SECRET = ENV[&ldquo;TWITTER_SECRET_KEY&rdquo;]
   TWITTER_AUTHENTICATE_REVISION = 1</p>

<p>   # pidファイル
diff &mdash;git a/mikutter.rb b/mikutter.rb
index da302ca1..94025817 100755
&mdash;&ndash; a/mikutter.rb
+++ b/mikutter.rb
@@ -32,6 +32,8 @@ require &lsquo;benchmark&rsquo;
 require &lsquo;webrick&rsquo;
 require &lsquo;thread&rsquo;
 require &lsquo;fileutils&rsquo;
+require &lsquo;dotenv&rsquo;
+Dotenv.load(&ldquo;.env&rdquo;)</p>

<p> require_relative &lsquo;core/utils&rsquo;
```</p>

<p>あとは環境変数<code>TWITTER_CONSUMER_KEY</code> と <code>TWITTER_SECRET_KEY</code> を設定してあげると起動できるようになります</p>

<h3>dotenv</h3>

<p>環境変数を指定して毎回起動したくない、とか <code>.bashrc</code> に書きたくない、とかある場合は
<a href="https://github.com/bkeepers/dotenv"><code>dotenv.gem</code> </a> を使うことで良いかんじに読みとってくれるようになります。
つかいかたは <code>Dotenv.load(file_name)</code> で <code>file_name</code> にあるファイルのなかに環境変数を書けばよいです。</p>

<h2>おわり</h2>

<p>おわり。
別に <code>dotenv.gem</code> いらんなこれ</p>
]]></content>
  </entry>
  
</feed>
