<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | katsyoshiのめもみたいなもの]]></title>
  <link href="http://blog.katsyoshi.org/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.katsyoshi.org/"/>
  <updated>2018-10-19T00:33:17+09:00</updated>
  <id>http://blog.katsyoshi.org/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[new keyboard]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/10/18/new-keyboard/"/>
    <updated>2018-10-18T23:45:09+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/10/18/new-keyboard</id>
    <content type="html"><![CDATA[<p>タイトルのとおり家のキーボードを新調しました。</p>

<h2>Iris</h2>

<p>機械学習でよく<a href="https://archive.ics.uci.edu/ml/datasets/iris">評価されるやつ</a>じゃなくてキーボードであるやつです。</p>

<p><a href="https://keeb.io/">keeb.io</a> で売ってます。</p>

<h3>購入</h3>

<p>欲しい欲しいといってたらいつのまにか復活したのでケースとセットで購入。</p>

<h3>組み立て</h3>

<p>公式やASCIIにあるのでそれに従い組み立てハンダ付します。特に言うことはないです。</p>

<p>ハンダ付ミスっても近所に電子工作の得意なお兄さんに工具を借りれたのですぐに解決です。</p>

<h3>完成</h3>

<p>はい。</p>

<p style="text-align:center;"> <img src="images/photo/iris-keyboard.jpg" alt="" /></p>

<h2>おわり</h2>

<p>この記事は新しいキーボードに慣れるため書いています。</p>

<p>今まで利用していた Kinesis のやつは仕事場に持っていってます。</p>

<p><a href="https://github.com/katsyoshi/qmk_firmware">配列</a>を Kinesis で利用してた時と似せていますが、少し違うのでまだ打ちにくいです。</p>

<p>あと、技術書典5来てくださいた皆さまありがとうございました。
次回も出そうという気が湧いてきましたので次回もよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[くーも]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/11/cumo/"/>
    <updated>2018-09-11T00:13:45+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/11/cumo</id>
    <content type="html"><![CDATA[<p>Rubyで <a href="https://developer.nvidia.com/cuda-downloads"><code>cuda</code></a> を利用して GPGPU 使いたいの
で <a href="https://github.com/sonots/cumo"><code>cumo</code></a> を導入してみた。</p>

<h2>install</h2>

<p>はじめに <code>cuda</code> をインストールしておきます。
<code>gem</code> に登録されているので、雑に <code>gem install</code> 実施してみます。</p>

<p><code>
export CUDA_PATH="/opt/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
gem install cumo
</code></p>

<p>とすると以下のようなエラーが出てだめです。</p>

<p>```
gcc -I. -Iinclude -Inarray -Icuda -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/x86_64-linux -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0/ruby/backward -I/home/katsyoshi/.rbenv/versions/2.5.1/include/ruby-2.5.0 -I. -I/home/katsyoshi/.rbenv/versions/2.5.1/lib/ruby/gems/2.5.0/gems/numo-narray-0.9.1.3/ext/numo/narray -DHAVE_NUMO_NARRAY_H -DHAVE_DLFCN_H -DHAVE_DLOPEN -DHAVE_STDBOOL_H -DHAVE_STDINT_H -DHAVE_TYPE_BOOL -DHAVE_TYPE_U_INT8_T -DHAVE_TYPE_U_INT16_T -DHAVE_TYPE_INT32_T -DHAVE_TYPE_U_INT32_T -DHAVE_TYPE_INT64_T -DHAVE_TYPE_U_INT64_T -DHAVE_EXP10 -DHAVE_RB_CCOMPLEX -DHAVE_RB_THREAD_CALL_WITHOUT_GVL -I/opt/cuda/include -I/home/katsyoshi/.rbenv/versions/2.5.1/include -fPIC -O3 -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Wimplicit-int -Wpointer-arith -Wwrite-strings -Wdeclaration-after-statement -Wimplicit-function-declaration -Wdeprecated-declarations -Wmisleading-indentation -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -Wduplicated-cond -Wno-maybe-uninitialized -o narray/types/bit.o -c narray/types/bit.c
narray/gen/tmpl/lib.c:22:7: エラー: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘<strong>attribute</strong>’ before ‘/’ token
 #define m_map(x) m_num_to_data(rb_yield(m_data_to_num(x)))</p>

<pre><code>   ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: エラー: 終端する > 文字がありません</p>

<pre><code>                         ^
</code></pre>

<p>narray/gen/tmpl/lib.c:23:29: 致命的エラー: static ID id_cast;: そのようなファイルやディレクトリはありません
コンパイルを停止しました。
make: *** [Makefile:453: narray/types/bit.o] エラー 1
```</p>

<p>公式リポジトリ覗いてもとくに問題なさそうなので <code>gem</code> からのインストールは一旦おいてソースからインストールします。</p>

<h3>build</h3>

<p>公式リポジトリからダウンロードしてコンパイルをはじめます。</p>

<p><code>
git clone https://github.com/sonotz/cumo.git
cd cumo
export CUDA_PATH="/usr/local/cuda"
export CPATH="$CUDA_PATH/include:$CPATH"
export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LD_LIBRARY_PATH"
export PATH="$CUDA_PATH/bin:$PATH"
export LIBRARY_PATH="$CUDA_PATH/lib64:$CUDA_PATH/lib:$LIBRARY_PATH"
bundle install
rake compile
rake install
</code></p>

<p>ってインストールできますが、その前に僕の環境が <code>gcc-8.2.0</code> だったりして、これを <code>gcc-6.4.0</code> に戻したりしてインストールしました。</p>

<h2>run</h2>

<p>これでインストール終わりましたので、 <code>irb</code> で確認してみようと思います。</p>

<p><code>
irb(main):001:0&gt; require 'cumo/narray'
=&gt; true
irb(main):002:0&gt; Cumo::Int32.new(3, 3).fill(0)
=&gt; Cumo::Int32#shape=[3,3]
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
</code></p>

<p>とこれで実行されたことを確認できます。</p>

<p>と簡単に書きましたが、インストール後にGPUへのアクセス権が無いユーザーで実行したためエラーが出ます(エビデンス取得忘れ)。
手元のPCではGPUにアクセス権がvideo groupにもあるので利用ユーザーをvideo groupへ追加して再起動することでようやく動作確認ができます。</p>

<h2>おわり</h2>

<p>簡単にGPGPUを利用したプログラムが書けるようになりましたのでおわりです。
技術書典5はこれを使ったはなしを出展しますのできてみてくださいな。</p>

<p>え37でまってます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SATySFi使って本書いてみてる]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/09/09/satysfi/"/>
    <updated>2018-09-09T14:29:46+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/09/09/satysfi</id>
    <content type="html"><![CDATA[<p>技術書典5出しますので、それを書くために <a href="https://ocaml.org/">OCaml</a> で作成された <a href="https://github.com/gfngfn/SATySFi">SATySFi</a> を使いはじめました。</p>

<h2>インストール</h2>

<p>今回は <a href="https://opam.ocaml.org">OPAM</a> を利用してインストールをしています。まあ単純にパッケージが今普段使いしてるOSにないだけなんですけどね。
インストール手順は <a href="https://github.com/gfngfn/SATySFi/blob/master/README-ja.md">公式のREADME.md</a> を参考にしています。</p>

<h3>OPAM</h3>

<p>OCaml Package Manager の略らしいです。
こいつは <code>OCaml</code> のインストールもしてくれるのでこれを利用します。
<code>OPAM</code> のインストールは簡単で以下の<a href="https://opam.ocaml.org/doc/Install.html">スクリプトを実行する</a>だけです。</p>

<p><code>
wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin
</code></p>

<h3>OCaml</h3>

<p><code>OPAM</code> のインストールが終ったら、 <code>OCaml</code> をインストールします。</p>

<p><code>
opam switch 4.06.0
eval `opam config env`
</code></p>

<h3>SATySFi</h3>

<p><code>OPAM</code> の準備が整ったら <code>SATySFi</code> の準備、インストールをします。</p>

<p>```
opam repository satysfi-external <a href="https://github.com/gfngfn/satysfi-external-repo.git">https://github.com/gfngfn/satysfi-external-repo.git</a>
opam update
git clone <a href="https://github.com/gfngfn/SATySFi.git">https://github.com/gfngfn/SATySFi.git</a>
cd SATiSFi</p>

<p>opam pin add satysfi .
opam install satysfi
```</p>

<h2>compile!!!!</h2>

<p>これでインストールされたのでとりあえずリポジトリにある <code>demo/demo.saty</code> をコンパイルしてみましょう。</p>

<p><code>
cd demo
make
</code></p>

<p>なにも準備していないといきなりエラーがでますのでそれを<a href="https://github.com/gfngfn/SATySFi/blob/master/memo-ja-how-to-use.md">公式を参考にして</a>解消します。
解消できたら <code>demo.pdf</code> ができますのでこれでつかえるようになります。</p>

<h2>おわり</h2>

<p>ちょっと簡単でしたが、 <code>satysfi</code> の導入日記でした。</p>

<p>そんなことより<a href="https://techbookfest.org/event/tbf05">技術書典5</a>に出します。ネタは酒に関するネタでやっていく予定です。
仕上がっていれば <code>え37</code> に居るとおもわれます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wireguardをはじめました]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita/"/>
    <updated>2018-08-17T00:38:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/08/17/wireguard-hajimemashita</id>
    <content type="html"><![CDATA[<p>title 通り、 <a href="https://www.wireguard.com/"><code>wiregaurd</code></a> で家と <a href="https://vps.sakura.ad.jp/">さくらのVPS</a> にあるサーバーを繋いでみました</p>

<h2>install</h2>

<p>導入は簡単で <code>gentoo</code> は公式にあるので</p>

<p><code>
sudo emerge wireguard
</code></p>

<p>だけで、 <code>ubuntu</code> の場合も<a href="https://www.wireguard.com/install/#packages">インストールガイド</a>があるため簡単にインストールできます</p>

<p><code>
sudo apt install software-properties-common
sudo add-apt-repository ppa:wireguard/wireguard
sudo apt-get update
sudo apt-get install wireguard
</code></p>

<h2>引込</h2>

<p>あとは<a href="https://speakerdeck.com/fadis/zuo-tuteli-jie-suruwireguard">非常にかんたん</a>で<a href="https://wiki.archlinux.jp/index.php/WireGuard">ここ</a>を適宜読み替えることで
接続できます。</p>

<h2>おわり</h2>

<p>あとは、再起動時に自動で接続するように変更する必要がありそうですがつながったし、おそいのでこれでおわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Itamae from docker!!]]></title>
    <link href="http://blog.katsyoshi.org/blog/2018/07/09/hello/"/>
    <updated>2018-07-09T22:54:12+09:00</updated>
    <id>http://blog.katsyoshi.org/blog/2018/07/09/hello</id>
    <content type="html"><![CDATA[<p><a href="https://itamae.kitchen/">Itamae</a> の plugin 書いててそろそろ test 欲しいなあとおもって2年くらいたちましたが、
ようやく <a href="https://www.docker.com/">Docker</a> 使って test 書きました。</p>

<h3>方向性</h3>

<p>ここでテストを実施するとして何に対しておこなうのかというのを考えましたが、E2Eのテストだけで良いだろうという方向でテストを書くようにしています。
VMを立てて実行することにはチョット大袈裟だろうということでもっと簡単に、楽にということで <code>docker</code> を選択しています。</p>

<p>itamae で E2E のテストなのでここでは <a href="https://serverspec.org/">serverspec</a> を利用してテストを行います。
E2E のテスト準備として <code>docker</code> 内で最初に目的のレシピを実施し、そのレシピが正しく動作しているかをテストしています。</p>

<h3>準備とテスト実施</h3>

<p>準備として以下の <code>gem</code> を追加しますが、 <a href="https://github.com/swipely/docker-api">docker-api.gem</a> の方はなくてもとくに問題ないです。
<code>serverspec</code> の対象バックエンドで <code>docker</code> が<a href="https://tsub.hatenablog.com/entry/2016/06/25/222508">指定できるようになります</a>が、 <code>docker</code> 内 (<code>docker run -t hoge bundle exec serverspec</code> など) で <code>serverspec</code> を実施すれば実行できますので、好みで追加しましょう。</p>

<p><code>
spec.add_development_dependency "docker-api"
spec.add_development_dependency "serverspec"
</code></p>

<p>次に <code>Dockerfile</code> を作成します。ここでは単純に必要な準備を実施、テストしたいディレクトリの追加、 <code>bundler</code> を利用して <code>gem</code> のインストールを実施してから、対象のディレクトリで <code>itamae</code> の <code>local</code> を指定して対象の <code>docker</code> にレシピ適用します。そのあと <code>docker run</code> や <code>serverspec</code> を実施することでテストをすることが可能となります。</p>

<p><code>
FROM ruby
RUN echo "gem: --no-rdoc --no-ri" &gt;&gt; /.gemrc
RUN gem install bundler
ADD . /app
WORKDIR /app
RUN bundle install
RUN bundle exec itamae local samples/recipe.rb
CMD bundle exec rake
</code></p>

<h3><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a></h3>

<p><a href="https://github.com/katsyoshi/itamae-plugin-resource-pip">itamae-plugin-resource-pip</a> でできるようになってます。
とくに <a href="https://docker.io">docker.io</a> とかで公開していませんので、以下に例を</p>

<p><code>
cd /path/to/itamae-plugin-resource-pip
docker build -t katsyoshi/itamae-plugin-resource-pip .
docker run -t katsyoshi/itamae-plugin-resource-pip bundle exec rake
</code></p>

<h3>おわり</h3>

<p>これやろうと思って調べてたらみつからずに <code>Dockerfile</code> 書き終えて、<a href="https://travis-ci.org">travis</a> を追加しようとしたときに、<a href="https://twitter.com/sue445">@sue445</a> さんが<a href="https://sue445.hatenablog.com/entry/2018/05/01/115522">やってた</a>のをみつけてしまった。。。</p>
]]></content>
  </entry>
  
</feed>
