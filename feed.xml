<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.katsyoshi.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.katsyoshi.org/" rel="alternate" type="text/html" /><updated>2022-10-15T18:39:42+09:00</updated><id>https://blog.katsyoshi.org/feed.xml</id><title type="html">katsyoshi のめもみたいなの</title><subtitle>It&apos;s a memos.</subtitle><entry><title type="html">Communicate on IPv6 from home</title><link href="https://blog.katsyoshi.org/blog/2022/10/12/ipv6nize-at-home/" rel="alternate" type="text/html" title="Communicate on IPv6 from home" /><published>2022-10-12T23:59:50+09:00</published><updated>2022-10-12T23:59:50+09:00</updated><id>https://blog.katsyoshi.org/blog/2022/10/12/ipv6nize-at-home</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2022/10/12/ipv6nize-at-home/">&lt;p&gt;家のネットワークからインターネットへ出るとき &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPoE&lt;/code&gt; を使ってたけど、家庭内 LAN のネットワークは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; を off にしていた。
この LAN 内 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; 化していなかった理由としては、昔 Linux (だけじゃないかも)が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; が利用できる状態だと
先に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; で繋ぎにいこうとして &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; で通信できなかったら &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv4&lt;/code&gt; にフォールバックするという挙動で、すごくストレスフルだった。
この挙動の対処として、カーネルレベルで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; を off にしてました。
そうこうしているうちに契約している ISP が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; オプションなしで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPoE&lt;/code&gt; を利用できるようになったので、
とりあえず &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPoE&lt;/code&gt; だけを利用できるようにして、家庭内の LAN はそのままという状態にしていました。
いいかげんこの家庭内 LAN のネットワークを &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; 化し、インターネットと &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; で通信できるようにした顛末をのこす。のこします。&lt;/p&gt;

&lt;h2 id=&quot;家庭内-lan-環境&quot;&gt;家庭内 LAN 環境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ゲートウェイ: NEC IP38X/1210 (YAMAHA RTX1200)&lt;/li&gt;
  &lt;li&gt;PC: 6.0.0-gentoo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/home2internet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ipoe-化と家庭内-lan-の-ipv6-化&quot;&gt;IPoE 化と家庭内 LAN の IPv6 化&lt;/h2&gt;

&lt;p&gt;設定は &lt;a href=&quot;https://network.yamaha.com/setting/router_firewall/flets/flets_other_service/ipv6_ipoe&quot;&gt;YAMAHA の設定例集&lt;/a&gt;に載ってあるのでそれを参考にします。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPoE&lt;/code&gt; 化はこの設定例でいけるのですが、どうも設定したときにミスったらしく、 LAN の IP アドレスが &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv4&lt;/code&gt; ではインターネットへ出ることができるが、
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; ではインターネットへ出ることができない状態になってしまいました。&lt;/p&gt;

&lt;h3 id=&quot;旧設定&quot;&gt;旧設定&lt;/h3&gt;
&lt;p&gt;どのような設定だったかは以下に&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip route default gateway tunnel 1
ipv6 prefix 1 ra-prefix@lan2::/64
ipv6 lan1 address ra-prefix@lan2::1/64
ipv6 lan1 prefix ra-prefix@lan2::/64
ipv6 lan1 rtadv send 1
ipv6 lan1 dhcp service server
ipv6 lan2 address auto
ipv6 lan2 secure filter in 1010 1011 1012 2000
ipv6 lan2 secure filter out 3000 dynamic 100 101 102 103 104 105 106
ipv6 lan2 dhcp service client ir=on
ngn type lan2 ntt
tunnel select 1
 tunnel encapsulation ipip
 tunnel endpoint address 2404:8e00::feed:100
 tunnel enable 1
ipv6 filter 1010 pass * * icmp6 * *
ipv6 filter 1011 pass * * tcp * ident
ipv6 filter 1012 pass * * udp * 546
ipv6 filter 2000 reject * * * * *
ipv6 filter 3000 pass * * * * *
ipv6 filter dynamic 100 * * ftp
ipv6 filter dynamic 101 * * domain
ipv6 filter dynamic 102 * * www
ipv6 filter dynamic 103 * * smtp
ipv6 filter dynamic 104 * * pop3
ipv6 filter dynamic 105 * * tcp
ipv6 filter dynamic 106 * * udp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この設定ではインターネットとは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv4&lt;/code&gt; でしか通信できていない状態でした。
でこのトラブルシュートとして知人(&lt;a href=&quot;https://twitter.com/n_kane&quot;&gt;@n_kane&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/paina&quot;&gt;@paina&lt;/a&gt;) のちからを借りてどこまで通じてどこから通じないかを確認しました。&lt;/p&gt;

&lt;h3 id=&quot;trable-shooting&quot;&gt;trable shooting&lt;/h3&gt;

&lt;p&gt;とりあえず &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping6&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traceroute6&lt;/code&gt; で通じていないことを確認します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ping6 -c 3 google.com

PING  google.com(nrt13s55-in-x0e.1e100.net (2404:6800:4004:824::200e)) 56 データ長(byte)

--- google.com ping 統計 ---
送信パケット数 3, 受信パケット数 0, パケット損失 100%, 時間 2067ミリ秒

$ traceroute6 google.com
traceroute to google.com, 30 hops max, 80 byte packets
 1  * * *
 2  * * *
 3  * * *
 4  * * *
 5  * * *
 6  * * *
 7  * * *
 8  * * *
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  * * *
22  * * *
23  * * *
24  * * *
25  * * *
26  * * *
27  * * *
28  * * *
29  * * *
30  * * *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通ってないですね。
先述したように PC は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; を on にしたばかりなのでクライアント側の設定でブロックしていないかを確認します。
まずクライアント側で考えられるのは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; でのパケットフィルタリングですね。
ルーターの下にある PC なので、ここでブロックすることは低いのですが、確認します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ip6tables --list
Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;なにもフィルタリングしていないですね。
ということで、クライアント側には問題なさそうですね。
どこまで通じてどこまで通じていないのか別のエンドポイントで確認します。&lt;/p&gt;

&lt;p&gt;まず、手元と相手で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; 利用してパケットが送っているか届いているかを確認します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# tcpdump -nei enp8s0f0 icmp6
dropped privs to pcap
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on enp8s0f0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
22:35:41.158558 00:a0:de:69:40:9d &amp;gt; 33:33:ff:51:5e:63, ethertype IPv6 (0x86dd), length 86: fe80::212:e2ff:fe70:6144 &amp;gt; ff02::1:ff51:5e63: ICMP6, neighbor solicitation, who has 2409:10:a5c0:1f00:d903:ddb5:851:5e63, length 32
22:35:58.765783 ee:60:51:38:43:9c &amp;gt; 33:33:ff:00:00:01, ethertype IPv6 (0x86dd), length 86: 2409:10:a5c0:1f00:5ce3:afcb:9bb2:5c1b &amp;gt; ff02::1:ff00:1: ICMP6, neighbor solicitation, who has 2409:10:a5c0:1f00::1, length 32
22:36:09.249427 ee:60:51:38:43:9c &amp;gt; 33:33:ff:00:00:01, ethertype IPv6 (0x86dd), length 86: 2409:10:a5c0:1f00:5ce3:afcb:9bb2:5c1b &amp;gt; ff02::1:ff00:1: ICMP6, neighbor solicitation, who has 2409:10:a5c0:1f00::1, length 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;送れてはいるようで対向側にも届いていたらしく戻りのパケットは送ってたようですが、手元では戻ってくるパケットは見えていないですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ping6-failure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ということはやはりルーターの設定が悪そうということが推察されますね。
設定のどこが悪いのかあやしいところを見ていきます。&lt;/p&gt;

&lt;p&gt;最初に怪しいとおもったのはルーターのフィルターまわりです。一旦、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no ipv6 interface secure filer in&lt;/code&gt; で全部無効化しましょう。しかしとくに変りはないです。これはフィルターが原因ではなさそうですね。&lt;/p&gt;

&lt;p&gt;次にあやしい点は以下2つの設定&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rtpro.yamaha.co.jp/RT/manual/rt-common/ipv6/ipv6_interface_address.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipv6 interface address&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rtpro.yamaha.co.jp/RT/manual/rt-common/ipv6/ipv6_interface_address.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipv6 interface prefix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上のコマンドは ISP から自動で振ってきている IP を割り当てる設定で、下のコマンドは ISP から振ってきた &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; のプレフィックスを付けるようにするための設定となります。
どうもこの下のコマンドが邪魔なようです。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no ipv6 interface prefix&lt;/code&gt; で無効化できるので一旦外してみましょう。
すると&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ping6 -c 3 google.com
PING google.com(nrt20s18-in-x0e.1e100.net (2404:6800:4004:81c::200e)) 56 データ長(byte)
64 バイト応答 送信元 nrt20s18-in-x0e.1e100.net (2404:6800:4004:81c::200e): icmp_seq=1 ttl=57 時間=6.53ミリ秒
64 バイト応答 送信元 nrt20s18-in-x0e.1e100.net (2404:6800:4004:81c::200e): icmp_seq=2 ttl=57 時間=2.73ミリ秒
64 バイト応答 送信元 nrt20s18-in-x0e.1e100.net (2404:6800:4004:81c::200e): icmp_seq=3 ttl=57 時間=2.81ミリ秒

--- google.com ping 統計 ---
送信パケット数 3, 受信パケット数 3, パケット損失 0%, 時間 2002ミリ秒
rtt 最小/平均/最大/mdev = 2.731/4.023/6.532/1.773ミリ秒
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のように通りました!勝ったッ!第三部完!&lt;/p&gt;

&lt;h2 id=&quot;おわり&quot;&gt;おわり&lt;/h2&gt;

&lt;p&gt;以前中途半端に設定したおかげで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; 有効化に時間が掛ってしまった顛末をまとめました。
これで家のネットワークから &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPv6&lt;/code&gt; で通信できるようになりました。
ありがとうございました!&lt;/p&gt;

&lt;p&gt;次回 katsyoshi.org お名前.COM やめるってよ&lt;/p&gt;</content><author><name></name></author><category term="tech" /><category term="diary" /><summary type="html">家のネットワークからインターネットへ出るとき IPoE を使ってたけど、家庭内 LAN のネットワークは IPv6 を off にしていた。 この LAN 内 IPv6 化していなかった理由としては、昔 Linux (だけじゃないかも)が IPv6 が利用できる状態だと 先に IPv6 で繋ぎにいこうとして IPv6 で通信できなかったら IPv4 にフォールバックするという挙動で、すごくストレスフルだった。 この挙動の対処として、カーネルレベルで IPv6 を off にしてました。 そうこうしているうちに契約している ISP が IPv6 オプションなしで IPoE を利用できるようになったので、 とりあえず IPoE だけを利用できるようにして、家庭内の LAN はそのままという状態にしていました。 いいかげんこの家庭内 LAN のネットワークを IPv6 化し、インターネットと IPv6 で通信できるようにした顛末をのこす。のこします。</summary></entry><entry><title type="html">RubyKaigi 最高！</title><link href="https://blog.katsyoshi.org/blog/2022/09/11/had-lovely-days-at-rubykaigi-2022/" rel="alternate" type="text/html" title="RubyKaigi 最高！" /><published>2022-09-11T23:59:50+09:00</published><updated>2022-09-11T23:59:50+09:00</updated><id>https://blog.katsyoshi.org/blog/2022/09/11/had-lovely-days-at-rubykaigi-2022</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2022/09/11/had-lovely-days-at-rubykaigi-2022/">&lt;p&gt;&lt;a href=&quot;https://rubykaigi.org/2022&quot;&gt;RubyKaigi 2022&lt;/a&gt; に行ってきました! ので感想を&lt;/p&gt;

&lt;h2 id=&quot;day-0&quot;&gt;DAY 0&lt;/h2&gt;

&lt;p&gt;今回も &lt;a href=&quot;https://yancya.house/&quot;&gt;やんちゃハウス&lt;/a&gt; に楽をして泊まることにしてたのでなにも気にせず宿へ。
着いて他メンバーが来るまで宿で待機してたが、最寄り駅の周りが思った以上になにもなく、途方に暮れてました。&lt;/p&gt;

&lt;h4 id=&quot;夕飯&quot;&gt;夕飯&lt;/h4&gt;

&lt;p&gt;もうひとり宿に着いたので入れ変わりで夕飯へ出かけたが、そもそも最寄り駅前にはなにもないので伊勢駅まで出ることにした。&lt;/p&gt;

&lt;p&gt;この判断が間違えてたようで、伊勢駅に出てもとくに変らなかった。しかし幸い伊勢駅前に担々麺屋があったのでそこで食料摂取した。&lt;/p&gt;

&lt;h2 id=&quot;day-1&quot;&gt;DAY 1&lt;/h2&gt;

&lt;p&gt;この日の聞いたセトリと感想は以下のとおり&lt;/p&gt;

&lt;h4 id=&quot;ruby-meets-webassembly-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/kateinoigakukun.html&quot;&gt;Ruby meets WebAssembly&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;この日のキーノートは &lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;&lt;/a&gt; の &lt;a href=&quot;https://webassembly.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wasm&lt;/code&gt;&lt;/a&gt; 対応の話で &lt;a href=&quot;https://wasi.dev/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wasi&lt;/code&gt;&lt;/a&gt; を通じてブラウザで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; が動かすまでのたのしいことをしゃべってたようです。
おなかいたくてトイレ行ってたら面白いところ聞き逃がしてしまった。&lt;/p&gt;

&lt;h4 id=&quot;ランチ&quot;&gt;ランチ&lt;/h4&gt;
&lt;p&gt;適当に幕の内弁当を最初に選択。&lt;/p&gt;

&lt;h4 id=&quot;making-many-threads-on-ruby-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/ko1.html&quot;&gt;Making *MaNy* threads on Ruby&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;笹田さんの発表で如何に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; で CPU をフルに使えるようにするかの話。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; での &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread&lt;/code&gt; のはなしから &lt;a href=&quot;https://github.com/ruby/ruby/blob/master/doc/ractor.md&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ractor&lt;/code&gt;&lt;/a&gt; を利用してフルフルに CPU 利用するための書きかたとかの話していました。&lt;/p&gt;

&lt;h4 id=&quot;building-a-lightweight-ir-and-backend-for-yjit-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/maximecb.html&quot;&gt;Building a Lightweight IR and Backend for YJIT&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby 3.1&lt;/code&gt; で &lt;a href=&quot;https://github.com/Shopify/yjit&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YJIT&lt;/code&gt;&lt;/a&gt; が入って &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby 3.2&lt;/code&gt; でサポートされる CPU アーキテクチャが増えたはなし。RubyVM(？) に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YJIT&lt;/code&gt; 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby IR&lt;/code&gt; を作成して &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JIT&lt;/code&gt; を実行するという話。
聞いてて疑問になった点としては、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby IR&lt;/code&gt; では直接機械語に翻訳しているようだったが、このバックエンドに &lt;a href=&quot;https://llvm.org&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLVM&lt;/code&gt;&lt;/a&gt; を利用していないのはなんでなんだろう。聞き逃がしているという話はあるので、詳しいひと教えて。&lt;/p&gt;

&lt;h4 id=&quot;tools-for-providing-rich-user-experience-in-debugger-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/ono-max.html&quot;&gt;Tools for Providing rich user experience in debugger&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ruby/debug&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug.gem&lt;/code&gt;&lt;/a&gt; を &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VS Code&lt;/code&gt;&lt;/a&gt; だけじゃなく、 &lt;a href=&quot;https://www.google.com/intl/ja_jp/chrome/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chrome&lt;/code&gt;&lt;/a&gt; のリモートデバッグ機能を利用したデバッグの話でした。
この機能自体はすごく便利だと思うのですが、そもそも両方とも宗教上の理由で利用できない体なので聞くだけでした。&lt;/p&gt;

&lt;h4 id=&quot;trick-2022-returns-repos&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/tric.html&quot;&gt;TRICK 2022 (Returns)&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;repos&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;いつも通り &lt;del&gt;変な&lt;/del&gt; エキセントリックなプログラムしか出てこなかったし、いつもの面子が賞もらってたのですごいなーという感想。&lt;/p&gt;

&lt;h4 id=&quot;夕飯-1&quot;&gt;夕飯&lt;/h4&gt;

&lt;p&gt;この日は津駅があまりなさそうだったので、駅近くで飲むのではなく、宿寄りの場所松坂駅で飲むことにした。
ここで、津の夜情報を聞き込んだり、朝ごはん情報自体を仕入れてました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;昨日の夕飯 &lt;a href=&quot;https://twitter.com/hashtag/rubykaigi?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#rubykaigi&lt;/a&gt; &lt;a href=&quot;https://t.co/G8lmetYX9J&quot;&gt;pic.twitter.com/G8lmetYX9J&lt;/a&gt;&lt;/p&gt;&amp;mdash; katsyoshi (@katsyoshi) &lt;a href=&quot;https://twitter.com/katsyoshi/status/1568012256566480896?ref_src=twsrc%5Etfw&quot;&gt;September 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;day-2&quot;&gt;DAY 2&lt;/h2&gt;
&lt;p&gt;2日目は、ネットワークが不安定になったりしてこちらの集中力が切れたりしたのであまり覚えていない。&lt;/p&gt;

&lt;h4 id=&quot;朝ごはん&quot;&gt;朝ごはん&lt;/h4&gt;

&lt;p&gt;前日の夕飯に教えてもらった市場の人向け食堂が松坂駅前にあり、その食堂で食事をした。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;朝メッシ &lt;a href=&quot;https://twitter.com/hashtag/rubykaigi?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#rubykaigi&lt;/a&gt; &lt;a href=&quot;https://t.co/PvbaUrRUIf&quot;&gt;pic.twitter.com/PvbaUrRUIf&lt;/a&gt;&lt;/p&gt;&amp;mdash; katsyoshi (@katsyoshi) &lt;a href=&quot;https://twitter.com/katsyoshi/status/1568019085430259712?ref_src=twsrc%5Etfw&quot;&gt;September 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;matz-keynote-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/yukihiro_matz.html&quot;&gt;Matz Keynote&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&quot;do-pure-ruby-dream-of-encrypted-binary-protocol-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/yu_suke1994.html&quot;&gt;Do Pure Ruby Dream of Encrypted Binary Protocol?&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;ノーコメント。&lt;/p&gt;

&lt;h4 id=&quot;ランチ-1&quot;&gt;ランチ&lt;/h4&gt;

&lt;p&gt;この日も一番に弁当を取得。弁当はみんな大好き松坂牛ローストビーフ丼にした。感想としては、もう肉はいいかな。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;昼飯　&lt;a href=&quot;https://twitter.com/hashtag/rubykaigi?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#rubykaigi&lt;/a&gt; &lt;a href=&quot;https://t.co/vpOf6Uwf0K&quot;&gt;pic.twitter.com/vpOf6Uwf0K&lt;/a&gt;&lt;/p&gt;&amp;mdash; katsyoshi (@katsyoshi) &lt;a href=&quot;https://twitter.com/katsyoshi/status/1568070622210826240?ref_src=twsrc%5Etfw&quot;&gt;September 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;自キkaigi&quot;&gt;自キKaigi&lt;/h4&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;きょうも &lt;a href=&quot;https://twitter.com/hashtag/%E8%87%AA%E3%82%ADKaigi?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#自キKaigi&lt;/a&gt; やります。ランチ食べたらスポンサーエリアの手前あたりにお集まりください &lt;a href=&quot;https://twitter.com/hashtag/rubykaigi?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#rubykaigi&lt;/a&gt;&lt;/p&gt;&amp;mdash; 🇺🇦hasumikin🇺🇦 (@hasumikin) &lt;a href=&quot;https://twitter.com/hasumikin/status/1568023525407211521?ref_src=twsrc%5Etfw&quot;&gt;September 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;誘われたので参加しました。iPad で活動しようと思い &lt;a href=&quot;https://github.com/foostan/crkbd&quot;&gt;corne&lt;/a&gt; 持っていってたので参加してた。&lt;/p&gt;

&lt;h4 id=&quot;ruby-x-bpf-in-action-how-important-observability-is-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/udzura.html&quot;&gt;Ruby x BPF in Action: How important observability is&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;hunting-production-memory-leaks-with-heap-sampling-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/KnuX.html&quot;&gt;Hunting Production Memory Leaks with Heap Sampling&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;このあたりネットワークが不安定になり、セッションが中断されたりしたためあまり覚えていない。&lt;/p&gt;

&lt;h4 id=&quot;立ち話&quot;&gt;立ち話&lt;/h4&gt;

&lt;p&gt;久し振りの対面での参加だったのでセッションあまり聞かずに受け付け前で立ち話している人たちがいたので、その立ち話に参加した。
たまたま、最近読んでる本の翻訳者がいたのでこれからの話などを聞いたりしていた。&lt;/p&gt;

&lt;h4 id=&quot;caching-with-messagepack-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/shioyama.html&quot;&gt;Caching With MessagePack&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;ruby-committers-vs-the-world&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/rubylangorg.html&quot;&gt;Ruby Committers vs The World&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&quot;夕飯-2&quot;&gt;夕飯&lt;/h4&gt;

&lt;p&gt;夕飯は、駅近くのお店でかるく3人で。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;いまどこ&lt;/p&gt;&amp;mdash; tagomoris (@tagomoris) &lt;a href=&quot;https://twitter.com/tagomoris/status/1568221035702685696?ref_src=twsrc%5Etfw&quot;&gt;September 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;こんなリプライがきてたようなので一緒にいたひとにまかせた。ギリギリまで粘ってたので帰宿後すぐ就寝。&lt;/p&gt;

&lt;h2 id=&quot;day-3&quot;&gt;DAY 3&lt;/h2&gt;

&lt;p&gt;3日目はそもそも前2日の疲れが出たりしたのかほとんど覚えていない。あと &lt;a href=&quot;https://ruby-puzzles-2022.cookpad.tech/&quot;&gt;ruby puzzle&lt;/a&gt; をやっていてセッションをあまり聞けていない。&lt;/p&gt;

&lt;h4 id=&quot;朝ごはん-1&quot;&gt;朝ごはん&lt;/h4&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;今日も一日 &lt;a href=&quot;https://twitter.com/hashtag/rubykaigi?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#rubykaigi&lt;/a&gt; &lt;a href=&quot;https://t.co/PKnj8sHxwE&quot;&gt;pic.twitter.com/PKnj8sHxwE&lt;/a&gt;&lt;/p&gt;&amp;mdash; katsyoshi (@katsyoshi) &lt;a href=&quot;https://twitter.com/katsyoshi/status/1568387387088322560?ref_src=twsrc%5Etfw&quot;&gt;September 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;megaruby---running-mrubyc-programs-on-sega-mega-drive-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/yujiyokoo.html&quot;&gt;Megaruby - Running mruby/c programs on Sega Mega Drive&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;これに間に合うように出たはずだったが、間に合わず聞いていた。メガドライブすげえ。&lt;/p&gt;

&lt;h4 id=&quot;automatically-find-memory-leaks-in-native-gems-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/peterzhu2118.html&quot;&gt;Automatically Find Memory Leaks in Native Gems&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;fast-data-processing-with-ruby-and-apache-arrow-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/ktou.html&quot;&gt;Fast data processing with Ruby and Apache Arrow&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;fixing-assignment-evaluation-order-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/jeremyevans0.html&quot;&gt;Fixing Assignment Evaluation Order&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;stories-from-developing-yjit-presentation&quot;&gt;&lt;a href=&quot;https://rubykaigi.org/2022/presentations/alanwusx.html&quot;&gt;Stories from developing YJIT&lt;/a&gt;: &lt;a href=&quot;&quot;&gt;presentation&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;3年ぶりの現地開催だったので参加してきました。対面での参加はやはりよいもので新しい出会いや、疑問を本人、解っている人に直接聞くことができてすばらしい体験でした。&lt;/p&gt;

&lt;h3 id=&quot;三重について&quot;&gt;三重について&lt;/h3&gt;
&lt;p&gt;三重県の酒のイメージは、行く前は「作」「 而今」「伊勢角谷屋麦酒」というイメージでした。
とくに日本酒は美味しいイメージがあり、知らない日本酒もあったりするんだろうなあと思っていました。
行ってみると日本酒はイメージと変わらないのですが、だいたい似た味の傾向で飽きるというかなんというか
美味しいんだけど、好きじゃないという感想になってしまった。
ビールについては瓶ビールしか飲まなかったので感想はなしで。&lt;/p&gt;

&lt;p&gt;三重は大きな街が比較的分散しているようで、津も松坂も伊勢も鳥羽も駅前が小さく感じました。
とくに0日目の食事が大変で、調達が難しかった。&lt;/p&gt;</content><author><name></name></author><category term="tech" /><category term="diary" /><category term="ruby" /><category term="rubykaigi" /><summary type="html">RubyKaigi 2022 に行ってきました! ので感想を</summary></entry><entry><title type="html">Ruby gem で Rust をつかって爆速にしたい!!!!!!11</title><link href="https://blog.katsyoshi.org/blog/2022/08/12/how-to-use-rust-in-ruby-gems/" rel="alternate" type="text/html" title="Ruby gem で Rust をつかって爆速にしたい!!!!!!11" /><published>2022-08-12T13:59:59+09:00</published><updated>2022-08-12T13:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2022/08/12/how-to-use-rust-in-ruby-gems</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2022/08/12/how-to-use-rust-in-ruby-gems/">&lt;p&gt;&lt;a href=&quot;https://rubygems.org&quot;&gt;Ruby Gems&lt;/a&gt; で &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt; が &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/5175&quot;&gt;Native として利用可能になった&lt;/a&gt; のでとりあえず &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc4122.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUIDv4&lt;/code&gt;&lt;/a&gt; を生成してみた。&lt;/p&gt;

&lt;h3 id=&quot;リポジトリ&quot;&gt;リポジトリ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/katsyoshi/rust_uuid&quot;&gt;&lt;img src=&quot;https://gh-card.dev/repos/katsyoshi/rust_uuid.svg&quot; alt=&quot;katsyoshi/rust_uuid - GitHub&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;準備&quot;&gt;準備&lt;/h2&gt;

&lt;p&gt;Ruby 側の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt; に Rust を利用する準備として &lt;a href=&quot;https://github.com/oxidize-rb/rb-sys&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rb_sys&lt;/code&gt;&lt;/a&gt; と &lt;a href=&quot;https://github.com/rake-compiler/rake-compiler&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake-compiler&lt;/code&gt;&lt;/a&gt; を利用します。この二つの &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt; は native compile するためにインストールしておきます。
Rust 側から Ruby へ関数を公開するために &lt;a href=&quot;https://github.com/oxidize-rb/rb-sys&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rb-sys&lt;/code&gt;&lt;/a&gt; と &lt;a href=&quot;https://github.com/matsadler/magnus&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magnus&lt;/code&gt;&lt;/a&gt; を利用します。&lt;/p&gt;

&lt;h2 id=&quot;gem-install&quot;&gt;gem install&lt;/h2&gt;

&lt;p&gt;とりあえず &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo&lt;/code&gt; で Rust のパッケージを作って Rust を書いてみます。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; bundle gem rust_uuid &lt;span class=&quot;nt&quot;&gt;--mit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ext&lt;/span&gt; rust_uuid &lt;span class=&quot;c&quot;&gt;# --ext を指定してnative build する gem を作成&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rust_uuid &lt;span class=&quot;c&quot;&gt;# 作成した gem のディレクトリへ移動&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ext/rust_uuid &lt;span class=&quot;c&quot;&gt;# ビルドするディレクトリへ移動&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cargo init &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--lib&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# cargo を初期化&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.c &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.h &lt;span class=&quot;c&quot;&gt;# C のファイルが生成されるので削除&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cargo add rb-sys rb-allocator
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cargo add magnus &lt;span class=&quot;nt&quot;&gt;--features&lt;/span&gt; rb-sys-interop
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cargo add uuid &lt;span class=&quot;nt&quot;&gt;--features&lt;/span&gt; v4 &lt;span class=&quot;c&quot;&gt;# uuid v4 を指定&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext/rust_uuid/extconf.rb&lt;/code&gt; を以下のように編集します。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@@ -1,5 +1,6 @@&lt;/span&gt;
 # frozen_string_literal: true
 
 require &quot;mkmf&quot;
&lt;span class=&quot;gi&quot;&gt;+require &quot;rb_sys/mkmf&quot;
&lt;/span&gt; 
&lt;span class=&quot;gd&quot;&gt;-create_makefile(&quot;rust_uuid/rust_uuid&quot;)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+create_rust_makefile(&quot;rust_uuid/rust_uuid&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext/rust_uuid/src/lib.rs&lt;/code&gt; を以下の様に変更します。&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;magnus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;prelude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rb_allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby_global_allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;ruby_global_allocator!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// UUIDv4 を文字列として公開&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new_v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[magnus::init]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RustUUID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// RustUUID.v4 と利用するようにシングルトンメソッドを定義&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.define_singleton_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;v4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;function!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これまでできたら一旦 Rust をコンパイルしましょう。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ext/rust_uuid
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cargo build
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; rake build
.... &lt;span class=&quot;c&quot;&gt;# install cargo dependencies and packages&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;/home/katsyoshi/Program/Ruby/rust_uuid/tmp/x86_64-linux/rust_uuid/3.1.2/target/release/librust_uuid.so&apos;&lt;/span&gt; を &lt;span class=&quot;nb&quot;&gt;stat &lt;/span&gt;できません: そのようなファイルやディレクトリはありません
gmake: &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Makefile:551: foo_bar.so] エラー 1
rake aborted!
Command failed with status &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/usr/bin/gmake...]

Tasks: TOP &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; build &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; compile &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; compile:x86_64-linux &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; compile:foo_bar:x86_64-linux &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; copy:rust_uuid:x86_64-linux:3.1.2 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; tmp/x86_64-linux/rust_uuid/3.1.2/rust_uuid.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とエラーになります。
これは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext/rust_uuid/Cargo.toml&lt;/code&gt; の設定が足りていません。そこで以下を追加してみてください。&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[lib]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;crate-type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;cdylib&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;追加したら &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt; をビルド&amp;amp;&amp;amp;インストール&amp;amp;&amp;amp;試してみましょう!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; rake &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
....
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ruby &lt;span class=&quot;nt&quot;&gt;-rrust_uuid&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;puts RustUUID.v4&apos;&lt;/span&gt;
2be6f4d2-200b-4d08-9a1a-11fa523b316b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;べんちまーく&quot;&gt;べんちまーく&lt;/h2&gt;

&lt;p&gt;以下、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecureRandom.uuid&lt;/code&gt; との比較用のベンチマークコードを示します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;benchmark/ips&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;securerandom&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rust_uuid&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ips&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;standard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rust lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RustUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compare!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;結果発表&quot;&gt;結果発表〜&lt;/h3&gt;

&lt;p&gt;Rust を利用することでだいたい 5 倍ほど速くなっています。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby bentimark.rb
&lt;span class=&quot;go&quot;&gt;Warming up --------------------------------------
            standard    36.437k i/100ms
            rust lib   177.585k i/100ms
Calculating -------------------------------------
            standard    365.407k (± 1.4%) i/s -      1.858M in   5.086491s
            rust lib      1.793M (± 1.8%) i/s -      9.057M in   5.053179s

Comparison:
            rust lib:  1792925.9 i/s
            standard:   365407.3 i/s - 4.91x  (± 0.00) slower

ruby bentimark.rb  9.88s user 4.30s system 99% cpu 14.175 total
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TOO HAYAI&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;簡単に Rust を利用して速くしてみました。
思った以上に速くなっていたので重い処理をする場合に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; や &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C++&lt;/code&gt; 以外でも簡単に利用できるようになって
選択肢が増えたのはよいことでした。&lt;/p&gt;

&lt;p&gt;実はこの &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uuid&lt;/code&gt; crate の features に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fast-rng&lt;/code&gt; を追加すると 10 倍速くなるんですが、 ruby 側の終了時に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SEGV&lt;/code&gt; してしまうので載せていないです。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SEGV&lt;/code&gt; しないように原因を調査などはまた今度。&lt;/p&gt;</content><author><name></name></author><category term="rust" /><summary type="html">Ruby Gems で Rust が Native として利用可能になった のでとりあえず UUIDv4 を生成してみた。</summary></entry><entry><title type="html">Hello, Wezterm</title><link href="https://blog.katsyoshi.org/blog/2022/03/19/hello-wezterm/" rel="alternate" type="text/html" title="Hello, Wezterm" /><published>2022-03-19T18:00:00+09:00</published><updated>2022-03-19T18:00:00+09:00</updated><id>https://blog.katsyoshi.org/blog/2022/03/19/hello-wezterm</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2022/03/19/hello-wezterm/">&lt;p&gt;&lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tmux&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Allacritty&lt;/code&gt;&lt;/a&gt; が疲れてきたので&lt;a href=&quot;https://zenn.dev/yutakatay/articles/wezterm-intro&quot;&gt;はてぶで流れてきた&lt;/a&gt; &lt;a href=&quot;https://github.com/wez/wezterm&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wezterm&lt;/code&gt;&lt;/a&gt; が &lt;a href=&quot;https://github.com/saitoha/libsixel&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sixel&lt;/code&gt;&lt;/a&gt; を利用できてよさそうだったので試してみることにした。&lt;/p&gt;

&lt;h2 id=&quot;設定&quot;&gt;設定&lt;/h2&gt;

&lt;p&gt;設定ファイルが &lt;a href=&quot;https://www.lua.org/&quot;&gt;lua&lt;/a&gt; でカスタマイズがいろいろとできるのでまずは色を代えてみます。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;wezterm&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;color_scheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dracula&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;プログラミング言語でカスタマイズができるので以下のようにアクティブなタブへの移動のキーバインドのカスタマイズができます。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;wezterm&apos;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CTRL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivateTab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;color_scheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dracula&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;disable_default_key_bindings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 初期のキーバインドは利用しない場合&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こんな感じで設定できるので便利です。&lt;/p&gt;

&lt;p&gt;このキーバインドは任意のイベントも設定でき、任意のイベントを利用してアクションを定義できます。以下の例では、Paneを開い監視用のプログラムを開きます。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;wezterm&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;open-nvtop-and-ytop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SplitHorizontal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CurrentPaneDomain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nvtop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SplitVertical&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CurrentPaneDomain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ytop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-ps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CTRL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wezterm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmitEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open-nvtop-and-ytop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とすると以下のようになります。
&lt;img src=&quot;/images/screenshot/open-nvtop-and-ytop-in-wezterm.png&quot; width=&quot;100%&quot; /&gt;
便利!&lt;/p&gt;

&lt;p&gt;こんな便利なものということで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; でデーモン化しています。&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GUI&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Accellarated&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;terminal&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Documentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;forking&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/usr/local/bin/wezterm-mux-server&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--daemonize&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;on-failure&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;default.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で起動しておいています&lt;/p&gt;

&lt;h3 id=&quot;問題点&quot;&gt;問題点&lt;/h3&gt;

&lt;p&gt;と設定ファイルの例書いてみたのですが、とても大きな問題点にブチあたったので書いておきます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wezterm&lt;/code&gt; には &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wezterm-mux-server&lt;/code&gt; というマルチプレクサ(tmuxのように扱うため)のサーバーモードプログラムがあるのですが、こいつがどうも &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wezterm&lt;/code&gt; とは挙動が異なり、前述した監視用のキーバインドが微妙に異なった挙動となってしまっています。サーバーモードに接続した場合の挙動は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshot/failed-nvtop-ytop.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1つ目はpaneの位置が期待したとおりになっていない。2つ目は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ytop&lt;/code&gt; が起動していないというので2つ目の方は気にしなければいいのでまあいいかと思っている。1つ目の問題は許容できていないので一旦はこのキーバインドは封印となっています。&lt;/p&gt;

&lt;h1 id=&quot;おわり&quot;&gt;おわり&lt;/h1&gt;

&lt;p&gt;長年利用してた &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tmux&lt;/code&gt; を捨てて &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wezterm&lt;/code&gt; を利用しはじめた。
設定が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lua&lt;/code&gt; で書けるのが体験的にとても良いのでこれからも利用するかなと。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wezterm&lt;/code&gt; で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sixel&lt;/code&gt; 利用した画像表示ができるようになったのが便利なので「よしっ！」&lt;/p&gt;</content><author><name></name></author><category term="diary" /><summary type="html">tmux + Allacritty が疲れてきたのではてぶで流れてきた wezterm が sixel を利用できてよさそうだったので試してみることにした。</summary></entry><entry><title type="html">冬やすみ</title><link href="https://blog.katsyoshi.org/blog/2022/01/03/hello-2022/" rel="alternate" type="text/html" title="冬やすみ" /><published>2022-01-03T23:59:59+09:00</published><updated>2022-01-03T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2022/01/03/hello-2022</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2022/01/03/hello-2022/">&lt;p&gt;冬やすみの間、やりたいこと、やっといたほうがいいやつをやってました。
ひとつは &lt;a href=&quot;/blog/2021/12/26/xremap/&quot;&gt;xremap&lt;/a&gt; の設定ともうひとつは &lt;a href=&quot;/blog/2021/12/30/custom-co2mini-co2-sensor/&quot;&gt;CO2-mini から CO&lt;sub&gt;2&lt;/sub&gt; を見える&lt;/a&gt; ようにした。&lt;/p&gt;

&lt;p&gt;今回は、 &lt;a href=&quot;https://mackerel.io&quot;&gt;&lt;strong&gt;mackerel&lt;/strong&gt;&lt;/a&gt; で見えるようになった &lt;strong&gt;CO&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt; の値を &lt;strong&gt;Slack&lt;/strong&gt; へ定期的に投げるようにします。今回も &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt; を利用しています。&lt;/p&gt;

&lt;h2 id=&quot;準備&quot;&gt;準備&lt;/h2&gt;

&lt;p&gt;準備として、 &lt;strong&gt;mackerel&lt;/strong&gt; &lt;sup id=&quot;fnref:mackerel-token&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:mackerel-token&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; と &lt;strong&gt;Slack&lt;/strong&gt; &lt;sup id=&quot;fnref:slack-token&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:slack-token&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
両アプリケーションの投稿 API 用 Token をそれぞれ用意します。
各公式ページにあるように生成、取得するだけでよいです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mackerel&lt;/strong&gt; 側は &lt;a href=&quot;https://mackerel.io/ja/api-docs/entry/host-metrics#get&quot;&gt;ホストメトリック API&lt;/a&gt; を利用します。
&lt;strong&gt;Slack&lt;/strong&gt; 側は &lt;a href=&quot;https://api.slack.com/methods/chat.postMessage&quot;&gt;chat.postMessage API&lt;/a&gt; を利用します。
各 API に対して取得した API Token を用いて &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; で確認しておきます。&lt;/p&gt;

&lt;h2 id=&quot;実装&quot;&gt;実装&lt;/h2&gt;

&lt;p&gt;今回は対話式の &lt;strong&gt;bot&lt;/strong&gt; ではないので、 &lt;a href=&quot;https://api.slack.com/rtm&quot;&gt;&lt;strong&gt;RTM&lt;/strong&gt;&lt;/a&gt; を利用せずに、&lt;strong&gt;HTTP&lt;/strong&gt; クライアントだけで構成しています&lt;sup id=&quot;fnref:slack-rs&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:slack-rs&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。
&lt;strong&gt;Rust&lt;/strong&gt; の &lt;strong&gt;HTTP&lt;/strong&gt; クライアントとして &lt;a href=&quot;https://github.com/hyperium/hyper&quot;&gt;&lt;strong&gt;hyper&lt;/strong&gt;&lt;/a&gt;&lt;sup id=&quot;fnref:hyper-warning&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:hyper-warning&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; を利用します。
&lt;strong&gt;TLS&lt;/strong&gt; は &lt;a href=&quot;https://github.com/hyperium/hyper-tls&quot;&gt;&lt;strong&gt;hyper_tls&lt;/strong&gt;&lt;/a&gt; を利用しています。&lt;/p&gt;

&lt;p&gt;実装とは言っても対象の &lt;strong&gt;mackerel&lt;/strong&gt; の APIを叩き値を取得して、
その値を元に &lt;strong&gt;Slack&lt;/strong&gt; へポストするだけです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mackerel&lt;/strong&gt; での値取得時に気をつける点としては、&lt;strong&gt;ホストメトリック API&lt;/strong&gt; では &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host名&lt;/code&gt; ではなく、
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host id&lt;/code&gt; がパラメーターとなっていますので注意が必要です。
まずレスポンスを入れる構造体を定義します。&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 今回は co2 の値なので i16 としている&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseMetrics&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;つぎに以下のようにしてリクエストを組みたてて、値を取得しています。&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HttpsConnector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Api-Key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// https として request する&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;値を取得したら、今度は同じように &lt;strong&gt;Slack&lt;/strong&gt; の方も構造体を定義します。&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// リクエスト用構造体&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SlackMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// レスポンス用構造体&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[allow(unused)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;リクエストを組みたてて、POSTします。
見てわかると思いますが、ほとんど &lt;strong&gt;mackerel&lt;/strong&gt; と変わらないです。&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// リクエスト body を json に変換&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SlackMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bot_message&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;botname&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;as_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper_tls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;HttpsConnector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bearer {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SLACK_API_KEY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポストするメッセージを作る際に2つのことをしています。
まずは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; の &lt;strong&gt;UNIX EPOCH TIME&lt;/strong&gt; からローカルの時間を表示するようにしています。
それと &lt;strong&gt;CO&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt; の値に依って絵文字を追加するかどうかを入れています。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; とか予定していない値が入ってきた場合は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;panic!&lt;/code&gt; するようにしています。&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// chrono を利用して unix time からローカルの文字列へ変換&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Local&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;700&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:large_green_circle:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;701&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:large_yellow_circle:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:red_circle:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// なんで slack は :large_red_circle: を用意していないんだろうか&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;panic!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unexpected number!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうやってポストされたメッセージは以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshot/posted-slack-message.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;絵文字つきでポストされましたね。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt; で &lt;strong&gt;bot&lt;/strong&gt; を作ってみました。
と言ってもただの &lt;strong&gt;HTTP クライアント&lt;/strong&gt; な &lt;strong&gt;bot&lt;/strong&gt; なだけですけど。
一旦 &lt;strong&gt;Slack&lt;/strong&gt; でも見えるようになったので今度は &lt;a href=&quot;https://nature.global&quot;&gt;&lt;strong&gt;Nature Remo&lt;/strong&gt;&lt;/a&gt; と連携して気温や湿度での自動化ができたらいいな。&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:mackerel-token&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://mackerel.io/ja/api-docs/ &lt;a href=&quot;#fnref:mackerel-token&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:slack-token&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://slack.com/intl/ja-jp/help/articles/215770388-API-%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E7%94%9F%E6%88%90%E3%81%A8%E5%86%8D%E7%94%9F%E6%88%90 &lt;a href=&quot;#fnref:slack-token&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:slack-rs&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/slack-rs/slack-rs&quot;&gt;slack-rs&lt;/a&gt; という便利ライブラリがあるのですが、ちょっと触ってみたこれは必要なんだっけ？となってやめました。 &lt;a href=&quot;#fnref:slack-rs&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hyper-warning&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/hyperium/hyper#low-level&quot;&gt;公式の README&lt;/a&gt; にあるようにこの場合は &lt;a href=&quot;https://github.com/seanmonstar/reqwest&quot;&gt;&lt;strong&gt;reqwest&lt;/strong&gt;&lt;/a&gt; を利用するほうがよかったかもしれない。&lt;strong&gt;TLS&lt;/strong&gt; は直接 &lt;strong&gt;hyper&lt;/strong&gt; が対応していなかったりしてすこし面倒です。 &lt;a href=&quot;#fnref:hyper-warning&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="diary" /><summary type="html">冬やすみの間、やりたいこと、やっといたほうがいいやつをやってました。 ひとつは xremap の設定ともうひとつは CO2-mini から CO2 を見える ようにした。</summary></entry><entry><title type="html">今年飲んだコーヒー豆の種類 2021</title><link href="https://blog.katsyoshi.org/blog/2021/12/31/me-and-coffee/" rel="alternate" type="text/html" title="今年飲んだコーヒー豆の種類 2021" /><published>2021-12-31T23:59:59+09:00</published><updated>2021-12-31T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2021/12/31/me-and-coffee</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2021/12/31/me-and-coffee/">&lt;p&gt;今年もコロナでどこにも行くにしても行きにくかったし、
店もどこもあまりやってなかったようだったので今年も酒ではないまとめを。&lt;/p&gt;

&lt;p&gt;苦いコーヒーすこし飽きてきたなーとか、あんまり大量にのむのはなーと思ってたところ&lt;sup id=&quot;fnref:coffee&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:coffee&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;に
スペシャルティコーヒー専門店が近所にできていて、そこで飲んで教えてもらったコーヒーが
気に入りよく通うように。&lt;/p&gt;

&lt;p&gt;普段の飲む量を1日1杯のみに抑えるために多少高くてもおいしい豆で1杯で満足できる豆を買うことにした。&lt;/p&gt;

&lt;h2 id=&quot;豆&quot;&gt;豆&lt;/h2&gt;

&lt;p&gt;買ったというのがわかっている豆。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HAMBELA WAMENA, HEIRLOOM, Natural, エチオピア&lt;/li&gt;
  &lt;li&gt;Carmo De Minas Santuario Sul, Yellow Bourbon, Citrus Sweetness, ブラジル&lt;/li&gt;
  &lt;li&gt;NYERI KARATINA, SL&lt;sub&gt;28&lt;/sub&gt;SL&lt;sub&gt;32&lt;/sub&gt;RUIRU&lt;sub&gt;11&lt;/sub&gt;, Fully Washed, ケニア&lt;/li&gt;
  &lt;li&gt;KAKAMEGA ISULU, SL&lt;sub&gt;28&lt;/sub&gt;SL&lt;sub&gt;32&lt;/sub&gt;RUIRU&lt;sub&gt;11&lt;/sub&gt;, Natural Anaerobic, ケニア&lt;/li&gt;
  &lt;li&gt;WEST ARSI GORA KONE, HEIRLOOM, Washed, エチオピア&lt;/li&gt;
  &lt;li&gt;GEDEB WORKA, HEIRLOOM, Special Process Natural, エチオピア&lt;/li&gt;
  &lt;li&gt;EL PARAISO RED FRUITS, CASTILLO, DOUBLE ANAEROBIC WASHED, コロンビア&lt;/li&gt;
  &lt;li&gt;EL PARAISO LYCHEE, CASTILLO, DOUBLE ANAEROBIC WASHED, コロンビア&lt;/li&gt;
  &lt;li&gt;NYERI MAGANJO, SL&lt;sub&gt;28&lt;/sub&gt;SL&lt;sub&gt;32&lt;/sub&gt;RUIRU&lt;sub&gt;11&lt;/sub&gt;, Fully Washed, ケニア&lt;/li&gt;
  &lt;li&gt;Fazenda Guariroba, Yellow Catuai, Double Fermentation Black Honey, ブラジル&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;p&gt;を書くつもりが、そもそも感想メモをほとんど残していなかった。いくつか残しているのでそれを。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EL PARAISO RED FRUITS: 別ロットはピーチティのような感じであったが、今回はかなりフルーティな味でライチな感じです。&lt;/li&gt;
  &lt;li&gt;Fazenda Guariroba: 香りが柑橘系というかレモンの香りがする。味はスッキリしてて口に含んだ酸味は少なく、後味としての酸味が強くのこって美味しい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;1年くらい前に社内 &lt;strong&gt;Slack&lt;/strong&gt; にコーヒーの感想をまとめるためのチャンネル作ったけど、
まったく活用していなくて感想がほとんど残っていない。
おいしいこと以外は思いだせるわけもなく……&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:coffee&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;ここ1,2年コーヒー飲みすぎると胃が痛くなるのに気がついた。 &lt;a href=&quot;#fnref:coffee&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="diary" /><summary type="html">今年もコロナでどこにも行くにしても行きにくかったし、 店もどこもあまりやってなかったようだったので今年も酒ではないまとめを。</summary></entry><entry><title type="html">custom CO2-mini で CO2 を見えるようにしよう</title><link href="https://blog.katsyoshi.org/blog/2021/12/30/custom-co2mini-co2-sensor/" rel="alternate" type="text/html" title="custom CO2-mini で CO2 を見えるようにしよう" /><published>2021-12-30T16:59:59+09:00</published><updated>2021-12-30T16:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2021/12/30/custom-co2mini-co2-sensor</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2021/12/30/custom-co2mini-co2-sensor/">&lt;p&gt;コロナになって結構前に &lt;a href=&quot;https://www.kk-custom.co.jp/emp/CO2-mini.html&quot;&gt;&lt;strong&gt;custom CO2-mini&lt;/strong&gt;&lt;/a&gt;
に &lt;a href=&quot;https://www.itmedia.co.jp/pcuser/articles/2012/18/news069.html&quot;&gt;話題になった&lt;/a&gt;
ので買って放置してあったの&lt;sup id=&quot;fnref:buy-co2mon&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:buy-co2mon&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; を活用しようと思いたった。
とりあえず値は取得はできているので &lt;a href=&quot;https://meckerel.io&quot;&gt;&lt;strong&gt;mackerel&lt;/strong&gt;&lt;/a&gt; との連携をしてグラフに表示できるようにします。
あと  &lt;strong&gt;mercker-plugin&lt;/strong&gt; を &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt; で書いてみたいとおもったので、やってみることにしました。&lt;/p&gt;

&lt;p&gt;以下のリポジトリにコードはあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/katsyoshi/mackerel-plugin-co2mon&quot;&gt;&lt;img src=&quot;https://gh-card.dev/repos/katsyoshi/mackerel-plugin-co2mon.svg&quot; alt=&quot;katsyoshi/mackerel-plugin-co2mon - GitHub&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;mackerel-plugin-として作る&quot;&gt;mackerel plugin として作る&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;mackerel&lt;/strong&gt; に投稿する前にこの &lt;strong&gt;custom CO2-mini&lt;/strong&gt; が &lt;strong&gt;Rust&lt;/strong&gt; で読めるのかを調査してみましたら、&lt;a href=&quot;https://crates.io/crates/co2mon&quot;&gt;&lt;strong&gt;co2mon&lt;/strong&gt;&lt;/a&gt; がピンズドな感じでありました。
確認としてセンサーの読み込みは &lt;strong&gt;co2mon&lt;/strong&gt; の &lt;a href=&quot;https://github.com/lnicola/co2mon#permissions&quot;&gt;README の通り&lt;/a&gt; にやることで読みとることができます。&lt;/p&gt;

&lt;p&gt;センサーの値が読み込めるようになったら、今度は &lt;strong&gt;mackerel&lt;/strong&gt; へ投げれるようにします。
と言ってもやることは &lt;a href=&quot;https://mackerel.io/ja/docs/entry/advanced/custom-metrics#post-metric&quot;&gt;公式にあるよう&lt;/a&gt; に以下のフォーマットで標準出力に出すだけのようです。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{metric name}\t{metric value}\t{unix epoch time}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ということなので適当に &lt;strong&gt;metric name&lt;/strong&gt; を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CO2MINI.co2/temp.living&lt;/code&gt; &lt;sup id=&quot;fnref:custom-co2mini&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:custom-co2mini&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; にして出力しています。
&lt;strong&gt;mackerel-plugin&lt;/strong&gt; として動かすために、 &lt;strong&gt;mackerel-agent.conf&lt;/strong&gt; に以下のような設定を追加し、再起動することでグラフが追加できます。&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[plugin.metrics.CO2MINI]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;/path/to/build/bin/mackerel-plugin-co2mon&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;グラフは以下のように表示されました!やったね!
&lt;img src=&quot;/images/screenshot/co2mini-metrics.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;おわり&quot;&gt;おわり&lt;/h2&gt;

&lt;p&gt;ずっとやろうやろうと思ってた &lt;strong&gt;Rust&lt;/strong&gt; で &lt;strong&gt;mackerel&lt;/strong&gt; のプラグイン作成、
面倒で先延しにしてたのですが、チョットやってみたらすぐにできたのでよかったです。
今後としては &lt;strong&gt;CO&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt; の値に応じて窓開けたりできるようにしたいなあと思っています&lt;sup id=&quot;fnref:window&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:window&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:buy-co2mon&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Amazon で確認したら買ったの 2020/03 だった…… &lt;a href=&quot;#fnref:buy-co2mon&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:custom-co2mini&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;mackerel のグラフ表示部分のタイトルが &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom.CO2MINI.co2.living&lt;/code&gt; となり、メーカー名も入っていいじゃんとなった。 &lt;a href=&quot;#fnref:custom-co2mini&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:window&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;窓開閉する道具もないのでそこから仕入れる必要がありいつになるか不明です。 &lt;a href=&quot;#fnref:window&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="diary" /><category term="tech" /><summary type="html">コロナになって結構前に custom CO2-mini に 話題になった ので買って放置してあったの1 を活用しようと思いたった。 とりあえず値は取得はできているので mackerel との連携をしてグラフに表示できるようにします。 あと mercker-plugin を Rust で書いてみたいとおもったので、やってみることにしました。 Amazon で確認したら買ったの 2020/03 だった…… &amp;#8617;</summary></entry><entry><title type="html">いんとろでぅーす xremap</title><link href="https://blog.katsyoshi.org/blog/2021/12/26/xremap/" rel="alternate" type="text/html" title="いんとろでぅーす xremap" /><published>2021-12-26T13:59:59+09:00</published><updated>2021-12-26T13:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2021/12/26/xremap</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2021/12/26/xremap/">&lt;p&gt;仕事で利用したりしている &lt;strong&gt;Slack&lt;/strong&gt; などのキーボードでの操作が面倒になってきたので、
&lt;strong&gt;emacs keybind&lt;/strong&gt; が利用できるようにするため &lt;a href=&quot;https://github.com/k0kubun/xremap&quot;&gt;&lt;strong&gt;xremap&lt;/strong&gt;&lt;/a&gt; を利用することにした。&lt;/p&gt;

&lt;p&gt;この記事はその利用するまでの顛末をメモとして残す。&lt;/p&gt;

&lt;h2 id=&quot;導入&quot;&gt;導入&lt;/h2&gt;

&lt;p&gt;これは、さくっと &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo install xremap&lt;/code&gt; でインストールできます。
&lt;a href=&quot;https://www.rust-lang.org&quot;&gt;&lt;strong&gt;rust&lt;/strong&gt;&lt;/a&gt; をまだ導入していない方は &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;公式ページのインストール&lt;/a&gt; を参考にインストールしてください。&lt;/p&gt;

&lt;h2 id=&quot;起動&quot;&gt;起動!!!&lt;/h2&gt;

&lt;p&gt;これも簡単で以下のコマンドで起動します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xremap /path/to/your/xremap/config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;エラーに遭遇&quot;&gt;エラーに遭遇&lt;/h3&gt;

&lt;p&gt;起動してみると以下のようなメッセージが出て起動ができませんでした。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Selecting devices from the following list:
------------------------------------------------------------------------------
/dev/input/event0 : Power Button
/dev/input/event1 : Power Button
/dev/input/event2 : HDA NVidia HDMI/DP,pcm=3
/dev/input/event3 : HDA NVidia HDMI/DP,pcm=7
/dev/input/event4 : HDA NVidia HDMI/DP,pcm=8
/dev/input/event5 : HDA NVidia HDMI/DP,pcm=9
/dev/input/event6 : HDA NVidia HDMI/DP,pcm=10
/dev/input/event7 : HDA NVidia HDMI/DP,pcm=11
/dev/input/event8 : Pekaso The Fortitude60 Keyboard
/dev/input/event9 : Pekaso The Fortitude60 Keyboard Mouse
/dev/input/event10: Pekaso The Fortitude60 Keyboard System Control
/dev/input/event11: Pekaso The Fortitude60 Keyboard Consumer Control
/dev/input/event12: Kensington Kensington Slimblade Trackball
/dev/input/event13: Burr-Brown from TI               USB Audio CODEC
/dev/input/event14: HD Web Camera: HD Web Camera
------------------------------------------------------------------------------
Selected keyboards automatically since --device options weren&apos;t specified:
------------------------------------------------------------------------------
/dev/input/event8 : Pekaso The Fortitude60 Keyboard
------------------------------------------------------------------------------
Error: Failed to build an output device: no such file or directory (os error 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で、答えは出てるので設定ファイル、対象となる入力デバイスなどを見ますが、
これらのファイルはあるのでわからんとなります。&lt;/p&gt;

&lt;p&gt;しかたないのでソースをダウンロードして手元でデバッグしてみます。
&lt;strong&gt;rust&lt;/strong&gt; というか &lt;strong&gt;cargo&lt;/strong&gt; は便利で、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo run&lt;/code&gt; でソースをいじったあとすぐにコンパイルして利用することができます。
今回はメンドウなので怪しいところに &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;println&lt;/code&gt; 文を挿入して実行してみます。
そうすると、どうやら &lt;a href=&quot;https://github.com/k0kubun/xremap/blob/f058c444335c153e638ecf3c76492cdf9f8a975d/src/output.rs#L39-L43&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/output.rs&lt;/code&gt; の 39 行目の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualDeviceBuilder&lt;/code&gt; に問題がありそう&lt;/a&gt; ということがわかりました。&lt;/p&gt;

&lt;p&gt;この行のどこに問題あるんだ？と思い利用しているこのライブラリ &lt;a href=&quot;https://docs.rs/evdev&quot;&gt;&lt;strong&gt;evdev&lt;/strong&gt;&lt;/a&gt; を見ることにしました&lt;sup id=&quot;fnref:evdev-rs&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:evdev-rs&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。
そうすると &lt;a href=&quot;https://docs.rs/evdev/latest/src/evdev/uinput.rs.html#13&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/uinput&lt;/code&gt; が必要&lt;/a&gt; ということがわかります。
それで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/uinput&lt;/code&gt; があるかどうか &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; で見ますが、当然無いので無いです。
なぜ無いのかというと &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INPUT_UINPUT&lt;/code&gt; でドライバーを入れていなかったようです。
なのでカーネルのビルトインとしてビルドして再起動。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Defined at drivers/input/misc/Kconfig:513
     Prompt: User level driver support
     Depends on: INPUT [=y] &amp;amp;&amp;amp; INPUT_MISC [=y]
     Location:
       -&amp;gt; Device Drivers
         -&amp;gt; Input device support
           -&amp;gt; Generic input layer (needed for keyboard, mouse, ...) (INPUT [=y])
             -&amp;gt; Miscellaneous devices (INPUT_MISC [=y])
               -&amp;gt; User level driver support
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再起動したら、確認を行ないます。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ xremap ~/.config/xremap/config.yml
Selecting devices from the following list:
------------------------------------------------------------------------------
/dev/input/event0 : Power Button
/dev/input/event1 : Power Button
/dev/input/event2 : HDA NVidia HDMI/DP,pcm=3
/dev/input/event3 : HDA NVidia HDMI/DP,pcm=7
/dev/input/event4 : HDA NVidia HDMI/DP,pcm=8
/dev/input/event5 : HDA NVidia HDMI/DP,pcm=9
/dev/input/event6 : HDA NVidia HDMI/DP,pcm=10
/dev/input/event7 : HDA NVidia HDMI/DP,pcm=11
/dev/input/event8 : Pekaso The Fortitude60 Keyboard
/dev/input/event9 : Pekaso The Fortitude60 Keyboard Mouse
/dev/input/event10: Pekaso The Fortitude60 Keyboard System Control
/dev/input/event11: Pekaso The Fortitude60 Keyboard Consumer Control
/dev/input/event12: Kensington Kensington Slimblade Trackball
/dev/input/event13: Burr-Brown from TI               USB Audio CODEC
/dev/input/event14: HD Web Camera: HD Web Camera
------------------------------------------------------------------------------
Selected keyboards automatically since --device options weren&apos;t specified:
------------------------------------------------------------------------------
/dev/input/event8 : Pekaso The Fortitude60 Keyboard
------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yatta 起動できた!
あとは、アプリでキーバインドが効いているかどうかを確認して、
&lt;strong&gt;Window Manager&lt;/strong&gt; である &lt;strong&gt;i3&lt;/strong&gt; の起動時に &lt;strong&gt;xremap&lt;/strong&gt; が起動するようにしたりしています。&lt;/p&gt;

&lt;h2 id=&quot;おわり&quot;&gt;おわり&lt;/h2&gt;
&lt;p&gt;最近、 &lt;strong&gt;Mac&lt;/strong&gt; との行き来をしていると &lt;strong&gt;emacs keybind&lt;/strong&gt; が使えないときにちょっといらっとしますので使えるようにキーバインドを変更してみました。
設定ファイルの動的読み込みに対応していないのがちょっと面倒なのですが&lt;sup id=&quot;fnref:hotreload&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:hotreload&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;、これで &lt;strong&gt;Slack&lt;/strong&gt; などで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a&lt;/code&gt; で行頭にもどれるようになりました。便利。&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:evdev-rs&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;はじめは似た名前のライブラリの &lt;a href=&quot;https://github.com/ndesh26/evdev-rs&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;evdev-rs&lt;/code&gt;&lt;/a&gt; を見てたのですが、対象であるはずのファイル内に宣言されていないのでちょっととまどい、このライブラリは違うやつだとなり &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt; で再検索して発見しています。 &lt;a href=&quot;#fnref:evdev-rs&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hotreload&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;どうせ1回確認できたら再起動する必要はないので問題ないといえば問題ないけど、ちょっと面倒。 &lt;a href=&quot;#fnref:hotreload&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="diary" /><summary type="html">仕事で利用したりしている Slack などのキーボードでの操作が面倒になってきたので、 emacs keybind が利用できるようにするため xremap を利用することにした。</summary></entry><entry><title type="html">やんちゃクラブとRubyistと川</title><link href="https://blog.katsyoshi.org/blog/2021/12/06/yancya-club-and-rubyist/" rel="alternate" type="text/html" title="やんちゃクラブとRubyistと川" /><published>2021-12-06T23:59:59+09:00</published><updated>2021-12-06T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2021/12/06/yancya-club-and-rubyist</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2021/12/06/yancya-club-and-rubyist/">&lt;p&gt;おはようございます、 2021年、12月6日 のよるだったり、12月7日の朝だったりします。&lt;/p&gt;

&lt;p&gt;これは &lt;a href=&quot;https://adventar.org/calendars/6668&quot;&gt;やんちゃクラブリスナーアドベントカレンダー&lt;/a&gt; の6日目だったり、
&lt;a href=&quot;https://adventar.org/calendars/6777&quot;&gt;Rubyist近況[1]アドベントカレンダー&lt;/a&gt; の7日目だったりします。&lt;/p&gt;

&lt;p&gt;最近仕事としては Rails 6.1 にしたり、 Ruby-3.0 にしてたり、java 書いてたりしています。&lt;/p&gt;

&lt;p&gt;コロナになり、RubyKaigi後恒例の &lt;strong&gt;川&lt;/strong&gt; がなくなってかなりさみしい思いをしている方もいらっしゃるとおもいますので、
東京近郊でのよい &lt;strong&gt;川&lt;/strong&gt; をまとめてみたいとおもいます。&lt;/p&gt;

&lt;h2 id=&quot;川&quot;&gt;川&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/maps/place/%E3%80%92120-0034+%E6%9D%B1%E4%BA%AC%E9%83%BD%E8%B6%B3%E7%AB%8B%E5%8C%BA%E5%8D%83%E4%BD%8F%EF%BC%95%E4%B8%81%E7%9B%AE/@35.7563561,139.8029477,17z/data=!3m1!4b1!4m5!3m4!1s0x60188e4823ec7b73:0xf626ddac28b8deac!8m2!3d35.7562782!4d139.8054747&quot;&gt;荒川： 虹の広場&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/maps/place/%E5%8F%B0%E6%9D%B1%E5%8C%BA%E7%AB%8B+%E9%9A%85%E7%94%B0%E5%85%AC%E5%9C%92/@35.7247541,139.8060852,15.75z/data=!4m9!1m2!2m1!1z5aKo55Sw5YWs5ZyS!3m5!1s0x60188ec349138a67:0xc95c03b0375fa0d7!8m2!3d35.7107642!4d139.7982715!15sCgzloqjnlLDlhazlnJJaDyIN5aKo55SwIOWFrOWckpIBBHBhcms&quot;&gt;墨田川： 墨田公園&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/maps/place/%E3%80%92214-0003+%E7%A5%9E%E5%A5%88%E5%B7%9D%E7%9C%8C%E5%B7%9D%E5%B4%8E%E5%B8%82%E5%A4%9A%E6%91%A9%E5%8C%BA%E8%8F%85%E7%A8%B2%E7%94%B0%E5%A0%A4%EF%BC%92%E4%B8%81%E7%9B%AE%EF%BC%91%EF%BC%90%E2%88%92%EF%BC%92%EF%BC%92/@35.6383952,139.5346417,18z/data=!3m1!4b1!4m5!3m4!1s0x6018f07a89b9d099:0x77385278ffea0854!8m2!3d35.6383952!4d139.535736&quot;&gt;多摩川： 稲田堤&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/maps/search/%E3%80%92272-0111+%E5%8D%83%E8%91%89%E7%9C%8C%E5%B8%82%E5%B7%9D%E5%B8%82%E5%A6%99%E5%85%B8%EF%BC%96%E4%B8%81%E7%9B%AE%EF%BC%91%E2%88%92%EF%BC%91/@35.6945582,139.9282683,17z/data=!3m1!4b1&quot;&gt;江戸川： 妙典公園、江戸川河川敷緑地&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;荒川-虹の広場&quot;&gt;荒川： 虹の広場&lt;/h3&gt;

&lt;p&gt;ここは &lt;a href=&quot;https://twitter.com/yancya&quot;&gt;yancyaさん&lt;/a&gt; の地元で一緒によく行く川です。
ここの &lt;strong&gt;最高&lt;/strong&gt; は大きな街(北千住)が近く、ふらっと行っても調達が楽なところで、たべもの、のみものなんでも楽に調達できます。
とくにのみものは国外のクラフトビールがたくさん買える場所あるので &lt;strong&gt;最高&lt;/strong&gt; なのと、クラフトビール作ってる場所があるので &lt;strong&gt;最高&lt;/strong&gt; なのです。
また、公園のような場所なので花火できます。バーベキューとか火を使うのは岩渕水門あたりじゃないとできないので気をつけてください。&lt;/p&gt;

&lt;p&gt;周りに邪魔をするようなものがとくにないので、日の入りやスカイツリーが綺麗に見えます。
そばに電車(東武伊勢崎線、TX、常磐線)が通っているので電車を眺めるのもいいです。&lt;/p&gt;

&lt;p&gt;時期としては春から秋にかけて行くのが &lt;strong&gt;最高&lt;/strong&gt; ですね。冬はまだ行ったことないのでそのうち試してみるかもしれないです。&lt;/p&gt;

&lt;h3 id=&quot;墨田川-墨田公園&quot;&gt;墨田川： 墨田公園&lt;/h3&gt;

&lt;p&gt;墨田公園といえば &lt;a href=&quot;https://www.sakuranokai.or.jp/information/local5/&quot;&gt;さくらの名所100選&lt;/a&gt; に選ばれるほどの桜の名所です。
ここも浅草という大きな街が近くなので、調達が楽です。しかしながら、桜の季節は人が多いので調達は事前にして &lt;strong&gt;川&lt;/strong&gt; するのがよいです。&lt;/p&gt;

&lt;p&gt;見所としてはもちろん桜です。ここも東武伊勢崎線がとおってるのと、浅草名物アサヒビールの建物、スカイツリーが見えるので桜の時期とくに映えますね。
やんちゃクラブで紹介されたように、水上バスの発着場があるので水上バスを利用するのもおもしろいと思います。&lt;/p&gt;

&lt;p&gt;時期としては &lt;strong&gt;最高&lt;/strong&gt; なのはもちろん桜の時期です。それ以外の時期でも場所が浅草なので、風が強い日以外はオールシーズン &lt;strong&gt;川&lt;/strong&gt; デキルと思います。
風が強かったら逃げれる場所たくさんあるのでよいですよ。&lt;/p&gt;

&lt;h3 id=&quot;多摩川-稲田堤&quot;&gt;多摩川： 稲田堤&lt;/h3&gt;

&lt;p&gt;ここの &lt;strong&gt;最高&lt;/strong&gt; さは、&lt;a href=&quot;https://tabelog.com/kanagawa/A1405/A140506/14014188/&quot;&gt;たぬきや&lt;/a&gt; という夏の間だけやっている(と飲み仲間に教えてもらった)
川の家があったのですが、去年あたりに終ってしまった。川辺にあるお店で、川を眺めながら飲むビールとか &lt;strong&gt;最高&lt;/strong&gt; でした。&lt;/p&gt;

&lt;p&gt;見所としては今説明したたぬきやです。ジェットスキーとかできるんならもっと楽しめるんじゃないんですかね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最高&lt;/strong&gt; な時期としては夏だったのですが、もう行ってもね……&lt;/p&gt;

&lt;h3 id=&quot;江戸川-妙典公園江戸川河川敷緑地&quot;&gt;江戸川： 妙典公園、江戸川河川敷緑地&lt;/h3&gt;

&lt;p&gt;ここは虹の広場とは違い、バーベキュー場があり火が使えるようです。火が使えるのでスモークとかやると &lt;strong&gt;最高&lt;/strong&gt; かと。
ただ、駅から遠いのと、街が近くないので調達は事前にやっておくとよいです。近くに大型スーパーがあるのですが、クラフトビールなどの飲みものがイマイチ(個人的感想)です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最高&lt;/strong&gt; な時期は夏じゃないですかね、BBQとかはよくわからないですが……&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;最高&lt;/strong&gt; な東京の &lt;strong&gt;川&lt;/strong&gt; をまとめてみました。コロナのため最近 &lt;strong&gt;川&lt;/strong&gt; できていないですので、みんなコロナ開けたら &lt;strong&gt;川&lt;/strong&gt; しような!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://adventar.org/calendars/6668&quot;&gt;やんちゃクラブリスナーアドベントカレンダー&lt;/a&gt; の次は12/7の &lt;a href=&quot;https://twitter.com/igaiga555&quot;&gt;igaigaさん&lt;/a&gt; です。
&lt;a href=&quot;https://adventar.org/calendars/6777&quot;&gt;Rubyist近況[1]アドベントカレンダー&lt;/a&gt; の次は12/10のKirika_K2さんです。&lt;/p&gt;</content><author><name></name></author><category term="diary" /><summary type="html">おはようございます、 2021年、12月6日 のよるだったり、12月7日の朝だったりします。</summary></entry><entry><title type="html">Octopress 脱出</title><link href="https://blog.katsyoshi.org/blog/2021/09/13/good-bye-octopress/" rel="alternate" type="text/html" title="Octopress 脱出" /><published>2021-09-13T00:00:00+09:00</published><updated>2021-09-13T00:00:00+09:00</updated><id>https://blog.katsyoshi.org/blog/2021/09/13/good-bye-octopress</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2021/09/13/good-bye-octopress/">&lt;p&gt;長年利用してた &lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress&lt;/a&gt; がずいぶん前にサポート外になってたので &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll&lt;/a&gt; へ変更することにした。&lt;/p&gt;

&lt;h2 id=&quot;問題点&quot;&gt;問題点&lt;/h2&gt;

&lt;p&gt;サポート外になったことによる問題点があり、その問題によって変更することになった。
問題点としては、 &lt;em&gt;&lt;a href=&quot;https://rubygems.org/gems/pygments.rb&quot;&gt;Pygments.rb&lt;/a&gt;&lt;/em&gt; と &lt;em&gt;&lt;a href=&quot;https://rubygems.org/gems/compass&quot;&gt;Compass&lt;/a&gt;&lt;/em&gt; と利用している &lt;em&gt;&lt;a href=&quot;https://ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;&lt;/em&gt; のバージョンが 2.3.7 というのが主であった。&lt;/p&gt;

&lt;h2 id=&quot;変更&quot;&gt;変更&lt;/h2&gt;
&lt;p&gt;やったことは以下のとおり。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;gem の整理
    &lt;ul&gt;
      &lt;li&gt;最初に不要な &lt;em&gt;gem&lt;/em&gt; を削除。特に消したいのは &lt;em&gt;Pygments.rb&lt;/em&gt; と &lt;em&gt;Compass&lt;/em&gt; それ以外にも不要なものがあるので消す。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ディレクトリの整理
    &lt;ul&gt;
      &lt;li&gt;posts は元々の設定が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source/_posts&lt;/code&gt; に入れていたが、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; に変更&lt;/li&gt;
      &lt;li&gt;画像も同様に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source/images&lt;/code&gt; だったものを &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt; に変更&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;テンプレートの整理
    &lt;ul&gt;
      &lt;li&gt;テンプレート &lt;em&gt;&lt;a href=&quot;https://rubygems.org/gems/minima&quot;&gt;minima&lt;/a&gt;&lt;/em&gt; を利用するにあたり &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; などの中身を整理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;プラグインの整理
    &lt;ul&gt;
      &lt;li&gt;いまのところ &lt;em&gt;&lt;a href=&quot;https://rubygems.org/gems/jekyll-paginate-v2&quot;&gt;jekyll-paginate-v2&lt;/a&gt;&lt;/em&gt; のみ変更で他は入れていない。&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;そのうち theme も含めて検討したい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/rake&quot;&gt;Rake コマンド&lt;/a&gt; の整理
    &lt;ul&gt;
      &lt;li&gt;とりあえず octopress で利用してた &lt;em&gt;Rakefile&lt;/em&gt; から必要最低限の変更のみ実行。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;日曜日の夜中 &lt;strong&gt;&lt;a href=&quot;/blog/2021/09/12/takout-dot-rubykaigi-dot-org-2021/&quot;&gt;RubyKaigi の日記&lt;/a&gt;&lt;/strong&gt; をポストしてからこのリポジトリを &lt;em&gt;jekyll&lt;/em&gt; にしようと &lt;strong&gt;雑に&lt;/strong&gt; 弄ってたら、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake generate&lt;/code&gt; が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unknown language: xml&lt;/code&gt; という謎の &lt;em&gt;Pygments&lt;/em&gt; エラーが出てしまった。
このエラーを修正しようとしがんばってみたが、失敗して修正できなかったので &lt;em&gt;jekyll&lt;/em&gt; に変更したものでデプロイした。&lt;/p&gt;

&lt;p&gt;そんなこんなあって &lt;em&gt;Octopress&lt;/em&gt; はやめて &lt;em&gt;jekyll&lt;/em&gt; に変更しました。&lt;/p&gt;</content><author><name></name></author><category term="diary" /><summary type="html">長年利用してた Octopress がずいぶん前にサポート外になってたので Jekyll へ変更することにした。</summary></entry></feed>