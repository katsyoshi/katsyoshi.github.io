<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.katsyoshi.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.katsyoshi.org/" rel="alternate" type="text/html" /><updated>2024-05-27T21:00:52+09:00</updated><id>https://blog.katsyoshi.org/feed.xml</id><title type="html">katsyoshi のめもみたいなの</title><subtitle>It&apos;s a memos.</subtitle><entry><title type="html">最果ての沖縄に行ってきた</title><link href="https://blog.katsyoshi.org/blog/2024/05/26/trip-saihate-okinawa/" rel="alternate" type="text/html" title="最果ての沖縄に行ってきた" /><published>2024-05-26T23:59:59+09:00</published><updated>2024-05-26T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/26/trip-saihate-okinawa</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/26/trip-saihate-okinawa/"><![CDATA[<p><a href="https://rubykaigi.org/2024"><strong>RubyKaigi2024</strong></a> の翌日 2024-05-18 から五日間 2024-05-22 まで辺戸岬に滞在したはなし。</p>

<h2 id="1-日目">1 日目</h2>

<h2 id="2-日目">2 日目</h2>

<h2 id="3-日目">3 日目</h2>

<h2 id="4-日目">4 日目</h2>

<h2 id="last-day">LAST DAY</h2>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[RubyKaigi2024 の翌日 2024-05-18 から五日間 2024-05-22 まで辺戸岬に滞在したはなし。]]></summary></entry><entry><title type="html">RubyKaigi2024 @沖縄</title><link href="https://blog.katsyoshi.org/blog/2024/05/14/rubykaigi-2024/" rel="alternate" type="text/html" title="RubyKaigi2024 @沖縄" /><published>2024-05-14T23:59:59+09:00</published><updated>2024-05-14T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/14/rubykaigi-2024</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/14/rubykaigi-2024/"><![CDATA[<p>沖縄だったのでいってきました。</p>

<h2 id="day-0">Day 0</h2>

<p>開始日の前日、この日に沖縄に入りました。この日は15:30発の飛行機にしました。
これはこの日の夜のイベントに参加するための時間にしたつもりでした。
つもりとは、今回 <a href="https://rubykaigi.org/2024"><strong>RubyKaigi</strong></a> ではプレチェックインが19:00まで行なわれているのをメールでもらい、
急遽 <a href="https://www.nahart.jp/"><strong>RubyKaigi</strong> 会場</a>へ寄ることにしました。
プレチェックインでは、沖縄気分な格好をして行ったのですが、それ以上に沖縄楽しみにしてる格好のひとが居てびっくり。
チェックインを済ませて宿へ行き荷物を置いて<a href="https://esminc.doorkeeper.jp/events/171826">船上パーティ</a>へ。
この帰りに二次会へ<a href="https://churayagi.com/sakedokoro-yocchan/">山羊刺しがある居酒屋</a>へ行きました。</p>

<h2 id="day-1">Day 1</h2>

<p>みたセッションは以下になります</p>

<ol>
  <li><a href="https://drive.google.com/file/d/1Dkx15u_5UAGoFqJHCeAuj2FXS-z_U7EE/view">Writing Weird Code</a></li>
  <li><a href="https://speakerdeck.com/yui_knk/the-grand-strategy-of-ruby-parser">The grand strategy of Ruby Parser</a></li>
  <li><a href="">Strings! Interpolation, Optimisation &amp; Bugs</a></li>
  <li><a href="https://speakerdeck.com/tagomoris/namespace-what-and-why">Namespace, What and Why</a></li>
  <li><a href="https://www.atdot.net/~ko1/activities/2024_rubykaigi.pdf">Ractor Enhancements, 2024</a></li>
</ol>

<h3 id="writing-weird-code"><a href="https://drive.google.com/file/d/1Dkx15u_5UAGoFqJHCeAuj2FXS-z_U7EE/view">Writing Weird Code</a></h3>

<p>本年は三日間平日だからか Matz のキーノート開始ではなく、<a href="https://github.com/tompng">ぺんさん</a> ではじまりでした。うんまあ、ひとつひとつの話はわかるんだけど、どうしてそうなるのかわからないことをたくさん話されました。</p>

<h3 id="the-grand-strategy-of-ruby-parser"><a href="https://speakerdeck.com/yui_knk/the-grand-strategy-of-ruby-parser">The grand strategy of Ruby Parser</a></h3>

<p>ことしは(も？)パーサー元年な発表だった。<strong>パーサーギャング</strong> の親分こと <a href="https://github.com/yui-knk">金子さん</a> の発表で、去年の発表のあとどのように開発をし、これからどのような機能を開発していくのか、今回でどんな形になったのかを話してくれました。</p>

<h3 id="strings-interpolation-optimisation--bugs"><a href="">Strings! Interpolation, Optimisation &amp; Bugs</a></h3>

<h3 id="namespace-what-and-why"><a href="https://speakerdeck.com/tagomoris/namespace-what-and-why">Namespace, What and Why</a></h3>

<p><a href="https://github.com/tagomoris">@tagomoris</a>さんの全 <strong>rubyist</strong><sup id="fnref:rubyist" role="doc-noteref"><a href="#fn:rubyist" class="footnote" rel="footnote">1</a></sup> 待望の機能である <strong>Namespace</strong> の思想、実装の話です。
似た機能として <a href="https://docs.ruby-lang.org/ja/latest/method/Module/i/refine.html"><strong>Refinments</strong></a> があるのですが
機能として分かれているのも便利そう。
<strong>Namespace</strong> で区切ることでライブラリがより便利に、より安全に利用できそうでした。</p>

<h3 id="ractor-enhancements-2024"><a href="https://www.atdot.net/~ko1/activities/2024_rubykaigi.pdf">Ractor Enhancements, 2024</a></h3>

<p><strong>Ractor</strong> のお話。</p>

<h3 id="オフィシャルパーティー"><a href="https://ti.to/rubykaigi/2024-party">オフィシャルパーティー</a></h3>

<p>オフィシャルパーティーは<a href="https://www.naminouebeach.jp/">波の上うみそら公園</a>のビーチでBBQ(BBQエリア)とパリピだった。</p>

<h2 id="day-2">Day 2</h2>

<ol>
  <li><a href="">Leveraging Falcon and Rails for Real-Time Interactivity</a></li>
  <li><a href="">Does Ruby Parser dream of highly expressive grammar?</a></li>
  <li><a href="https://speakerdeck.com/soutaro/embedding-it-into-ruby-code">Embedding it into Ruby code</a></li>
  <li><a href="https://code.jeremyevans.net/presentations/rubykaigi2024/index.html#1">Reducing Implicit Allocations During Method Calling</a></li>
  <li><a href="https://speakerdeck.com/ahogappa0613/its-about-time-to-pack-ruby-and-ruby-scripts-in-one-binary">It’s about time to pack Ruby and Ruby scripts in one binary</a></li>
  <li><a href="https://drive.google.com/file/d/1-YZR91umkQIngFIq5VDGrz_XcLoq3Ny3/view">Running Optcarrot (faster) on my own Ruby.</a></li>
  <li>Lightning Talks</li>
</ol>

<h3 id="leveraging-falcon-and-rails-for-real-time-interactivity"><a href="">Leveraging Falcon and Rails for Real-Time Interactivity</a></h3>

<p><a href="https://github.com/ioquatix">サミュエル</a> の <strong>Async</strong> を使うことによって速くするにはの話。</p>

<h3 id="does-ruby-parser-dream-of-highly-expressive-grammar"><a href="https://speakerdeck.com/ydah/does-ruby-parser-dream-of-highly-expressive-grammar">Does Ruby Parser dream of highly expressive grammar?</a></h3>

<p><a href="https://github.com/ydah/">@ydah_</a> さんの発表。もともと見る予定ではなかったが、前日の発表を見てしまったので興味が出てきたので聴くことに。</p>

<h3 id="embedding-it-into-ruby-code"><a href="https://speakerdeck.com/soutaro/embedding-it-into-ruby-code">Embedding it into Ruby code</a></h3>

<p>みようと思ってたが、ランチ出るまでに時間が掛かりすぎてすこししか見れていない。</p>

<h3 id="reducing-implicit-allocations-during-method-calling"><a href="https://code.jeremyevans.net/presentations/rubykaigi2024/index.html#1">Reducing Implicit Allocations During Method Calling</a></h3>

<p><a href="https://www.lambdanote.com/products/polished-ruby"><strong>研鑽 Ruby プログラミング</strong></a> の著者<a href="https://github.com/jeremyevans">ジェレミー</a>の発表。</p>

<h3 id="its-about-time-to-pack-ruby-and-ruby-scripts-in-one-binary"><a href="https://speakerdeck.com/ahogappa0613/its-about-time-to-pack-ruby-and-ruby-scripts-in-one-binary">It’s about time to pack Ruby and Ruby scripts in one binary</a></h3>

<p><a href="https://github.com/ahogappa0613">@ahogappa0613</a> さんの発表で <strong>Ruby</strong> のプログラムを配るために <strong>One Binary</strong> にプログラムを梱包していくという発表でした。
<strong>One Binary</strong> を作る方法として、現在ある <strong>Ruby</strong> プログラムを静的リンクしてコンパイルして配る方法を採用していました。
この方法は <strong>Ruby</strong> 自体を書き替えるのが十分少なく行えそうなので期待できそうです。</p>

<h3 id="running-optcarrot-faster-on-my-own-ruby"><a href="https://drive.google.com/file/d/1-YZR91umkQIngFIq5VDGrz_XcLoq3Ny3/view">Running Optcarrot (faster) on my own Ruby.</a></h3>

<p>今年個人的 <strong>No.1</strong>。<a href="https://github.com/sisshiki1969">@isshiki1969</a> さんの発表で、 <strong>Ruby</strong> の <a href="https://www.rust-lang.org"><strong>Rust</strong></a> での実装だと聞いていたので楽しみにしていました。
聞いているとどうも <strong>Rust</strong> だけで作ってるわけじゃないぞとなっており、一部 <strong>Assembler</strong> でも作成されているようです。
必要な機能は実装されているようでしたが、まだ <a href="https://rubyonrails.org/"><strong>Ruby on Rails</strong></a> 動いていないようです。
とても速いので面白そうでした。</p>

<h3 id="lightning-talks">Lightning Talks</h3>

<p>前の発表が楽しすぎて少し遅れてはいりました。</p>

<h3 id="夕飯とカラオケ">夕飯とカラオケ</h3>

<p>この日の夕飯は会場近くで色々なディナー、パーティーが企画されてたのですが、どうしても行きたいディープな沖縄へ行きたかったのでそちらへ。
栄町市場の<a href="https://tabelog.com/okinawa/A4701/A470101/47001653/">べんり屋 玉玲瓏</a>へ行き、餃子を食べてきました。
帰りに <a href="https://rubykaigikaraoke.doorkeeper.jp/"><strong>RubyKaigiKaraoke</strong></a> が丁度いい時間だったので2曲ほど歌ってました。
だいたい22時ころに翌日発表する人主催のボドゲ会がはじまり、1時ごろ退出しました。</p>

<h2 id="day-3">Day 3</h2>
<p>聞いたセッションは以下です。前日の <strong>RubyKaigiKaraoke</strong> ではしゃいで疲れてるので記憶が曖昧です。</p>

<ol>
  <li>Ruby Committers and the World</li>
  <li><a href="https://speakerdeck.com/k0kubun/rubykaigi-2024">YJIT Makes Rails 1.7x Faster</a></li>
  <li><a href="">Speeding up Instance Variables with Red-Black Trees</a></li>
  <li><a href="https://speakerdeck.com/junk0612/from-lalr-to-ielr-a-lramas-next-step">From LALR to IELR: A Lrama’s Next Step</a></li>
  <li><a href="https://makenowjust.github.io/kantan-regex-book/">Make Your Own Regex Engine!</a></li>
  <li><a href="">Matz Keynote</a></li>
</ol>

<h3 id="ruby-committers-and-the-world">Ruby Committers and the World</h3>

<p>いつもどおりの感じが戻ってきた感じのセッションでした。ここで <strong>GVL</strong><sup id="fnref:gvl" role="doc-noteref"><a href="#fn:gvl" class="footnote" rel="footnote">2</a></sup> が出てとくに盛り上がってましたね。個人的に <strong>GVL</strong> を外してもはやくならないと思っていますが、無い状態での実行したときどのような挙動をするのか、はやくするにはどうするのか興味があります。この議論で <strong>Linux</strong> のメンテナーをやってる<a href="https://www.fujitsu.com/jp/about/global-fde/motohiro-kosaki/">小崎さん</a>が賛成してくれてたのでとても心強いなと。</p>

<h3 id="yjit-makes-rails-17x-faster"><a href="https://speakerdeck.com/k0kubun/rubykaigi-2024">YJIT Makes Rails 1.7x Faster</a></h3>

<p><a href="https://github.com/k0kubun">国分</a> さんの <a href="https://docs.ruby-lang.org/en/master/yjit/yjit_md.html"><strong>YJIT</strong></a> で <strong>Rails</strong> を動かすと速くなったという話。
タイトルに偽りがあり、曰く発表当日には1.8倍高速化されたそうです。</p>

<h3 id="speeding-up-instance-variables-with-red-black-trees"><a href="">Speeding up Instance Variables with Red-Black Trees</a></h3>

<p><a href="https://github.com/tenderlove">アーロン</a> の発表。<strong>インスタンス変数</strong> のデータ保持方法を<a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree"><strong>赤黒木</strong></a>で行う話でした。
<strong>赤黒木</strong>の説明を行い、どう実装していくかを日本語でやってくれました。</p>

<h3 id="from-lalr-to-ielr-a-lramas-next-step"><a href="https://speakerdeck.com/junk0612/from-lalr-to-ielr-a-lramas-next-step">From LALR to IELR: A Lrama’s Next Step</a></h3>

<p><a href="https://github.com/junk0612">コバジュン</a> の発表。
現在、<a href="https://github.com/ruby/lrama"><strong>Lrama</strong></a> を <a href="https://en.wikipedia.org/wiki/LALR_parser"><strong>LALR パーサー</strong></a>から
<a href="https://en.wikipedia.org/wiki/Scannerless_parsing"><strong>Scannerless パーサー</strong></a> を動かすために <strong>IELR パーサー</strong> に変更している話でした。</p>

<h3 id="make-your-own-regex-engine"><a href="https://makenowjust.github.io/kantan-regex-book/">Make Your Own Regex Engine!</a></h3>

<p><a href="https://github.com/makenowjust">藤波</a> さんの発表で、<strong>正規表現エンジン</strong> を <strong>Ruby</strong> で作る話。
意外と小さくできるようでおもしろそうな感じでした。</p>

<h3 id="matz-keynote"><a href="">Matz Keynote</a></h3>

<p>今年は <strong>Ruby4</strong> の話が出てきました。 <strong>Namespace</strong> が実装されて動けば <strong>Ruby4</strong> になるそうです。ガンバレモリスさん。
あと明確に <a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation"><strong>AOT コンパイラー</strong></a> が欲しいと言っていました。</p>

<h2 id="owari">owari</h2>

<p>今年も楽しいセッションが盛り沢山で休む暇がなく、全部たのしかったのですが、英語力と体力が足りないのを痛感しております。
セッション間の立ち話も興味深いのも多く、休みとはと思いながら過しておりました。</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:rubyist" role="doc-endnote">
      <p><a href="https://www.ruby-lang.org/">プログラミング言語 <strong>Ruby</strong></a> が好きな人たちのこと。 <a href="#fnref:rubyist" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:gvl" role="doc-endnote">
      <p>Giant Virtualmachine Lock の略。これがあるから遅いと主張している人たちがいる。 <a href="#fnref:gvl" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><category term="rubykaigi" /><category term="tech" /><summary type="html"><![CDATA[沖縄だったのでいってきました。]]></summary></entry><entry><title type="html">Sway 用 Window 切り替えを作った</title><link href="https://blog.katsyoshi.org/blog/2024/05/11/sway-window-switcher-using-wofi/" rel="alternate" type="text/html" title="Sway 用 Window 切り替えを作った" /><published>2024-05-11T23:59:59+09:00</published><updated>2024-05-11T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/11/sway-window-switcher-using-wofi</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/11/sway-window-switcher-using-wofi/"><![CDATA[<p>あたらしく PC 買って、 <strong>Linux</strong> の GUI 環境を <strong>X11</strong> から <strong>Wayland</strong> に乗り変えることにしました。
いままで利用していたデスクトップ環境を <a href="https://i3wm.org/"><strong>i3</strong></a> から <a href="https://swaywm.org/"><strong>sway</strong></a>
に変更しました。
最近利用していた <strong>macOS</strong> や <strong>i3</strong> ではあまり気にしていなかったのですが、<strong>Windows</strong> の <code class="language-plaintext highlighter-rouge">Alt+Tab</code> での
ウインドウ切り替えが便利だったのを思い出したのでこの便利な機能を模倣することにしました。</p>

<p>でも本当にほしいのは <code class="language-plaintext highlighter-rouge">Alt+Tab</code> の順番に切り変わるやつではなく、アクセスしたいウィンドウへの切り変えなのです。
そこでこの機能を <strong>ruby</strong> で実装することにしました。</p>

<h2 id="準備">準備</h2>

<p>準備として以下のソフトウェアがインストールされていることを期待しています。</p>

<ul>
  <li>window manager: <strong>i3</strong>/<strong>sway</strong></li>
  <li>launcher/menu program: <a href="https://hg.sr.ht/~scoopta/wofi"><strong>wofi</strong></a></li>
</ul>

<h2 id="作成">作成</h2>

<p>なにかしら実装あるだろうということで参考を探していたら<a href="https://gist.github.com/muniter/1c187e7c973accba463fb05c1402621f">見付けた</a>のでその実装を参考にします。
プログラムは以下になります。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require</span> <span class="s1">'bundler/inline'</span>

<span class="n">gemfile</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s2">"https://rubygems.org"</span>
  <span class="n">gem</span> <span class="s2">"i3ipc"</span>
<span class="k">end</span>

<span class="nb">require</span> <span class="s2">"i3ipc"</span>
<span class="nb">require</span> <span class="s2">"open3"</span>

<span class="k">class</span> <span class="nc">SwayWindowSwithcer</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">switch</span> <span class="o">=</span> <span class="n">new</span><span class="p">.</span><span class="nf">switch</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@conn</span> <span class="o">=</span> <span class="no">I3Ipc</span><span class="o">::</span><span class="no">Connection</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@workspaces</span> <span class="o">=</span> <span class="vi">@conn</span><span class="p">.</span><span class="nf">workspaces</span>
    <span class="vi">@windows</span> <span class="o">=</span> <span class="no">Set</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">set_windows</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">switch</span> <span class="o">=</span> <span class="vi">@conn</span><span class="p">.</span><span class="nf">command</span><span class="p">(</span><span class="s2">"[con_id=</span><span class="si">#{</span><span class="vi">@windows</span><span class="p">.</span><span class="nf">to_a</span><span class="p">[</span><span class="nb">open</span><span class="p">].</span><span class="nf">to_h</span><span class="p">[</span><span class="ss">:id</span><span class="p">]</span><span class="si">}</span><span class="s2">] focus"</span><span class="p">)</span>

  <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">list_window</span> <span class="o">=</span> <span class="vi">@windows</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">displays</span> <span class="o">=</span> <span class="vi">@conn</span><span class="p">.</span><span class="nf">tree</span><span class="p">.</span><span class="nf">nodes</span><span class="p">.</span><span class="nf">reject</span> <span class="p">{</span> <span class="o">|</span><span class="nb">display</span><span class="o">|</span> <span class="nb">display</span><span class="p">.</span><span class="nf">name</span> <span class="o">==</span> <span class="s2">"__i3"</span> <span class="p">}</span>
  <span class="k">def</span> <span class="nf">open</span>
    <span class="no">Open3</span><span class="p">.</span><span class="nf">popen3</span><span class="p">([</span><span class="s1">'wofi'</span><span class="p">,</span> <span class="s1">'-i'</span><span class="p">,</span> <span class="s1">'-k'</span><span class="p">,</span> <span class="s1">'/dev/null'</span><span class="p">,</span> <span class="s1">'-d'</span><span class="p">].</span><span class="nf">join</span> <span class="s2">" "</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">_e</span><span class="p">,</span> <span class="n">_w</span><span class="o">|</span>
      <span class="n">i</span><span class="p">.</span><span class="nf">puts</span> <span class="n">list_window</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
      <span class="n">i</span><span class="p">.</span><span class="nf">close</span>
      <span class="n">list_window</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="nf">read</span><span class="p">.</span><span class="nf">strip</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">set_windows</span>
    <span class="n">displays</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">display</span><span class="o">|</span>
      <span class="nb">display</span><span class="p">.</span><span class="nf">nodes</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">workspace</span><span class="o">|</span> <span class="vi">@windows</span> <span class="o">+=</span> <span class="n">workspace</span><span class="p">.</span><span class="nf">nodes</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">SwayWindowSwithcer</span><span class="p">.</span><span class="nf">switch</span>
</code></pre></div></div>

<p><strong>i3</strong> は <a href="https://i3wm.org/docs/ipc.html"><strong>IPC</strong> が定義</a> されています <sup id="fnref:ipc" role="doc-noteref"><a href="#fn:ipc" class="footnote" rel="footnote">1</a></sup> 。
今利用している <strong>sway</strong> は <strong>i3</strong> の <strong>wayland</strong> 向け実装なので <strong>IPC</strong> に互換性があります。
そのまま <strong>i3ipc</strong> 関連のライブラリを利用することが可能です。
ということで今回は <strong>ruby</strong> の <strong>gem</strong> として <strong>i3ipc.gem</strong> というそのままのやつがあったので利用します。
<strong>i3</strong> で起動しているウィンドウ一覧を取得して、名前を <strong>wofi</strong> に渡します。
ウィンドウ一覧を受け取った <strong>wofi</strong> は切り替えたいウィンドウを絞り込み、選択ができます。
切り替えたいウィンドウを選択したら、今度は <strong>i3</strong> へ選択したウィンドウへのフォーカスする命令を送ります。</p>

<p>ここで注意点として、二つありひとつ目は以下があります。
<strong>ruby</strong> の <strong>i3ipc</strong> は <code class="language-plaintext highlighter-rouge">I3Ipc::Connection</code> からでしかコマンドを送れないです<sup id="fnref:sanko" role="doc-noteref"><a href="#fn:sanko" class="footnote" rel="footnote">2</a></sup>。
そのためこのプログラムでは <code class="language-plaintext highlighter-rouge">@conn.command</code> でコマンドを送るとします。
このままではどのウインドウかはわからないので <strong>i3</strong> コマンドを送る際に <code class="language-plaintext highlighter-rouge">[con_id=id]</code> を付けます。
今回はウィンドウを切り替えることをしたいだけなので <code class="language-plaintext highlighter-rouge">[con_id=id] focus</code> とします。
ふたつ目はシステムの <strong>ruby</strong> を利用する際には必要な <strong>gem</strong> がシステムにインストールされている必要があります。
もしインストールされていないのであれば手動でいれる必要があります<sup id="fnref:bundler" role="doc-noteref"><a href="#fn:bundler" class="footnote" rel="footnote">3</a></sup>。</p>

<p><img src="/images/screenshot/wofi-window-switcher.png" alt="" /></p>

<h2 id="おわり">おわり</h2>

<p>あたらしい PC を買い、デスクトップ環境を替えました。
あたらしい環境で少し不便だったところを解消するプログラムを書いてみました。</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:ipc" role="doc-endnote">
      <p>InerProcess Communication <a href="#fnref:ipc" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:sanko" role="doc-endnote">
      <p>参考にした <strong>Python</strong> はウィンドウのオブジェクトから直接コマンドが送れます。 <a href="#fnref:sanko" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:bundler" role="doc-endnote">
      <p><strong>root</strong> ユーザーで一度実行するか、手動でやる必要がある。インラインとはいったい…… <a href="#fnref:bundler" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><category term="tech" /><summary type="html"><![CDATA[あたらしく PC 買って、 Linux の GUI 環境を X11 から Wayland に乗り変えることにしました。 いままで利用していたデスクトップ環境を i3 から sway に変更しました。 最近利用していた macOS や i3 ではあまり気にしていなかったのですが、Windows の Alt+Tab での ウインドウ切り替えが便利だったのを思い出したのでこの便利な機能を模倣することにしました。]]></summary></entry><entry><title type="html">いいかんじに Bundler で管理されていない Gem を使いたい</title><link href="https://blog.katsyoshi.org/blog/2023/11/16/how-to-use-irb-configuration-in-bundle-exec/" rel="alternate" type="text/html" title="いいかんじに Bundler で管理されていない Gem を使いたい" /><published>2023-11-16T23:59:59+09:00</published><updated>2023-11-16T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/11/16/how-to-use-irb-configuration-in-bundle-exec</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/11/16/how-to-use-irb-configuration-in-bundle-exec/"><![CDATA[<p>前回作成した <code class="language-plaintext highlighter-rouge">irb-theme-dracula</code> を <strong>bundler</strong> で <strong>gem</strong> が管理されているプロジェクトで利用したい。
利用したいが、そのままでは利用できないです。
これは <strong>gem</strong> が <strong>bundler</strong> で管理されているので、 <code class="language-plaintext highlighter-rouge">Gemfile</code> に書いていない <strong>gem</strong> は利用できないです。</p>

<h2 id="対処案">対処案</h2>

<p><strong>bundler</strong> で管理されていない <strong>gem</strong> をどうしても利用したい場合は以下のような方法が考えられます。</p>

<ol>
  <li>:100: <code class="language-plaintext highlighter-rouge">Gemfile</code> に追加: 正攻法。ただ複数人で開発しているなどの場合色付けだけの機能で追加するのかというと…</li>
  <li>:+1: 古きよき方法: <a href="https://i.loveruby.net/ja/projects/setup/doc/usage.html"><code class="language-plaintext highlighter-rouge">setup.rb</code></a> を利用して、対象 <strong>gem</strong> の必要ファイルをインストールする。</li>
  <li>:poop: 実行する <strong>Ruby</strong> の <code class="language-plaintext highlighter-rouge">$LOAD_PATH</code> に <strong>gem</strong> のパスを追加: 強引にパスを追加して <code class="language-plaintext highlighter-rouge">require</code> することで解決。</li>
</ol>

<p>ということでそれぞれ方法をみてみましょう。</p>

<h3 id="gemfile-に追加">Gemfile に追加</h3>

<p>正攻法ですね。便利で全員が使い、必要なら追加しましょう。
どうしても利用したい場合でプロジェクトの <code class="language-plaintext highlighter-rouge">Gemfile</code> に書きたくない場合はプロジェクトを管理している<strong>バージョン管理システム</strong> にコミットしないなどオペレーションを行いましょう。
管理方法が大変なのでこの方法はないなと。</p>

<h3 id="古きよき方法">古きよき方法</h3>

<p><strong>rubygems</strong> が生まれる前の方法をとりましょう。ここでは <strong><code class="language-plaintext highlighter-rouge">setup.rb</code></strong> で <code class="language-plaintext highlighter-rouge">site_ruby</code> に必要なファイルをインストールしてくれます。
便利なやつです。</p>

<h4 id="使い方">使い方</h4>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>gem <span class="nb">install </span>setup <span class="c"># gem でイントールします。</span>
<span class="gp">#</span><span class="w"> </span>インストールしたい gem のリポジトリをコピーなどして手元にもってきましょう。
<span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /path/to/install/gem
<span class="gp">$</span><span class="w"> </span>setup.rb <span class="nb">install</span> <span class="c"># gem のインストールが行なわれます。</span>
<span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /path/to/your/project
<span class="gp">$</span><span class="w"> </span>bundle <span class="nb">exec </span>ruby your/scrip.rb
</code></pre></div></div>

<p>これでできるのですが問題点があり、この方法では利用したいプロジェクト以外でも利用できてしまうので特定のプログラムだけで <code class="language-plaintext highlighter-rouge">site_ruby</code> を読み込むとかしていいかんじに使い分けるには少し工夫が必要です。
全部の <strong>Ruby</strong> プログラムで利用したい訳ではないのでこの方法については断念。</p>

<h3 id="実行する-ruby-の-load_path-に利用する-gem-のパスを追加">実行する Ruby の $LOAD_PATH に利用する gem のパスを追加</h3>

<p>この方法は単純で、プログラム側で必要なファイルを読み込む時のみ利用する。
利用するファイル(<code class="language-plaintext highlighter-rouge">require "irb/theme/dracula/light"</code> を書いているファイル)で利用したい <strong>gem</strong> へのパスを <code class="language-plaintext highlighter-rouge">$LOAD_PATH</code> へ追加します。
<code class="language-plaintext highlighter-rouge">$LOAD_PATH</code> への追加方法としては以下の方法があります。</p>

<ol>
  <li>環境変数 (<code class="language-plaintext highlighter-rouge">$RUBYLIB</code>) に指定: 環境変数を利用するごとに指定することができる。</li>
  <li>実行時に指定: 実行時に <code class="language-plaintext highlighter-rouge">-I/path/to/gem</code> を <code class="language-plaintext highlighter-rouge">ruby</code> の引数に利用可能。利用するごとに指定する必要がある。</li>
  <li>実行ファイルで指定: 設定ファイルを読み込んで実行するような場合では楽。</li>
</ol>

<p>ここでは <strong>実行ファイルで指定</strong> する方法を見ていきましょう。</p>

<p>実行対象のプログラムは <code class="language-plaintext highlighter-rouge">irb</code> です。 <code class="language-plaintext highlighter-rouge">irb</code> は <code class="language-plaintext highlighter-rouge">~/.irbrc</code> を読み込んで起動するため、 <code class="language-plaintext highlighter-rouge">~/.irbrc</code> に以下のような設定を書きます。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Reline 0.4.0 以上に対応した irb のバージョンチェック</span>
<span class="k">if</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">IRB</span><span class="o">::</span><span class="no">VERSION</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"1.9.0"</span><span class="p">)</span>
  <span class="c1"># gem のインストールされるパスを取得。rbenv を利用している場合は以下</span>
  <span class="c1"># preview 判では version に previewX や 0 がついたりするので * を付与し、検索</span>
  <span class="n">ld_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="s2">"RBENV_ROOT"</span><span class="p">],</span> <span class="s2">"versions"</span><span class="p">,</span> <span class="no">RUBY_VERSION</span> <span class="o">+</span> <span class="s2">"*"</span><span class="p">,</span> <span class="s2">"lib"</span><span class="p">,</span> <span class="s2">"ruby"</span><span class="p">,</span> <span class="s2">"gems"</span><span class="p">,</span> <span class="no">RUBY_VERSION</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sr">/\d+$/</span><span class="p">,</span> <span class="s2">"0*"</span><span class="p">),</span> <span class="s2">"gems"</span><span class="p">)</span>
  <span class="c1"># 読み込む gem 対象のパスを取得</span>
  <span class="n">gem_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ld_path</span><span class="p">,</span> <span class="s2">"irb-theme"</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"-*"</span><span class="p">).</span><span class="nf">last</span><span class="p">,</span> <span class="s2">"lib"</span><span class="p">)</span>
  <span class="vg">$LOAD_PATH</span><span class="p">.</span><span class="nf">unshift</span><span class="p">(</span><span class="n">gem_path</span><span class="p">)</span> <span class="c1"># LOAD_PATH に追加</span>
  <span class="vg">$LOAD_PATH</span><span class="p">.</span><span class="nf">uniq!</span> <span class="c1"># LOAD_PATH に追加した重複してた場合削除</span>
  <span class="nb">require</span> <span class="s2">"irb/theme/dracula/light"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>この設定を書いたら <strong>Ruby</strong> を <code class="language-plaintext highlighter-rouge">3.3.0-preview3</code> 以上にして <code class="language-plaintext highlighter-rouge">bundle exec irb</code> と実行してみましょう。</p>

<p><img src="/images/screenshot/force-load-bundler-external-gem.png" alt="" /></p>

<p>かった!</p>

<h2 id="おわり">おわり</h2>

<p><strong>gem</strong> は入ってるけど、プロジェクトで利用できないなあとおもい使えるようにしたいということでやってみました。
今回の <code class="language-plaintext highlighter-rouge">irb</code> は <strong>Ruby</strong> <code class="language-plaintext highlighter-rouge">2.2</code> 以下だとデフォルトでインストールされているのでそもそも
<code class="language-plaintext highlighter-rouge">Reline</code> の新しいバージョン(<code class="language-plaintext highlighter-rouge">0.4.0</code>)をサポートしていないのこの方法を利用してみました。</p>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[前回作成した irb-theme-dracula を bundler で gem が管理されているプロジェクトで利用したい。 利用したいが、そのままでは利用できないです。 これは gem が bundler で管理されているので、 Gemfile に書いていない gem は利用できないです。]]></summary></entry><entry><title type="html">irb の補完の色がいじれるようになったのでかっこよくしてみた</title><link href="https://blog.katsyoshi.org/blog/2023/11/08/makeup-your-irb-suggestions/" rel="alternate" type="text/html" title="irb の補完の色がいじれるようになったのでかっこよくしてみた" /><published>2023-11-08T23:59:59+09:00</published><updated>2023-11-08T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/11/08/makeup-your-irb-suggestions</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/11/08/makeup-your-irb-suggestions/"><![CDATA[<p><a href="https://github.com/ruby/reline"><code class="language-plaintext highlighter-rouge">Reline</code></a> が <code class="language-plaintext highlighter-rouge">0.4.0</code> になり、タイトルのとおり <a href="https://github.com/ruby/irb"><code class="language-plaintext highlighter-rouge">irb</code></a> で<a href="https://github.com/ruby/reline/blob/master/doc/reline/face.md">補完画面の色を好きなように変更</a>できるようになりました。</p>

<p>変更できるようになったので <a href="https://draculatheme.com/"><strong>dracula</strong></a> 風のテーマを <a href="https://rubygems.org"><strong>gem</strong></a> としてリリースしました!!!!
リポジトリは以下です!!!</p>

<p><a href="https://github.com/katsyoshi/irb-theme-dracula"><img src="https://gh-card.dev/repos/katsyoshi/irb-theme-dracula.svg" alt="katsyoshi/irb-theme-dracula - GitHub" /></a></p>

<h3 id="インストール">インストール</h3>

<p>ということで使いかたを。まずは <code class="language-plaintext highlighter-rouge">gem i irb-theme-dracula</code> で <strong>インストール</strong> します。
<strong>ダーク</strong> と <strong>ライト</strong> を作りました。 <strong>ダーク</strong> は明るい <strong>コンソール</strong> 向けに、 <strong>ライト</strong> は暗い <strong>コンソール</strong> 向けに作っています。
インストール後は <code class="language-plaintext highlighter-rouge">irbrc</code> ファイルに <code class="language-plaintext highlighter-rouge">require "irb/theme/dracula/dark"</code> か <code class="language-plaintext highlighter-rouge">require "irb/theme/dracula/light"</code> を追加。</p>

<p><code class="language-plaintext highlighter-rouge">irb</code> を実行し、補完をしてみましょう。まず、<code class="language-plaintext highlighter-rouge">irbrc</code> ファイルになにもかかないデフォルトの場合は以下</p>

<p><img src="/images/screenshot/irb-default.png" alt="" /></p>

<p>次に <strong>ダーク</strong> の <code class="language-plaintext highlighter-rouge">require "irb/theme/dracula/dark"</code> を書いた場合は以下</p>

<p><img src="/images/screenshot/dracula-dark.png" alt="" /></p>

<p>最後に <strong>ライト</strong> <code class="language-plaintext highlighter-rouge">require "irb/theme/dracula/light"</code> の場合は以下</p>

<p><img src="/images/screenshot/dracula-light.png" alt="" /></p>

<h3 id="おわり">おわり</h3>

<p><strong>irb</strong> も便利になってカスタマイズができるようになりました。色とか考えたくないひとは <strong>gem</strong> にして一発で決まるようにすると便利ですよ。たぶん。</p>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[Reline が 0.4.0 になり、タイトルのとおり irb で補完画面の色を好きなように変更できるようになりました。]]></summary></entry><entry><title type="html">新しいキーキャップ手にいれたよ!!!!</title><link href="https://blog.katsyoshi.org/blog/2023/06/27/my-new-gear/" rel="alternate" type="text/html" title="新しいキーキャップ手にいれたよ!!!!" /><published>2023-06-27T23:59:59+09:00</published><updated>2023-06-27T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/06/27/my-new-gear</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/06/27/my-new-gear/"><![CDATA[<p>最高だったイベント <a href="https://keebkaigi.org/2023/"><strong>第一回keebkaigi</strong></a> 行った影響で、キーボードをいじりたくなりました。
今利用している <a href="https://github.com/foostan/crkbd"><strong>corne cherry</strong></a> でかなり満足しているため、
新規につくるとかはあまりやる気はないので、見た目(<em>キーキャップ</em>)や触った感じ(<em>キースイッチ</em>)を替えようかとおもいます。</p>

<h2 id="見た目と触った感じ">見た目と触った感じ</h2>

<p>見た目の変更としてキーキャップを海外のサイト <a href="https://drop.com"><strong>Drop.com</strong></a> や <a href="https://yushakobo.jp"><strong>遊舎工房</strong></a> から買いました。
買ったのは以下の4つ!</p>
<ul>
  <li><a href="https://shop.yushakobo.jp/products/maxkey-sa-purple-keycaps-set">MAXKEY SA Purple keycaps set</a></li>
  <li><a href="https://drop.com/buy/carbon?defaultSelectionIds=967954">Drop + T0mb3ry SA Carbon Custom Keycap Set</a></li>
  <li><a href="https://drop.com/buy/drop-oblotzky-sa-oblivion-v2?defaultSelectionIds=966268">Drop + Oblotzky SA Oblivion V2 Custom Keycap Set</a></li>
  <li><a href="https://drop.com/buy/domikey-abs-doubleshot-sa-cyberpunk-pumper-keycap-set?defaultSelectionIds=958152">DOMIKEY ABS Doubleshot SA Cyberpunk Pumper Keycap Set</a></li>
</ul>

<p><em>SA プロファイル</em><sup id="fnref:keycap_profile" role="doc-noteref"><a href="#fn:keycap_profile" class="footnote" rel="footnote">1</a></sup> が好きでいつものように遊舎工房へ行ったら展示品でアルファベットだけのを見つけたので即購入。
一つだけだと寂しいので、なんとなく <strong>Drop.com</strong> を眺めていたら、 <em>SA プロファイル</em> でいくつか安くなっていたので購入。
現時点では、<strong>MAXKEY SA Purple</strong> と <strong>DOMIKEY ABS Doubleshot SA Cyberpunk Pumper</strong> を市松模様に交互にキャップをはめて使っています。</p>

<p>触った感じの変更として <em>キースイッチ</em> を <a href="https://talpkeyboard.net/"><strong>Talp Keyboard</strong></a> で買っています。</p>

<ul>
  <li><a href="https://talpkeyboard.net/items/611f422c84ca6370e66aeb85">Durock T1 Shrimp サイレントタクタイル キースイッチ（ターコイズ/5ピン/67g/5個）</a></li>
  <li><a href="https://talpkeyboard.net/items/640d7ff65d04872b6fa57115">KTT Matcha キースイッチ（グリーン/タクタイル/3ピン/40g/5個）</a></li>
  <li>KBDiy hp type タクタイル キースイッチ（クリーム/3ピン/62g/5個）<sup id="fnref:soldout" role="doc-noteref"><a href="#fn:soldout" class="footnote" rel="footnote">2</a></sup></li>
</ul>

<p>もともとは <em>リニア</em> と呼ばれるタイプの <em>キースイッチ</em><sup id="fnref:keyswitch_type" role="doc-noteref"><a href="#fn:keyswitch_type" class="footnote" rel="footnote">3</a></sup> が好きでしたが、感触が最近飽きてきたので、 <em>タクタイル</em> と呼ばれるタイプの
<em>キースイッチ</em> を利用するようになっています。さらに最近は重めの方が好きなのかもしれないという状況です。
<strong>Durock T1 Shrimp</strong> をどこか<sup id="fnref:itumono" role="doc-noteref"><a href="#fn:itumono" class="footnote" rel="footnote">4</a></sup>で見かけたので購入。見た目もよく、タクタイルだったので結構気に入ってます。
<strong>KTT Matcha</strong> と <strong>KBDiy hp type</strong> は <strong>Durock T1 Shrimp</strong> が <strong>corne cherry</strong> の <em>バックライトLED</em> がきつく感じはじめたので購入。
<strong>KTT Matcha</strong> をしばらく利用してたのですが、<em>タクタイル</em> でもちょっと音が気になるのと、軽すぎる感じでした。
音が気になったので今時点では <strong>KBDiy hp type</strong> を利用しています。この <em>キースイッチ</em> は少し重いです。</p>

<p>ついでに <em>TRRS ケーブル</em> を変更しました。これは <strong>アマゾン</strong> でてきとうに</p>

<p><img src="/images/photo/kbdiy-maxkey-and-cyberpunk.jpg" alt="" /></p>

<h2 id="おわり">おわり</h2>

<p>気分転換にキーボードのキースイッチとキーキャップ変更とを行ってみました!
自作キーボードはいいぞ。</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:keycap_profile" role="doc-endnote">
      <p>背が高いプロファイルや統一された高さなど様々なプロファイルがあります。キーキャップに関することのくわしくは <a href="https://salicylic-acid3.hatenablog.com/entry/keycap-introduction"><strong>自作キーボード温泉街の歩き方</strong> の キーキャップの湯のお誘い ver2 </a> を参考にしてください。 <a href="#fnref:keycap_profile" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:soldout" role="doc-endnote">
      <p>2023/6/30 時点、 <strong>Talp Keyboard</strong> では販売終了。 <a href="#fnref:soldout" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:keyswitch_type" role="doc-endnote">
      <p>音が鳴るようなタイプやクリック感があるようなタイプ様々なタイプがあります。くわしくは <a href="https://shop.yushakobo.jp/pages/how-to-select-switch"><strong>遊舎工房</strong> のキースイッチの説明</a> を参考にしてください。 <a href="#fnref:keyswitch_type" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:itumono" role="doc-endnote">
      <p>たぶん <strong>twitter.com</strong> で <a href="https://twitter.com/takkanm">@takkanm</a> か <a href="https://twitter.com/talpkeyboard">@talpkeyboard</a> のついーと。 <a href="#fnref:itumono" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[最高だったイベント 第一回keebkaigi 行った影響で、キーボードをいじりたくなりました。 今利用している corne cherry でかなり満足しているため、 新規につくるとかはあまりやる気はないので、見た目(キーキャップ)や触った感じ(キースイッチ)を替えようかとおもいます。]]></summary></entry><entry><title type="html">Zellij はじめました</title><link href="https://blog.katsyoshi.org/blog/2023/06/19/hello-zellij/" rel="alternate" type="text/html" title="Zellij はじめました" /><published>2023-06-19T23:59:59+09:00</published><updated>2023-06-19T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/06/19/hello-zellij</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/06/19/hello-zellij/"><![CDATA[<p>はい。タイトルの通り、 <a href="https://zellij.dev/"><strong>Zellij</strong></a> をはじめてみました。
切っ掛けは以下のツイートを見つけたので。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">tmux みたいなやつは terminal multiplexer とか呼ばれてて，たぶん沼さんが求めてるのは zellij<a href="https://t.co/KlyMMeatzH">https://t.co/KlyMMeatzH</a></p>&mdash; sksat (@sksat_tty) <a href="https://twitter.com/sksat_tty/status/1670656419174191105?ref_src=twsrc%5Etfw">June 19, 2023</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>というっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっっことでね、はじめます。</p>

<h2 id="zellijとは">Zellijとは？</h2>

<p><a href="https://rust-lang.org"><strong>Rust</strong></a> 製の <a href="https://github.com/tmux/tmux"><strong>tmux</strong></a> クローン。
はやってますね <strong>Rust</strong> 。</p>

<h2 id="install">Install</h2>

<p>つかってるのが <strong>Gentoo Linux</strong> なので <code class="language-plaintext highlighter-rouge">portage</code> からもはいります。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>emerge zellij
</code></pre></div></div>

<p>他の <strong>OS</strong> やソースコードからのインストール方法は公式から見て入れてください。</p>

<h2 id="customize">Customize</h2>

<p><strong>tmux</strong> のクローンとあり、カスタマイズもかなりできるようです。
とりあえず、起動してみましょう。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>zellij
</code></pre></div></div>

<p><img src="/images/screenshot/zellij-default.png" alt="" /></p>

<p>デフォルトでもナビがあり、簡単に利用できて便利です。が、キーバインドが気に食わないので変更しましょう。
といってもカスタムするファイルを書いていませんでしたね。初期設定を標準出力に <code class="language-plaintext highlighter-rouge">zellij setup --dump-config</code> で出せるので <em>リダイレクト</em> なり、 <em>コピペ</em> なりでファイルを作りましょう。保存先はどこでもいいのですが、標準で読み込んでくれる <code class="language-plaintext highlighter-rouge">$HOME/.config/zellij/config.kdl</code> がいいでしょう。ファイル形式は <a href="https://kdl.dev/"><strong>KDL</strong></a> となっていますがなんんもわからん。</p>

<pre><code class="language-kdl">keybinds clear-defaults=true {
  shared {
    bind "Ctrl g" { SwitchToMode "Normal"; }
  }
  normal {
    bind "Ctrl t" { SwitchToMode "Tmux"; }
  }
  tmux {
    bind "c" { NewTab; SwitchToMode "Normal"; }
    bind "o" { FocusNextPane; SwitchToMode "Normal"; }
  }
}
</code></pre>

<p><code class="language-plaintext highlighter-rouge">keybinds</code> でキーバインドの設定がデキルのですが、 <code class="language-plaintext highlighter-rouge">clear-defaults=true</code> を指定してあげることで <em>デフォルト</em> のキーバインドを消すことができます。<a href="https://zellij.dev/documentation/keybindings-modes.html">モードがたくさんあり</a>、そのモードに対してそれぞれキーバインドを設定することができます。上記の例では、<strong>Normal</strong> モードで <code class="language-plaintext highlighter-rouge">Ctrl t</code> を押すと、<strong>Tmux</strong> モードに入ります。ここで、<code class="language-plaintext highlighter-rouge">c</code> を入力すると新しい <strong>tab</strong> で <strong>Shell</strong> が動きます。今どのモードに居るのかわからなくなっても必ず <strong>Normal</strong> モードへ <code class="language-plaintext highlighter-rouge">Ctrl g</code> で戻れるように <code class="language-plaintext highlighter-rouge">shared</code> に設定してあります。
こんな感じで設定は簡単にできます。</p>

<h2 id="おわりに">おわりに</h2>

<p>かんたんに <strong>zellij</strong> の現在(2023/6/20 バージョン <code class="language-plaintext highlighter-rouge">0.36.0</code> で確認。最新バージョンは <code class="language-plaintext highlighter-rouge">0.37.0</code>。)の設定をみてきました。カスタムできるのはキーバインドだけじゃなく、カラースキーム、レイアウトなどなど様々に変更できるので御参考までにーーーー。
ねむい。</p>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[はい。タイトルの通り、 Zellij をはじめてみました。 切っ掛けは以下のツイートを見つけたので。]]></summary></entry><entry><title type="html">趣味はvaporware造りです v.0.0.1</title><link href="https://blog.katsyoshi.org/blog/2023/05/25/vaporware-for-ruby-compiler/" rel="alternate" type="text/html" title="趣味はvaporware造りです v.0.0.1" /><published>2023-05-25T23:59:59+09:00</published><updated>2023-05-25T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/05/25/vaporware-for-ruby-compiler</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/05/25/vaporware-for-ruby-compiler/"><![CDATA[<p><a href="htttps://rubykaigi.org/2023"><strong>RubyKaigi2023</strong></a>に行ってきたのは<a href="/blog/2023/05/15/ruby-kaigi-2023-at-matsumoto/">別エントリ</a>にしたのでこのエントリでは <a href="https://rubykaigi.org/2023/presentations/lt/"><em>LT</em></a> で話しした内容の説明などをしていこうかと思います。</p>

<h2 id="presentation">Presentation</h2>

<iframe class="speakerdeck-iframe" style="border: 0px none; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 420;" src="https://speakerdeck.com/player/59e0f2da2d014f3e9b1d1d7633ef000f" title="Building Ruby Native Extension using Ruby" allowfullscreen="true" data-ratio="1.3333333333333333" frameborder="0"></iframe>

<h2 id="lt申し込みまで">LT申し込みまで</h2>

<p><a href="https://rubykaigi.org/2023"><strong>RubyKaigi2023</strong></a> 松本でやるし発表もしたいが、ネタがないなとおもってたら本編の方の <em>CFP</em><sup id="fnref:cfp" role="doc-noteref"><a href="#fn:cfp" class="footnote" rel="footnote">1</a></sup> が閉じられてた<sup id="fnref:cfpdate" role="doc-noteref"><a href="#fn:cfpdate" class="footnote" rel="footnote">2</a></sup>。
とはいえ今年は <strong>COVID-19</strong> の制限も無くなるから <em>LT</em> あるとおもうので <em>LT</em> 出せたらいいなあと考えてた。
そうこうしているうちに <a href="https://30.ruby.or.jp/"><strong>Ruby30th</strong></a> で今はまだないものだけど…って matz がいったものを造ろうとなりました。</p>

<p><em>LT</em> の応募サイト開くまでにネタが幸い見つけることができ、実装をはじめることにした。</p>

<h2 id="実装">実装</h2>

<p>ということで、通るかどうかわからないですが、発表できるように準備をはじめました。
準備といっても実際は実装どこまでできましたーというような発表にする予定だったので
そのまま実装をしています。</p>

<p>実装予定は発表にもあった通り、以下の予定ですすめて、最後に <a href="https://docs.ruby-lang.org/ja/latest/library/fiddle.html"><code class="language-plaintext highlighter-rouge">fiddle</code></a> で読み込めるように実装していました。</p>

<ol>
  <li>四則演算: <code class="language-plaintext highlighter-rouge">Integer</code> の計算ができること</li>
  <li>変数: 変数が使えること</li>
  <li>制御構文: <code class="language-plaintext highlighter-rouge">for</code> や <code class="language-plaintext highlighter-rouge">if</code> などの基本的な制御構文が使えること</li>
  <li>メソッド: メソッドが定義でき、利用できこと</li>
</ol>

<p>を目標に実装をすすめていましたのでそれぞれの進捗を</p>

<h3 id="四則演算">四則演算</h3>

<p>とくに詰まる点もなく、<em>AST</em> をもとに <em>assembler</em> へ変換するだけでいけた。</p>

<h3 id="変数">変数</h3>

<p>これが一番大変だった。<a href="https://www.sigbus.info/compilerbook">教科書</a> を <code class="language-plaintext highlighter-rouge">cherry-picking</code> しながら進めてたために、
実装でわからん部分が出てきたのでインターネット介して <code class="language-plaintext highlighter-rouge">gdb</code> リモートデバッグの講習を受けながら実装。
もともとここか制御構文までで終わるだろうなあと予想してたが、<code class="language-plaintext highlighter-rouge">SEGV</code> 出しながらもなんとかくりあ。</p>

<h3 id="制御構文">制御構文</h3>

<p>はじめは素直に <code class="language-plaintext highlighter-rouge">if</code> 文を実装。ここも上記の理由によりなんもわからんとなり、<a href="https://github.com/ktateish/9cc">別の人の実装</a> を参考に実装。
<code class="language-plaintext highlighter-rouge">if</code> 文だけじゃつまんないというか、とくになにもできないのでループ文を追加しようとしました。
はじめは <code class="language-plaintext highlighter-rouge">for</code> 文を実装しようと考えましたが、なんとここで重大なことに気がつきました。
<strong>Ruby</strong> の <code class="language-plaintext highlighter-rouge">for</code> のことはなにもしらない。ということに。そういえば <code class="language-plaintext highlighter-rouge">for x in 1..10; puts x;end</code> とか書けるけど
そもそも <code class="language-plaintext highlighter-rouge">Range</code> クラスや <code class="language-plaintext highlighter-rouge">Array</code> 作る必要あるよな？ということで一旦 <code class="language-plaintext highlighter-rouge">for</code> はやめに。</p>

<p>ということでここは <code class="language-plaintext highlighter-rouge">while</code> 文を実装して、<a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%9C%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0"><strong><code class="language-plaintext highlighter-rouge">fibonacci</code> 数</strong></a> を求めることができるようになりました。</p>

<h3 id="メソッド">メソッド</h3>

<p>ここは変数、制御構文ができれば作るだけなら問題はなかったように思えます。
ただほんとうに作るだけだったので、引数なし、定数を返すだけのメソッドの確認しか行なっていないです。
ここの実装にたどり着くとは思っておらず、最後のRubyKaigi直前の6連休に入ってから実装できてしまったので
あんまりブラッシュアップできていないです。
引数の扱い、変数の利用、などなど確認をとれておらずにいますが動いたので <code class="language-plaintext highlighter-rouge">fiddle</code> で読み込めるように。</p>

<h3 id="fiddle-で利用できるようにする">Fiddle で利用できるようにする</h3>

<p>定義したメソッドを <strong>C言語</strong> の関数として見えるようにしてあげればいいので、
そうしたら、あっさりとうごいてしまった<sup id="fnref:yoteigai" role="doc-noteref"><a href="#fn:yoteigai" class="footnote" rel="footnote">3</a></sup>。この時点で連休の終わりの方だったのは覚えている</p>

<h2 id="発表準備">発表準備</h2>

<p>もともとGW前の連休には実装を終らせてGWの連休中に発表資料作成とできたところまでの実装のブラッシュアップを
行なう予定でしたが、目標の実装が見えてるとなるとどうしても実装したくなって実装の方を進めてました。</p>

<p>もともと発表は <a href="https://rabbit-shocker.org"><strong>Rabbit</strong></a> を利用して英語で行う予定でしたが、LTはとくに
うちあわせのために資料を先に出すとかなかったのでとりあえず日本語で作成しました。
実装おわっていないというか実装に時間掛けすぎたのと、RubyKaigiへ持っていくPCをあたらしくしたので
冒険はできずに素直に <a href="https://docs.google.com/presentation"><strong>Google スライド</strong></a> 利用して作成、
後日 <strong>Rabbit</strong> で清書するということにしました。</p>

<p>発表資料自体は 5/8 or 5/9 ぐらいに作成し終っていました。デモなしで発表練習するとちょうど時間通りに
おわるのでこの資料作成完了時点ではこれでよしとしてました。
この時点でも資料はすくたなくとも英語にしようとは考えて資料は作成していました。</p>

<h2 id="当日">当日</h2>

<p>当日の朝、資料作成というか資料の英語変換をやっていて、やっているうちに
実際発表してなにができてなにができてないみたいなこと言ったとしても
なにがなんだかわからんよなとなったので急遽デモをやって、実行できること示すように少し変更しました。</p>

<p>当日はセッションききながらかなり緊張していました、直前のセッションのトラブルもあったので。
聞いた人はわかるとおもうのですが、発表が途中でおわったのはこういった事情があったのでああいう発表になりました。</p>

<h2 id="後日">後日</h2>

<p>発表当日の昼飯時に、 <a href="https://twitter.com/ukstudio">@ukstudio</a> が <a href="https://cookpad.com"><strong>cookpad</strong></a> のイベントとして <a href="https://cookpad.connpass.com/event/282436/"><strong>手を動かして振り返る RubyKaigi 2023</strong></a> が5/18にあるからきてよと誘われたのでいくことにしました。
この会では、デキテイナカったデモを最後までやりきっています。</p>

<h2 id="書き直し">書き直し</h2>

<p><strong>手を動かして~</strong> のあとに <strong>Rabbit</strong> への清書を行ないました。
いままでもいくつかの発表は <strong>Rabbit</strong> でやってたのですが、
<strong>Rabbit テーマ</strong> を作りたい作りたいと思っていたので今回は時間もあるのでつくることにしました。
とはいってもほぼ <a href="https://twitter.com/yu_suke1994">@yu_suke1994</a> の<a href="https://github.com/unasuke/rubykaigi-2023/">リポジトリ</a>をコピーしただけなんでうが……</p>

<h2 id="まとめ">まとめ</h2>

<p><strong>RubyKaigi</strong> の <em>LT</em> で話ししたことをまとめました。
実装の話はもうちょっと詳しく書きたいけど、そもそも実装もすすめたいしでなかなか書けていないですね。</p>

<p>次回作もご期待ください 完</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:cfp" role="doc-endnote">
      <p>Call For Proposal。ずっと Call For Paper だとおもってたので知ったときえってなった。 <a href="#fnref:cfp" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:cfpdate" role="doc-endnote">
      <p><a href="https://cfp.rubykaigi.org/events/2023">2023-01-31</a> 締切で完全にネタない状態だった。 <a href="#fnref:cfpdate" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:yoteigai" role="doc-endnote">
      <p>もともとの発表予定ではここまでしかできなかったんですよーって濁す予定でしたが思っている以上に実装がすすんでしまった。 <a href="#fnref:yoteigai" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[RubyKaigi2023に行ってきたのは別エントリにしたのでこのエントリでは LT で話しした内容の説明などをしていこうかと思います。]]></summary></entry><entry><title type="html">RubyKaigi2023 @MATZ本</title><link href="https://blog.katsyoshi.org/blog/2023/05/15/ruby-kaigi-2023-at-matsumoto/" rel="alternate" type="text/html" title="RubyKaigi2023 @MATZ本" /><published>2023-05-15T23:59:59+09:00</published><updated>2023-05-15T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/05/15/ruby-kaigi-2023-at-matsumoto</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/05/15/ruby-kaigi-2023-at-matsumoto/"><![CDATA[<p>行ってきたのでまとめます。LT やったのですが、 LT の話はまた今度。</p>

<h2 id="day--1">Day -1</h2>

<p>前日は恒例の <a href="https://asakusarb.esa.io">Asakusa.rb</a> の <a href="https://asakusarb.doorkeeper.jp/events/154786">predrinkup</a> に行ってました。ここでは、 <a href="https://twitter.com/n0kada">nobu</a> とかとはなししたりしてすごしました。
drinkup は次の日のため終了後すぐさま帰宅し、就寝した。</p>

<h2 id="day-0">Day 0</h2>
<p>この日は、 <a href="https://cookpad.connpass.com/event/277569/">RubyistsOnRails</a> というすばらしいイベント列車があったのでノータイム <sup id="fnref:sonnnakotohanai" role="doc-noteref"><a href="#fn:sonnnakotohanai" class="footnote" rel="footnote">1</a></sup> 8時の会に参加申し込み。6時に起床し、7時に出発。
会ではRubyistと話しながら、山見ながら、松本に到着。
松本に到着後飯として <a href="https://tabelog.com/nagano/A2002/A200201/20000092/">みよ田</a> という蕎麦屋に直行。
蕎麦を食べた直後、松本城へ。松本城では <a href="https://twitter.com/yukihiro_matz/">まつもとさん</a> 集団を見つけたので、みんなで Matz本城 背景に記念撮影。まつもとさん一行は開発者会議があったらしく記念撮影後すぐにわかれました。
われわれは、この記念撮影後松本城観光し、もう一軒蕎麦屋へ昼食へ。二軒目の蕎麦屋は <a href="https://tabelog.com/nagano/A2002/A200201/20002376/">蕎麦倶楽部佐々木</a> へ。</p>

<p>そんなことしてたら宿がチェックイン可能になったので、荷物置くのと下着類を購入しひとやすみ(10min程)。</p>

<p>Day 0 最大のイベント、 <a href="https://keebkaigi.org/2023/">KeebKaigi</a> へ!ここで豪華ノベリティを大量に頂きました!!!1とくによいのが城キーキャップで松本城を3DプリントしたISO エンターキーを頂きました。しかしながらこのキー差すキーボードがないので知人に譲る予定です。</p>

<p>KeebKaigi 自体もたいへん面白い Kaigi で楽しめました。とくに、 t-code の紹介のLT、頭文字Vなどよかったです。
KeebKaigi 後は懇親会には参加せず、友人とかるく夕飯をして宿へ。</p>

<h2 id="day-1">Day 1</h2>

<p>ここまででも大変楽しいものでしたが、<a href="https://rubykaigi.org/2023/">RubyKaigi本番</a> はこの日から。</p>

<p>1日目の朝食は会場行く途中でもともと聞いていた店の <a href="https://sioribi.jp/">栞日</a> さんへ。
会場開いて登録したあとノベリティの列をみてげんなりしてたので一旦スポンサーブースをうろうろしてた。
この日聞いたセッションは以下です。</p>

<h3 id="matz-keynote"><a href="https://rubykaigi.org/2023/presentations/yukihiro_matz.html#day1">Matz Keynote</a></h3>

<p>毎年恒例 Matz のキーノート。</p>

<h3 id="昼飯">昼飯</h3>
<p>ランチはたまたま居合わせた6人で <a href="https://tabelog.com/nagano/A2002/A200201/20000098/">おきな堂</a> へ。名物のボルガライスとリンゴジュースを。シードルがあったので一緒にいったひとへオススメしてたりした。</p>

<h3 id="the-future-vision-of-ruby-parser"><a href="https://rubykaigi.org/2023/presentations/spikeolaf.html#day1">The future vision of Ruby Parser</a></h3>

<p>コミッターの <a href="https://twitter.com/spikeolaf">spikelaf</a> さんによるパーサーの開発話。魔窟じゃないよーなんかいってまいましたが、難しい問題を丁寧にひとつひとつ倒していった話をしていました。</p>

<h3 id="make-regexpmatch-much-faster"><a href="https://rubykaigi.org/2023/presentations/makenowjust.html#day1">Make Regexp#match much faster</a></h3>

<p>去年 <a href="https://www.ruby-lang.org/ja/news/2023/03/30/redos-in-time-cve-2023-28756/">ReDoS</a> の対応をしたコミッターの発表。正規表現の可能性を話してくれています。</p>

<h3 id="high-performance-real-time-3d-graphics-with-vulkan"><a href="https://rubykaigi.org/2023/presentations/fredolinhares.html#day1">High-performance real-time 3D graphics with Vulkan</a></h3>

<p><a href="https://www.vulkan.org/">Valkan</a> を Ruby で利用できるようにした話。このあたりは LT への緊張感でほとんど覚えていないです。</p>

<h3 id="power-up-your-repl-life-with-types"><a href="https://rubykaigi.org/2023/presentations/tompng.html#day1">Power up your REPL life with types</a></h3>

<p>去年の <a href="https://github.com/tric/trick2022/blob/master/01-tompng/entry.rb">TRICK Winner</a> で今回の話は <code class="language-plaintext highlighter-rouge">irb</code> を利用しているときにどういう感じで補完が出るのか、出すためにどのような型推論を行なっているのかの話だったとおもう。</p>

<h3 id="lt">LT</h3>

<p>しゃべった</p>

<h3 id="オフィシャルパーティー">オフィシャルパーティー</h3>

<p>つかれたのでそこそこで帰った</p>

<h2 id="day-2">Day 2</h2>

<p>朝飯は <a href="https://tabelog.com/nagano/A2002/A200201/20020720/">珈琲茶房かめのや</a> へ。ここもワンオペで配膳されるまで少し時間がかかった。というか、朝食べくるひといないのかどこもワンオペだったので Day 3 も早めに出るようにしようとなった。</p>

<h3 id="on-ruby-and-ꝩduя-or-how-scary-are-trojan-source-attacks"><a href="https://rubykaigi.org/2023/presentations/duerst.html#day2">On Ruby and ꝩduЯ, or How Scary are Trojan Source Attacks</a></h3>

<p>昔他の言語で話題になった Ruby のコード的には正しいが、見た目ではわからない
不正な文字が入ったときの対策のはなしでした。</p>

<h3 id="build-a-mini-ruby-debugger-in-under-300-lines"><a href="https://rubykaigi.org/2023/presentations/_st0012.html#day2">Build a mini Ruby debugger in under 300 lines</a></h3>

<p>300 行といったなあれは嘘だ。という話。Ruby の Debugger を200 行くらいでつくったはなしでした。</p>

<h3 id="昼飯-1">昼飯</h3>

<p><a href="https://tabelog.com/nagano/A2002/A200201/20015852/">種村</a> で蕎麦と岩魚と日本酒。</p>

<h3 id="revisiting-typeprof---ide-support-as-a-primary-feature"><a href="https://rubykaigi.org/2023/presentations/mametter.html#day2">Revisiting TypeProf - IDE support as a primary feature</a></h3>

<p>Ruby に梱包されている <a href="https://github.com/ruby/typeprof/blob/master/doc/doc.ja.md"><code class="language-plaintext highlighter-rouge">TypeProf</code></a> が遅いので速くして、また書いている途中でもエラーがでたときどうするかとかの説明をしていました。まだ利用できていないので試したくなるものだった。</p>

<h3 id="ruby-implementation-of-quic-progress-and-challenges"><a href="https://rubykaigi.org/2023/presentations/yu_suke1994.html#day2">Ruby Implementation of QUIC: Progress and Challenges</a></h3>

<p><a href="https://twitter.com/yu_suke1994">Unasuke</a> 大先生のライフワーク、 Ruby の <a href="https://datatracker.ietf.org/doc/html/rfc9000">QUIC</a> 対応のはなし。Python での実装はどうとかのはなしで今回は実装がすすんでいるようでよかった。とはいえ道程はまだまだかかりそう。</p>

<h3 id="afternoon-break">afternoon break</h3>

<p>お昼休憩後は Jeremy Evans や Maxime の話を聞いていたが疲れてなにも覚えていない。</p>

<h3 id="leaner-drinkup-at-rubykaigi-2023"><a href="https://leanertechnologies.connpass.com/event/280191/">Leaner Drinkup at RubyKaigi 2023</a></h3>

<p>この日は <a href="https://leaner.jp/">Leaner</a> さん主催の drinkup へ行きました。ここでは主に日本を飲んですごしました。でここで、spikelaf が kaigi でも話してた <a href="https://github.com/ruby/lrama">lrama</a> が Ruby 本体のとりこまれ、 <a href="https://www.ruby-lang.org/ja/news/2023/05/12/ruby-3-3-0-preview1-released/">Ruby 3.3.0-preview1 がリリースされました</a>!なんかさわいでるなと思たらリリース作業シテイタトハ…
drinkup 終了後は <a href="https://twitter.com/onk">onk</a> とふたりで近所のワインバーへ行き、軽くのんで宿へ帰りました。</p>

<p>宿帰ったら <a href="https://esm.co.jp/">ESM</a> さんのノベリティの <a href="https://blog.agile.esm.co.jp/entry/ruby-method-karuta">Rubyメソッドかるた</a> でみんなでわいわいしながら遊んでました。</p>

<h2 id="day-3">Day 3</h2>

<p>この日の朝食は <a href="https://tabelog.com/nagano/A2002/A200201/20023046">山山食堂</a> というところでしました。</p>

<h3 id="committers-and-the-worldのあと">Committers and the Worldのあと</h3>

<p>今回は Matz本 ということで会場にいる「まつもとさん」一同会して写真を撮ることを目的としてあつめてました。写真は以下になります</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">松本さん大集合に、当社の松本さんも混ぜていただきありがとうございましたっ🏯<a href="https://twitter.com/hashtag/RubyKaigi2023?src=hash&amp;ref_src=twsrc%5Etfw">#RubyKaigi2023</a> <a href="https://t.co/neYYer5e2A">pic.twitter.com/neYYer5e2A</a></p>&mdash; Yasunori Suzuki (@yasuzukisan) <a href="https://twitter.com/yasuzukisan/status/1657253330056519680?ref_src=twsrc%5Etfw">May 13, 2023</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3 id="ruby--adbc---a-single-api-between-ruby-and-dbs"><a href="https://rubykaigi.org/2023/presentations/ktou.html#day3">Ruby + ADBC - A single API between Ruby and DBs</a></h3>

<p><a href="https://github.com/kou">須藤さん</a> の発表で、 <a href="https://arrow.apache.org/docs/format/ADBC.html"><code class="language-plaintext highlighter-rouge">ADBC</code></a> で DB へ接続し、さらのその接続からのよみかきの高速化のはなしでした。あいかわらずすごいなと思いながら聞いていました。</p>

<h3 id="ruby-jit-hacking-guide"><a href="https://rubykaigi.org/2023/presentations/k0kubun.html#day3">Ruby JIT Hacking Guide</a></h3>

<p><a href="https://github.com/k0kubun">国分さん</a> の新作 <a href="https://github.com/ruby/ruby/pull/7448">RubyJIT</a>。PRみた感じだとやってるネタにてるなあとおもってたけど、アプローチがすこし違い、またこちらは直接ELFを書いているようなのでまだちがうようだ。とはいえ今やっていることは似ているのであとで参考にしよう。</p>

<h3 id="after-party-and-music-mixin">After Party and Music Mixin</h3>

<p><a href="https://stores.jp/">STORESさん</a> の <a href="https://hey.connpass.com/event/277763/">アフターパティー</a> と <a href="https://www.pixiv.net">pixivさん</a> の <a href="https://conference.pixiv.co.jp/2023/rubymusicmixin">ruby music mixin</a> にいってきました。両方ともサイコーでした!!!!</p>

<h2 id="day-4">Day 4</h2>

<p>一人で野沢温泉村いって温泉はいって、ジンのんで、ビールのみいこうと一旦山おりたら温泉にしか飲むとこなかったのでもどったりして帰りました。</p>

<h2 id="おわり">おわり</h2>

<p>今回のRubyKaigi久しぶりのFull開催で大変楽しめたのですが、LTとは言えはじめての発表があり、心から楽しめたかというとあれですが、すごく楽しかったし、刺激になりました。来年の那覇は本編に出せるようになんとか精進します!!!</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:sonnnakotohanai" role="doc-endnote">
      <p>海外の人が登録して行ったほうがいいんじゃないかと一瞬思った <a href="#fnref:sonnnakotohanai" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[行ってきたのでまとめます。LT やったのですが、 LT の話はまた今度。]]></summary></entry><entry><title type="html">趣味は vaporware 造りですv0.0.0</title><link href="https://blog.katsyoshi.org/blog/2023/03/21/my-hobby-is-building-vaporware/" rel="alternate" type="text/html" title="趣味は vaporware 造りですv0.0.0" /><published>2023-03-21T13:59:59+09:00</published><updated>2023-03-21T13:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/03/21/my-hobby-is-building-vaporware</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/03/21/my-hobby-is-building-vaporware/"><![CDATA[<p>プログラマー三大勉強はしたけど、実装はしたことないものといえば
CPU、OS、コンパイラーなのです<sup id="fnref:kojinsa" role="doc-noteref"><a href="#fn:kojinsa" class="footnote" rel="footnote">1</a></sup>が、先日 <a href="https://www.publickey1.jp/blog/23/ruby30static_compiler_for_ruby.html">ruby30th 誕生日会のキーノート</a>で
matz が “Static Compiler for Ruby” という今はまだない <code class="language-plaintext highlighter-rouge">vaporware</code> として
挙げていたのでこの <strong>static compiler</strong> を作ろうとなりました。</p>

<p><a href="https://github.com/katsyoshi/vaporware"><img src="https://gh-card.dev/repos/katsyoshi/vaporware.svg" alt="katsyoshi/vaporware - GitHub" /></a></p>

<h2 id="goal">Goal</h2>

<p><strong>Ruby</strong> のコードを <strong>static compile</strong> できるようにする。</p>

<p>コンパイル先のターゲットは <strong>x86</strong> とします。 <strong>ARM</strong> や <strong>RISC-V</strong> などは今回の実装ではターゲットにしないです。</p>

<p>とはいえすべての <strong>Ruby</strong> の機能を実装すると時間がかかりすぎるので個人で無理のない範囲
で作ろうとします。無理のない実装範囲は以下なのかなと</p>

<ol>
  <li>四則演算</li>
  <li>変数</li>
  <li>メソッド</li>
  <li>制御構文</li>
  <li>プリミティブ型</li>
</ol>

<p>この5つの機能を実装する予定です。</p>

<h3 id="実現する機能以外のことについて">実現する機能以外のことについて</h3>

<p>5つの機能を実現すること以上のことはやらない予定です。
やらないこととしては <em>最適化</em> 、 <em>GC</em> 、 外部ファイルで定義したメソッドやクラスの読み込みは実装しない予定です。
実装しない個人的意見を以下に書いていきます。</p>

<p>最適化は <strong>Ruby</strong> のコードを単純に <em>機械語</em> におとしただけでは現在の <strong>RubyVM</strong>
より速くならないと考えているからです(要確認)。
<strong>LLVM IR</strong> などへの変換ではなく、 <em>機械語</em> なのは <strong>LLVM</strong> をインストールする必要があるなどして
面倒なのが大きいです<sup id="fnref:gentoo" role="doc-noteref"><a href="#fn:gentoo" class="footnote" rel="footnote">2</a></sup>。あとバージョン毎に <strong>LLVM IR</strong> が異なるのも現状では対応しにくい点となっています。</p>

<p><em>GC</em> (Garbage Collection: ガベージコレクション) についてはそもそもクラスをサポートできない、
変数などのメモリを確保しておく時間が長いプログラムを対象としないので今回はスコープ外としています。</p>

<p>外部ファイル読み込みについてですが、外部ファイルの読み込みして <em>コンパイル</em> するだけなら
そこまで問題にはならないと考えていますが、外部ファイルで定義された <em>メソッド</em> や <em>クラス</em> を
事前に <em>コンパイル</em> して最後に <em>リンク</em> するのは型が不定になるのでサポートするのは難しいと考えています。</p>

<h2 id="実装方針">実装方針</h2>
<p>Goal までの実装は <a href="https://www.sigbus.info/compilerbook">低レイヤを知りたい人のためのCコンパイラ作成入門</a> を参考にすすめていきます。
最初に <em>コンパイラー</em> を実装するものとして <em>C 言語</em> がたぶん勉強してきてうかぶと思います<sup id="fnref:java" role="doc-noteref"><a href="#fn:java" class="footnote" rel="footnote">3</a></sup>。
<em>C 言語</em> だと <em>機械語</em> や <em>VM</em> のバイトコードへ落とすことのできる資料が多いので選択しています。
とは言っても <strong>Ruby</strong> からの脳内変換はある程度必要なので慣れているというのもあります。</p>

<p>実装としては <em>AST</em>(Abstract Syntax Tree: 構文抽象木) から愚直に <strong>x86 アセンブラ</strong> をファイルへ書き出し、
そこから <em>C コンパイラー</em> (<code class="language-plaintext highlighter-rouge">gcc</code> or <code class="language-plaintext highlighter-rouge">clang</code>) をつかって機械語へ <em>コンパイル</em> します。
フルフルの <strong>Ruby</strong> を実装するわけじゃないので依存する <strong>gem</strong> の依存も極力減らしたいです。</p>

<h3 id="実装環境">実装環境</h3>

<ul>
  <li>CPU: Ryzen Thread Ripper 1950x</li>
  <li>gcc: 12.2.1</li>
  <li>clang: 16.0.0</li>
  <li>OS: Gentoo Linux</li>
  <li>Linux Kernel: 6.2 系</li>
</ul>

<h2 id="パーサー">パーサー</h2>

<p>まず、<em>AST</em> を得るために <em>パーサー</em> が必要なのですが、 <strong>Ruby</strong> の構文は複雑なのでここは頑張らないようにします。ここをどうやって解決するのかというと <code class="language-plaintext highlighter-rouge">RubyVM::AbstractSyntaxTree</code> や <code class="language-plaintext highlighter-rouge">Ripper</code> をつかうのか、<code class="language-plaintext highlighter-rouge">parser.gem</code> をつかうのかを決めるひつようがあります。今回というかしばらくは <code class="language-plaintext highlighter-rouge">parser.gem</code> を利用して <em>AST</em> を得ることにします。
ゆくゆくは <code class="language-plaintext highlighter-rouge">RubyVM::AbstractSyntaxTree</code> への置き替えはするよていです。</p>

<p>ここはそのまま <code class="language-plaintext highlighter-rouge">parser.gem</code> のチュートリアルどおりにすれば <em>AST</em> が得られます。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"parser/current"</span>

<span class="nb">puts</span> <span class="no">Parser</span><span class="o">::</span><span class="no">CurrentRuby</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"(1 + 2) * 3 / (5 - 4)"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="きょうはここまで">きょうはここまで</h2>

<p>とりあえず手を動かしはじめましたが、ななななんと、似たような機能が実は <strong>Ruby 3.3</strong> 向けに
<em>JIT</em> として入ったようです<sup id="fnref:rjit" role="doc-noteref"><a href="#fn:rjit" class="footnote" rel="footnote">4</a></sup>。
ということでねこの話はね、勉強の話しかないんですが一旦 Goal まで作ってみましょうね。</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:kojinsa" role="doc-endnote">
      <p>個人差があります。 <a href="#fnref:kojinsa" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:gentoo" role="doc-endnote">
      <p>Gentoo Linux 使っているので毎回コンパイルしているので本当にめんどう。バイナリあるよとかそういう正論は受け付けていないです。 <a href="#fnref:gentoo" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:java" role="doc-endnote">
      <p>時代によって変わるかも。<strong>Java</strong> だったり、<strong>Lisp</strong> だったりする人がいるかも。 <a href="#fnref:java" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:rjit" role="doc-endnote">
      <p>https://github.com/ruby/ruby/pull/7448 <a href="#fnref:rjit" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><category term="compiler" /><summary type="html"><![CDATA[プログラマー三大勉強はしたけど、実装はしたことないものといえば CPU、OS、コンパイラーなのです1が、先日 ruby30th 誕生日会のキーノートで matz が “Static Compiler for Ruby” という今はまだない vaporware として 挙げていたのでこの static compiler を作ろうとなりました。 個人差があります。 &#8617;]]></summary></entry></feed>