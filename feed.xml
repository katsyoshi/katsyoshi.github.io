<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://blog.katsyoshi.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.katsyoshi.org/" rel="alternate" type="text/html" /><updated>2025-06-03T00:52:08+09:00</updated><id>https://blog.katsyoshi.org/feed.xml</id><title type="html">katsyoshi のめもみたいなの</title><subtitle>It&apos;s a memos.</subtitle><entry><title type="html">Gentoo のバイナリ配布公式レポを発見したので対応してみたら大失敗した</title><link href="https://blog.katsyoshi.org/blog/2025/05/31/im-happy-to-binary-in-gentoo/" rel="alternate" type="text/html" title="Gentoo のバイナリ配布公式レポを発見したので対応してみたら大失敗した" /><published>2025-05-31T23:59:59+09:00</published><updated>2025-05-31T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2025/05/31/im-happy-to-binary-in-gentoo</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2025/05/31/im-happy-to-binary-in-gentoo/"><![CDATA[<p>[<strong>Gentoo Linux</strong>] でバイナリが公式配っていたのを<a href="https://pong.ursm.jp/posts/4">発見</a>したので、
<a href="https://gist.github.com/katsyoshi/3d28b9609b7d395826ed93dd8288f0a9">退役したデスクトップ</a>をサーバー用途として利用してみます。</p>

<h2 id="設定">設定</h2>

<p>設定自体は発見したブログを参考に設定することで問題はないです。</p>

<h3 id="インストール">インストール</h3>

<p>ではインストールをしてみましょう。
ブログを参考にリポジトリなどを設定後、以下のコマンドでインストールします。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emerge -uDN world
</code></pre></div></div>

<h3 id="そして失敗へ">そして失敗へ……</h3>

<p>インストールが終わり、動いているのを確認しましょう。
動いていますね。OK, OK では不要なパッケージを片づけましょうかね。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emerge --depclean
</code></pre></div></div>

<p>一部バイナリになって便利になりましたねー。便利ー。</p>

<p><a href="https://zellij.dev"><strong>Zellij</strong></a> のセッションが残っている間は問題が特にわからなかったです。
次の日あたり、クライアントから <a href="https://www.samba.org/"><strong>Samba</strong></a> がなぜか繋がらなくなっています。
原因を探るため、 <strong>ssh</strong> でログインしてみましょう。
これもログイン失敗します。しかたないのでユーザーを替えてログインしてみます。こいつはログインできます。
ログインしたアカウントから <code class="language-plaintext highlighter-rouge">doas</code> してみますが、 <code class="language-plaintext highlighter-rouge">doas</code> できる権限を与えていないので当然できません。
<code class="language-plaintext highlighter-rouge">sudo</code> は <code class="language-plaintext highlighter-rouge">sudo</code> 自体を削除しているのでできないですね。
また <code class="language-plaintext highlighter-rouge">su</code> も権限がないので別ユーザーへ変更できないです。
ということで何かまずいことが起きているのでログインできるようにサーバーの復旧を行ないます。</p>

<p>いつも通り <strong>OS</strong> インストールと同様にインストールディスクを起動して<a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Base/ja#%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B">必要なディレクトリをマウント</a>します。
そうするとなぜかいつも利用しているはずのコマンド <code class="language-plaintext highlighter-rouge">eix</code> 、 <code class="language-plaintext highlighter-rouge">git</code> や <code class="language-plaintext highlighter-rouge">zsh</code> が無いのです!!!</p>

<p>ということでインストールします。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emerge <span class="nt">--sync</span> <span class="c"># リポジトリを git で読むようにしているので失敗</span>
emerge git <span class="c"># デフォルトリンカを mold にしているので失敗</span>
<span class="c"># mold 使わないように修正</span>
emerge git
emerge eix
eix-sync <span class="c"># ようやく成功</span>
emerge zsh
</code></pre></div></div>

<p>というようなコマンドを実施してなんとか復旧。</p>

<h3 id="おわり">おわり</h3>
<p>バイナリの配布リポジトリを設定できるのは薄々知ってはいたのですが、
動いているのを変更するの面倒だったので今回替えてみました。
カーネルもバイナリでインストールできるようになったので便利になりました(たぶん)。
あとうかつに <code class="language-plaintext highlighter-rouge">emerge --depclean</code> はするもんじゃない。</p>]]></content><author><name></name></author><category term="diary" /><category term="gentoo" /><category term="tech" /><summary type="html"><![CDATA[[Gentoo Linux] でバイナリが公式配っていたのを発見したので、 退役したデスクトップをサーバー用途として利用してみます。]]></summary></entry><entry><title type="html">RubyKaigi 2025 at Matz-yama</title><link href="https://blog.katsyoshi.org/blog/2025/04/25/went-to-rubykaigi-2025/" rel="alternate" type="text/html" title="RubyKaigi 2025 at Matz-yama" /><published>2025-04-25T23:00:00+09:00</published><updated>2025-04-25T23:00:00+09:00</updated><id>https://blog.katsyoshi.org/blog/2025/04/25/went-to-rubykaigi-2025</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2025/04/25/went-to-rubykaigi-2025/"><![CDATA[<p>今年も <a href="https://rubykaigi.org/2025">RubyKaigi 2025</a> に行ってきました。</p>

<p>今年みたセッション一覧を日毎に。</p>

<h2 id="day-1">Day 1</h2>

<ol>
  <li><a href="https://speakerdeck.com/ima1zumi/ruby-taught-me-about-under-the-hood">Ruby Taught Me About Encoding Under the Hood</a></li>
  <li><a href="https://mensfeld.github.io/bringing_linux_pidfd_to_ruby/">Bringing Linux pidfd to Ruby</a></li>
  <li><a href="https://speakerdeck.com/kateinoigakukun/the-evolution-of-the-cruby-build-system">The Evolution of the CRuby Build System</a></li>
  <li><a href="https://speakerdeck.com/k0kubun/rubykaigi-2025">Deoptimization: How YJIT Speeds Up Ruby by Slowing Down</a></li>
  <li><a href="https://speakerdeck.com/yui_knk/rubys-line-breaks">Ruby’s Line Breaks</a></li>
  <li><a href="https://speakerdeck.com/tagomoris/state-of-namespace">State of Namespace</a></li>
  <li><a href="https://github.com/tric/trick2025">TRICK 2025: Episode I</a></li>
</ol>

<p>初日のキーノートは、 <a href="https://github.com/ima1zumi">@ima1zumi</a> さんで文字コードの話してくれました。
つぎは <a href="https://github.com/mensfeld">@mensfeld</a> の <code class="language-plaintext highlighter-rouge">pidfd</code> の話を聞きました。
これは server 動かしているとはまる問題、 <code class="language-plaintext highlighter-rouge">pid</code> の使い回しによるバグの対処方法として <code class="language-plaintext highlighter-rouge">pidfd</code> を <code class="language-plaintext highlighter-rouge">Ruby</code> に対応したという話でした。
オチは、そもそも <strong>overkill</strong> で不要だったねという。
午前の終りは <a href="https://github.com/kateinoigakukun">@kateinoigakukun</a> さんのビルドシステムの話でした。 <em>Ruby</em> のビルドシステムのリプレースを考えているようでした。
午後一発目はお馴染 <strong>Shopify</strong> の <em>YJIT</em> チームの <a href="https://github.com/k0kubun">@k0kubun</a> さんの話。 <em>YJIT</em> を速くするために、如何に <em>deoptimization</em> するかという話で、速くするための方法を話していました。
<strong>パーサーギャング</strong> 一味のドン、<a href="https://github.com/yui-knk">@yi-knk</a> さんの話で今年楽しみにしてた発表。
<em>Namespace</em> の話は <a href="https://github.com/tagomoris">@tagomoris</a> さんがやってくれました。
今年のうちに入りそうな雰囲気を感じた。
いったん休憩して <strong>trick</strong> へ。</p>

<h2 id="day-2">Day 2</h2>

<ol>
  <li><a href="https://docs.google.com/presentation/d/1lDnxFkc4URsi0LP4w1M5IXv5A02AG_HUy3gW_SpEWOA/edit#slide=id.g34edb417dc3_0_1471">Performance Bugs and Low-level Ruby Observability APIs</a></li>
  <li><a href="https://speakerdeck.com/ydah/dissecting-and-reconstructing-ruby-syntactic-structures">Dissecting and Reconstructing Ruby Syntactic Structures</a></li>
  <li><a href="">ZJIT: Building a Next Generation Ruby JIT</a></li>
  <li>Bazel for Ruby</li>
  <li><a href="https://speakerdeck.com/junk0612/the-implementations-of-advanced-lr-parser-algorithm">The Implementations of Advanced LR Parser Algorithm</a></li>
  <li>Lightning Talks</li>
</ol>

<p><a href="https://github.com/DataDog/dd-trace-rb"><em>dd-trace-rb</em></a> の作者 <a href="https://github.com/ivoanjo">@ivoanjo</a> の <em>observability</em> の話。
もう同じ目的をもった <a href="https://github.com/osyoyu">@osyoyu</a> が<a href="https://blog.smartbank.co.jp/entry/2025/04/25/110000"><em>スマートバンクブログ</em></a>で解説しているのでそちらを参照。
新米 <a href="https://github.com/orgs/ruby/people"><strong>Ruby Commiter</strong></a> の <a href="https://github.com/ydah">@ydah</a> です。
<a href="https://github.com/ruby/lrama"><em>lrama</em></a> で <em>Ruby</em> の <code class="language-plaintext highlighter-rouge">parse.y</code> をどう読み込むのか、どう構造化するのかの話でした。
<strong>Shopify</strong> <em>YJIT</em> チームの親分、 <a href="https://github.com/maximecb">maximecb</a> の発表。
新しい <em>JIT</em> 、今年一番の衝撃 <em>ZJIT</em> の提案。詳細は <a href="https://bugs.ruby-lang.org/issues/21221">Proposal to upstream ZJIT</a> を見てくれ。
<strong>パーサーギャング</strong> 一味のトリ <a href="https://github.com/junk0612">@junk0612</a> の発表。
<em>lrama</em> に <em>IELR</em> を適用してみる話。まあ遅かったりするようです。
最後に</p>

<h2 id="day-3">Day 3</h2>

<ol>
  <li>Ruby Committers and the World</li>
  <li><a href="https://speakerdeck.com/sisshiki1969/improve-my-own-ruby">Improving my own Ruby</a></li>
  <li><a href="https://speakerdeck.com/ahogappa/the-ruby-one-binary-tool-enhanced-with-kompo">The Ruby One-Binary Tool, Enhanced with Kompo</a></li>
  <li><a href="https://atdot.net/~ko1/activities/2025_rubykaigi2025.pdf">Toward Ractor local GC</a></li>
  <li><a href="">Modular Garbage Collectors in Ruby</a></li>
  <li><a href="">Matz Keynote</a></li>
</ol>

<p><a href="https://github.com/sisshiki1969">@sisshiki1969</a> さんで、<em>rust</em> の <em>ruby</em> 処理系を作ってる人で、速くした話でした。
<a href="https://github.com/ahogappa">@ahogappa</a> さんが作ってる <em>kompo</em> というツールの話で、この <em>kompo</em> はバイナリー1つにまとめてくれる便利ツールです。
今回は <em>Rails</em> アプリが動くようになった話をしていました。
<a href="https://github.com/peterzhu2118">@peterzhu2118</a> さんが <em>GC</em> (<em>Garbage Collection</em>) をモジュール化して入れ替えれるような話をしてました。
さいごに <a href="https://github.com/matz">@matz</a> のキーノートで <em>Ruby</em> のこれからの話、<em>AI</em> の話などなど。</p>

<h2 id="おわり">おわり</h2>

<p>おそくなったけど、一旦聞いたセッションをまとめてみました。来年は函館で東京から電車一本で行けるので楽そうですね。
おわり。</p>]]></content><author><name></name></author><category term="diary" /><category term="tech" /><category term="rubykaigi" /><summary type="html"><![CDATA[今年も RubyKaigi 2025 に行ってきました。]]></summary></entry><entry><title type="html">Hello, ZOLA を失敗した話</title><link href="https://blog.katsyoshi.org/blog/2025/04/12/failed-hello-zola/" rel="alternate" type="text/html" title="Hello, ZOLA を失敗した話" /><published>2025-04-12T00:00:00+09:00</published><updated>2025-04-12T00:00:00+09:00</updated><id>https://blog.katsyoshi.org/blog/2025/04/12/failed-hello-zola</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2025/04/12/failed-hello-zola/"><![CDATA[<p>HELLO, <a href="https://www.getzola.org"><code class="language-plaintext highlighter-rouge">ZOLA</code></a> World!!!!! としたかったけど、
移行が面倒すぎたので諦めた話。
以下は作業ログです。一応終りは見えたけど、</p>

<h2 id="elections">ELECTIONS</h2>

<p><strong><a href="http://jekyllrb.com/">Jekyll</a></strong> でサイト作るの飽きてきたので、
新しい <em>SSG(Static Site Generator)</em> に変更することにした。</p>

<p>選定必須基準として、以下の条件を。</p>

<ol>
  <li><em><a href="https://tex2e.github.io/rfc-translater/html/rfc7763.html">markdown 形式</a></em><sup id="fnref:markdown"><a href="#fn:markdown" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> で書けること</li>
  <li><strong>Jekyll</strong> と同じ <em>URL</em> が生成されること</li>
</ol>

<p>いまどき直接 <em>HTML</em> で書く人はあまりいないし、いままでの記事があるので <em>markdown</em> で書けることは当然ですね。
もうひとつの必須条件として、 <strong>Jekyll</strong> で設定した <em>URL</em> で記事が書けることとなります。
これは現在出している記事の <em>URL</em> を変更しないために必須です。</p>

<p>移行に苦労しないようにするために以下の条件をとることにした。</p>

<ol>
  <li><strong>Jekyll</strong> と同じ様に <em>markdown</em> の先頭に <em>frontmatter</em> でいろいろと設定できること</li>
  <li><strong>Jekyll</strong> と同様にテーマが選択できること</li>
  <li>バイナリーで配ってること</li>
</ol>

<p><em>frontmatter</em> については移行を楽にするためで多少の書き替えはしかたがないとしています。
デザイン変更を楽にするためテーマが選択できる <em>SSG</em> だといいなあと思い。
バイナリーで配ってあると楽なんですよ<sup id="fnref:binary"><a href="#fn:binary" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>。</p>

<p>以上の条件を踏まえいくつか検討してみましたが、 <strong>zola</strong> にしました。</p>

<p><a href="https://github.com/getzola/zola"><img src="https://gh-card.dev/repos/getzola/zola.svg" alt="getzola/zola - GitHub" /></a></p>

<h2 id="jekyll-to-zola">Jekyll to Zola</h2>

<p><a href="https://github.com/katsyoshi/jekyll2zola"><img src="https://gh-card.dev/repos/katsyoshi/jekyll2zola.svg" alt="katsyoshi/jekyll2zola - GitHub" /></a></p>

<h3 id="やったこと">やったこと</h3>

<p>まず、ファイル名が <code class="language-plaintext highlighter-rouge">.markdown</code> と混在してので <code class="language-plaintext highlighter-rouge">.md</code> へ統一。
つぎに <em>markdown</em> 先頭の <em>frontmatter</em> を <a href="https://yaml.org"><strong>YAML</strong></a> から <a href="https://toml.io"><strong>TOML</strong></a> へ変換する。
これは大変な話ではなく、 <em>frontmatter</em> 部分を読み込んで変更するだけです。
でこの変更部分なのですが、大抵の部分は問題にならないです。
大抵の部分は……</p>

<h4 id="url-の設定"><em>URL</em> の設定</h4>

<p><em>URL</em> の設定は、<a href="https://zenn.dev/anz/scraps/ebf857a5cbcfb6#front-matter-%E3%81%A7%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95">参考サイト</a> の設定を利用して変換します。
ここで問題となるのが、<strong>Jekyll</strong> の設定で、 <code class="language-plaintext highlighter-rouge">/blog/%Y/%m/%d/file-name</code> となっていることです。
<del><strong>Zola</strong> では <code class="language-plaintext highlighter-rouge">config.toml</code> で設定する <code class="language-plaintext highlighter-rouge">slugify</code> に設定する方法があるようですが、イマイチ使えず</del>
（そもそも <code class="language-plaintext highlighter-rouge">slugify</code> を勘違いしてた）。
ディレクトリを利用し<a href="https://www.getzola.org/documentation/content/overview/">設定する方法</a>と <em>frontmatter</em> に <code class="language-plaintext highlighter-rouge">path</code> で<a href="https://www.getzola.org/documentation/content/page/">設定する方法</a>があります。
今回は <em>frontmatter</em> で <code class="language-plaintext highlighter-rouge">path</code> 指定して <em>URL</em> を設定することにしました。
変換はファイル名から取得すればよいので問題は特になく変換できました。
ただ、変換する際にこのままだと挿入するには注意が必要で、挿入する必要があります。
これは <a href="https://docs.ruby-lang.org/ja/latest/method/Array/i/insert.html"><code class="language-plaintext highlighter-rouge">Array#insert</code></a> を利用すれば <a href="https://github.com/katsyoshi/jekyll2zola/blob/main/lib/jekyll2zola/converter.rb#L34">解決</a> ですね。</p>

<h4 id="テーマ">テーマ</h4>

<p><a href="https://www.getzola.org/themes/">テーマ</a> はあるのですがプラグイン形式というわけではなく、 <code class="language-plaintext highlighter-rouge">git clone</code> or <code class="language-plaintext highlighter-rouge">git submodule add</code> して利用する点が慣れない。
気になる部分は <code class="language-plaintext highlighter-rouge">template/</code> に修正ファイルを全部作る必要があり面倒でした。
<a href="https://crates.io/"><em>Cargo</em></a> でインストールできればいいのに……
ということでもっと面倒臭い自分のテーマを作ることでこの気になる点を解決。
作成方法は <a href="https://www.getzola.org/documentation/getting-started/overview/#templates">公式ドキュメント</a> を参考にすすめれば問題なく作成できます。
テーマというか、普通にテンプレート化するだけです。
<a href="https://www.getzola.org/documentation/themes/creating-a-theme/">テーマ化</a> も実際は簡単にでき、 <code class="language-plaintext highlighter-rouge">theme.toml</code> を書いておけば大丈夫なようです。
個人的に利用しているだけなのでテーマ化はしないですが。</p>

<h4 id="feedxml">FEED.XML</h4>

<p><em><a href="https://www.rssboard.org/rss-specification">RSS Feed</a></em> 自体はサポートされていますが、 <em>URL</em> のパスが <code class="language-plaintext highlighter-rouge">/atom.xml</code> か <code class="language-plaintext highlighter-rouge">/rss.xml</code> になってしまうため
旧来のパス <code class="language-plaintext highlighter-rouge">/feed.xml</code> は新規にテンプレートを作る必要があります。
これは追い追い考える。現状 <strong>Jekyll</strong> にあった <code class="language-plaintext highlighter-rouge">feed.xml</code> を作るのは大変すぎる。</p>

<h4 id="こまかい修正">こまかい修正</h4>
<p>いくつか気になる部分があったがこまかいので手で修正</p>

<ol>
  <li>脚注の順番が脚注を書いた順に出力</li>
  <li><em>Syntax Highlighting</em> のサポート言語</li>
  <li>画像の変更</li>
  <li><em>rake task</em> の整理</li>
</ol>

<p>脚注は脚注で引用した順番ではなく、脚注を書いた順になっているので修正してます。
<em>Syntax Highlighting</em> ではサポートされていない書きかた（<strong>console</strong>）をやめてサポートされている言語（<strong>bash</strong>）へ修正。
画像の変更はとくに <strong>zola</strong> は関係なく、大きいファイルが多いので変更しています。 
<em>rake task</em> では、いままでデプロイやら記事作成やらなんだかんだやっていたので整理を行いました。
今は一旦、記事作成だけにしております。そのうちデプロイを行なえるようになると思います</p>

<h2 id="とここまで書いたけどデプロイやめた">とここまで書いたけどデプロイやめた</h2>

<p>というのが、 <code class="language-plaintext highlighter-rouge">feed.xml</code> の移行とスタイルの修正が思った以上に大変で中止。
この今 <strong>Jekyll</strong> のテーマのスタイルがあれば、そのうち変更するかもね。</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:markdown">
      <p><em><a href="https://www.ietf.org/process/rfcs/">RFC</a>(Request For Comment)</em> になっててびびってる <a href="#fnref:markdown" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:binary">
      <p><strong>Jekyll</strong> は依存解決とかあって最新の <a href="https://www.ruby-lang.org">Ruby</a> が使えなかったりしたのでストレスたかかった <a href="#fnref:binary" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="tech" /><category term="dialy" /><category term="rust" /><summary type="html"><![CDATA[HELLO, ZOLA World!!!!! としたかったけど、 移行が面倒すぎたので諦めた話。 以下は作業ログです。一応終りは見えたけど、]]></summary></entry><entry><title type="html">KaigiOnRails 2024 に行ってきました</title><link href="https://blog.katsyoshi.org/blog/2024/10/27/kaigi-on-rails-2024/" rel="alternate" type="text/html" title="KaigiOnRails 2024 に行ってきました" /><published>2024-10-27T11:09:14+09:00</published><updated>2024-10-27T11:09:14+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/10/27/kaigi-on-rails-2024</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/10/27/kaigi-on-rails-2024/"><![CDATA[<p><a href="https://kaigionrails.org/2024">Kaigi on Rails 2024</a> にはじめて現地参加しました。</p>

<h2 id="day-1">day 1</h2>

<h3 id="day-1-before">day 1 before</h3>
<p>kaigiが始まるまえに場所が有明だったので朝寿司へ。
1年くらい前はよく朝寿司に行っていたので余裕だろうとおもい、朝9時集合に設定した。
普段行ってる店ではなく新規開拓ということで tabelog の評価が高い、<a href="https://tabelog.com/tokyo/A1313/A131307/13023020/">寿司処 やまざき</a> さんにしました。
食べたあと丁度いい時間に会場へ入れそうだったので歩いて向いました。</p>

<h3 id="会議">会議</h3>

<p>聞いたセッションは以下のとおり</p>

<ol>
  <li><a href="https://speakerdeck.com/palkan/kaigi-on-rails-2024-rails-way-or-the-highway">rails-way-or-the-highway</a></li>
  <li><a href="https://speakerdeck.com/yahonda/railsnopull-requestsnorebiyunoshi-nisi-gakao-eteirukoto">RailsのPull requestsのレビューの時に私が考えていること</a></li>
  <li><a href="https://speakerdeck.com/asayamakk/karamuzhui-jia-dezeng-eruactiverecordnomemorisaizu-imezidekimasuka">そのカラム追加、ちょっと待って！カラム追加で増えるActiveRecordのメモリサイズ、イメージできますか?</a></li>
  <li><a href="https://speakerdeck.com/ymtdzzz/opentelemetryderailsnopahuomansufen-xi-woshi-metemiyou-kor2024">モノリスでも使える！OpenTelemetryでRailsアプリのパフォーマンス分析を始めてみよう</a></li>
  <li><a href="https://speakerdeck.com/phigasui/cxml-toiudian-zi-shang-qu-yin-no-toranzakusiyonwozhi-eru-purotokorutoxiang-kiatuteiruhua">cXML という電子商取引のトランザクションを支えるプロトコルと向きあっている話</a></li>
  <li><a href="https://speakerdeck.com/katty0324/ririsu8nian-mu-nosabisuno1800ge-noerbhuairuwoviewcomponentniyi-xing-sitafang-fa-tosonojie-guo">リリース8年目のサービスの1800個のERBファイルをViewComponentに移行した方法とその結果</a></li>
  <li>[ActionCableなら簡単? 生成 AIの応答をタイピングアニメーションで表示。実装、コスト削減、テスト、運用まで。]</li>
  <li><a href="https://speakerdeck.com/takeyuweb/railsatupuguredo">現実のRuby/Railsアップグレード</a></li>
</ol>

<h4 id="感想">感想</h4>

<p>キーノートの <a href="https://github.com/palkan">@palkan</a> の話はすごくよくて、Rails Wayについて話をしてくれました。
<a href="https://github.com/yahonda">@yahonda</a> は、 Rails の <a href="https://rubyonrails.org/community#committers">The Committers</a> の一員で Rails でレビューしている際に気を付けている部分について話してくれてました。
<a href="https://github.com/asayamakk">@asayamakk</a> は DB にカラムを増やすとどれだけ ActiveRecord のオブジェクトが増え、メモリの消費量が増えるかの話でした。
<a href="https://github.com/katty0324">@katty0324</a> は ViewComponent に移行するために自動化した話でした。この話は大変興味深く聞いてました。
<code class="language-plaintext highlighter-rouge">ViewComponent</code> に対応するために問題の整理、自動化するための準備など丁寧に仕事している印象でした。
<a href="https://github.com/takeyuweb">@takeyuweb</a> ではアップデートするためになにをしたのか、していくのかという話をしてくれていました。</p>

<h3 id="day-1-after">day 1 after</h3>
<p>この日はオフィシャルの懇親会があり、わいわいと話してました。このとき <a href="https://github.com/tagomoris">@tagomoris</a> が Ruby でやっている Namespace のビルドが通ったらしく皆でお祝い。
懇親会後に @palkan や @yahonda たちと二次会で新橋へ。私は早々に帰ったのですが会は1:30ごろ解散だったようです。</p>

<h2 id="day-2">day 2</h2>

<h3 id="day-2-before">day 2 before</h3>

<p>この日の 10:00 のセッションに間に合うはずだったのですが、出る時間の予定が狂ってしまった。
出る直前に近所のおじさんが向っていることに気がついたので有楽町で落ちあい、タクシーで向かうことに。</p>

<h3 id="kaigi">Kaigi</h3>

<ol>
  <li><a href="https://speakerdeck.com/ydah/zuo-tuteli-jie-suru-rdbmsnosikumi">作って理解する RDBMSのしくみ</a></li>
  <li><a href="https://speakerdeck.com/shinkufencer/state-for-beginners-with-rails">入門『状態』</a></li>
  <li><a href="https://speakerdeck.com/nay3/hotwireguang-nodao-tostimulus">Hotwire光の道とStimulus</a></li>
  <li><a href="https://speakerdeck.com/ohbarye/data-migration-on-rails">Data Migration on Rails</a></li>
  <li><a href="https://speakerdeck.com/moro/identifying-user-idenity">Identifying User Identity</a></li>
  <li><a href="https://speakerdeck.com/snoozer05/wholeness-repairing-and-to-have-fun">WHOLENESS, REPAIRING, AND TO HAVE FUN: 全体性、修復、そして楽しむこと</a></li>
</ol>

<h4 id="kansou">Kansou</h4>

<p>最初のセッションは前日いっしょに飲んでた <a href="https://github.com/ydah">@ydah</a> で、RDBの中身の基本的な話をしてくれました。
その後はちょくちょくづつ聞く感じになりました。
<a href="https://github.com/snoozer05">@snoozer05</a> のキーノートはいい話でした。</p>

<h3 id="day-2-after">day 2 after</h3>

<p>会議後の懇親会は <a href="https://mov.am">mov</a> Drinkup と <a href="https://pixiv.net">pixiv</a> RubyMusicMixin へ。
この日は前日の疲れが取れていないので終ったあとすぐに帰宅。</p>

<h2 id="おわり">おわり</h2>

<p>たのしい二日間でした。ありがとうございました。</p>]]></content><author><name></name></author><category term="diary" /><category term="tech" /><category term="conference" /><summary type="html"><![CDATA[Kaigi on Rails 2024 にはじめて現地参加しました。]]></summary></entry><entry><title type="html">今日、私が学んだこと</title><link href="https://blog.katsyoshi.org/blog/2024/05/30/til/" rel="alternate" type="text/html" title="今日、私が学んだこと" /><published>2024-05-30T23:59:59+09:00</published><updated>2024-05-30T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/30/til</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/30/til/"><![CDATA[<p>ここ1年ほど <strong>Ruby</strong> のパーサーがもりあがっているので、
<a href="https://github.com/ruby/lrama"><strong>lrama</strong></a> の作者を講師にした
通称<strong>ドラゴンブック</strong>の「<a href="https://www.saiensu.co.jp/search/?isbn=978-4-7819-1229-5&amp;y=2009">コンパイラ</a>」読書会
に参加しています。</p>

<p>4.8.1 節の「競合解消のための優先順位と結合性」を読み感想を言い合う場で、
以下のような話になった。（細かいとろこは本を読んでくれ</p>
<ul>
  <li>id + id * id
    <ul>
      <li><code class="language-plaintext highlighter-rouge">+</code> は <code class="language-plaintext highlighter-rouge">*</code> より優先度が低いため shift</li>
    </ul>
  </li>
  <li>id * id + id
    <ul>
      <li><code class="language-plaintext highlighter-rouge">*</code> は <code class="language-plaintext highlighter-rouge">*</code> より優先度が高いため reduce</li>
    </ul>
  </li>
  <li>id + id + id
    <ul>
      <li><code class="language-plaintext highlighter-rouge">+</code> は左結合なので reduce</li>
    </ul>
  </li>
  <li>id = id = id
    <ul>
      <li><code class="language-plaintext highlighter-rouge">=</code> は右結合なので shift</li>
    </ul>
  </li>
</ul>

<p>ここでそういえば <strong>Ruby</strong> ではどう動くのだろうかとおもい、次の式を<strong>irb</strong>で書いてみた
<code class="language-plaintext highlighter-rouge">0 - i = 1 + j = 2 * 3 #=&gt; -7</code> とまあ普通（？）の答えが返ってきた。
でも上のパーサーの条件考えてみるとそもそもこのコードはほかのプログラミング言語で
パースできるのだろうかと思い、やってみた。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-c</span> <span class="s1">'0 - j = 1 + j = 2 * 3'</span>
<span class="gp">  File "&lt;string&gt;</span><span class="s2">", line 1
</span><span class="go">    0 - j = 1 + j = 2 * 3
    ^^^^^
SyntaxError: cannot assign to expression
</span><span class="gp">$</span><span class="w"> </span>perl <span class="nt">-e</span> <span class="s1">'0 - j = 1 + j = 2 * 3'</span>
<span class="go">Can't modify addition (+) in scalar assignment at -e line 1, at EOF
Execution of -e aborted due to compilation errors.
</span><span class="gp">$</span><span class="w"> </span>lua <span class="nt">-e</span> <span class="s1">'0 - j = 1 + j = 2 * 3'</span>
<span class="go">lua: (command line):1: unexpected symbol near '0'
</span><span class="gp">$</span><span class="w"> </span>crystal <span class="nb">eval</span> <span class="s1">'0 - j = 1 + j = 2 * 3'</span>
<span class="go">syntax error in eval:1
Error: unexpected token: "="
</span><span class="gp">$</span><span class="w"> </span>ruby <span class="nt">-e</span> <span class="s1">'0 - j = 1 + j = 2 * 3'</span>
<span class="go">
</span><span class="gp">$</span><span class="w">
</span></code></pre></div></div>

<p>:thinkingface:？？？とにかく <strong>Ruby</strong> は通るが他のプログラミング言語で通らないことがわかった。</p>

<p>さいごに <strong>Ruby</strong> の <strong>AST</strong> がどうなってるのかとりあずみてみた。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">ruby</span> <span class="o">-</span><span class="n">e</span> <span class="s1">'pp RubyVM::AbstractSyntaxTree.parse "0 - j = 1 + j = 2 * 3"'</span>
<span class="p">(</span><span class="no">SCOPE</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span>
 <span class="ss">tbl: </span><span class="p">[</span><span class="ss">:j</span><span class="p">]</span>
 <span class="ss">args: </span><span class="kp">nil</span>
 <span class="ss">body:
   </span><span class="p">(</span><span class="no">OPCALL</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span> <span class="p">(</span><span class="no">LIT</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span> <span class="mi">0</span><span class="p">)</span> <span class="p">:</span><span class="o">-</span>
      <span class="p">(</span><span class="no">LIST</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span>
         <span class="p">(</span><span class="no">LASGN</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span> <span class="ss">:j</span>
            <span class="p">(</span><span class="no">OPCALL</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">8</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span> <span class="p">(</span><span class="no">LIT</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">8</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">9</span> <span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">+</span>
               <span class="p">(</span><span class="no">LIST</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">12</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span>
                  <span class="p">(</span><span class="no">LASGN</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">12</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span> <span class="ss">:j</span> <span class="p">(</span><span class="no">OPCALL</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">16</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span> <span class="p">(</span><span class="no">LIT</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">16</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">17</span> <span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">*</span> <span class="p">(</span><span class="no">LIST</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">20</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span> <span class="p">(</span><span class="no">LIT</span><span class="err">@</span><span class="mi">1</span><span class="p">:</span><span class="mi">20</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span> <span class="mi">3</span><span class="p">)</span> <span class="kp">nil</span><span class="p">)))</span>
                  <span class="kp">nil</span><span class="p">)))</span> <span class="kp">nil</span><span class="p">)))</span>
</code></pre></div></div>

<p>まあわかるような木構造になってますね。
それはそうとパーサーどうなってるんですかねえという話でおわり。</p>]]></content><author><name></name></author><category term="diary" /><category term="tech" /><summary type="html"><![CDATA[ここ1年ほど Ruby のパーサーがもりあがっているので、 lrama の作者を講師にした 通称ドラゴンブックの「コンパイラ」読書会 に参加しています。]]></summary></entry><entry><title type="html">Ruby を KOMPO してみた</title><link href="https://blog.katsyoshi.org/blog/2024/05/29/startup-kompo/" rel="alternate" type="text/html" title="Ruby を KOMPO してみた" /><published>2024-05-29T23:59:59+09:00</published><updated>2024-05-29T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/29/startup-kompo</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/29/startup-kompo/"><![CDATA[<p><strong>RubyKaigi2024</strong> の発表、<a href="https://speakerdeck.com/ahogappa0613/its-about-time-to-pack-ruby-and-ruby-scripts-in-one-binary"><strong>It’s about time to pack Ruby and Ruby scripts in one binary</strong></a>
で話されていた <a href="https://rubygems.org/gems/kompo"><strong>kompo</strong></a> を試してみた。</p>

<h2 id="じゅんびというかとらしゅーというかうごかすまでのきろく">じゅんびというかとらしゅーというかうごかすまでのきろく</h2>

<p>とりあえず動かしてみましょう!!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gem install kompo
$ mkdir hello; cd hello;
$ echo puts \"hello, world\" &gt; hello.rb
$ kompo
which: no brew in (/home/katsyoshi/.rbenv/versions/3.3.1/bin:/home/katsyoshi/.rbenv/libexec:/home/katsyoshi/.rbenv/plugins/ruby-build/bin:/home/katsyoshi/.local/share/zinit/plugins/rust/bin:/home/katsyoshi/.local/share/zinit/plugins/sk/bin:/home/katsyoshi/.local/share/zinit/plugins/hs/bin:/home/katsyoshi/.local/share/zinit/plugins/fd/bin:/home/katsyoshi/.rbenv/shims:/home/katsyoshi/.rbenv/bin:/home/katsyoshi/.pyenv/plugins/pyenv-virtualenv/shims:/home/katsyoshi/.pyenv/shims:/home/katsyoshi/.pyenv/bin:/home/katsyoshi/.local/share/zinit/polaris/bin:bin:/home/katsyoshi/.go/bin:/home/katsyoshi/bin:/home/katsyoshi/.bin:/usr/lib/llvm/17/bin:/usr/lib/llvm/18/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin)
which: no brew in (/home/katsyoshi/.rbenv/versions/3.3.1/bin:/home/katsyoshi/.rbenv/libexec:/home/katsyoshi/.rbenv/plugins/ruby-build/bin:/home/katsyoshi/.local/share/zinit/plugins/rust/bin:/home/katsyoshi/.local/share/zinit/plugins/sk/bin:/home/katsyoshi/.local/share/zinit/plugins/hs/bin:/home/katsyoshi/.local/share/zinit/plugins/fd/bin:/home/katsyoshi/.rbenv/shims:/home/katsyoshi/.rbenv/bin:/home/katsyoshi/.pyenv/plugins/pyenv-virtualenv/shims:/home/katsyoshi/.pyenv/shims:/home/katsyoshi/.pyenv/bin:/home/katsyoshi/.local/share/zinit/polaris/bin:bin:/home/katsyoshi/.go/bin:/home/katsyoshi/bin:/home/katsyoshi/.bin:/usr/lib/llvm/17/bin:/usr/lib/llvm/18/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin)
/home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/lib/kompo.rb:110:in `valid?': kompo-cli not found. Please install 'kompo-cli'. (RuntimeError)
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/lib/kompo.rb:120:in `block in cd_work_dir'
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/3.3.0/tmpdir.rb:99:in `mktmpdir'
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/lib/kompo.rb:118:in `cd_work_dir'
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/exe/kompo:8:in `&lt;top (required)&gt;'
        from /home/katsyoshi/.rbenv/versions/3.3.1/bin/kompo:25:in `load'
        from /home/katsyoshi/.rbenv/versions/3.3.1/bin/kompo:25:in `&lt;main&gt;'

</code></pre></div></div>

<p>「なるほどなるほど、 <strong><code class="language-plaintext highlighter-rouge">brew</code></strong> が必要なのか。そっかー。」
とおもったのだが、そもそも今 <strong>Linux</strong> だぞ？となり、<a href="https://github.com/ahogappa0613/kompo">リポジトリ</a>を見ることに。
リポジトリを見ると <strong>kompo-vfs</strong> をインストールしろと書いてあるな。
<a href="https://github.com/ahogappa0613/kompo?tab=readme-ov-file#building">Building</a> に書いてあるように、ダンロードして手元でビルドして、環境変数を設定してみる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone git@github.com:ahogappa0613/kompo-vfs
$ cd kompo-vfs &amp;&amp; cargo build --release
$ export KOMPO_CLI=$(realpath target/release/kompo-cli)
$ export LIB_KOMPO_DIR=$(realpath target/release)
$ kompo
which: no brew in (/home/katsyoshi/.rbenv/versions/3.3.1/bin:/home/katsyoshi/.rbenv/libexec:/home/katsyoshi/.rbenv/plugins/ruby-build/bin:/home/katsyoshi/.local/share/zinit/plugins/rust/bin:/home/katsyoshi/.local/share/zinit/plugins/sk/bin:/home/katsyoshi/.local/share/zinit/plugins/hs/bin:/home/katsyoshi/.local/share/zinit/plugins/fd/bin:/home/katsyoshi/.rbenv/shims:/home/katsyoshi/.rbenv/bin:/home/katsyoshi/.pyenv/plugins/pyenv-virtualenv/shims:/home/katsyoshi/.pyenv/shims:/home/katsyoshi/.pyenv/bin:/home/katsyoshi/.local/share/zinit/polaris/bin:bin:/home/katsyoshi/.go/bin:/home/katsyoshi/bin:/home/katsyoshi/.bin:/usr/lib/llvm/17/bin:/usr/lib/llvm/18/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin)
which: no brew in (/home/katsyoshi/.rbenv/versions/3.3.1/bin:/home/katsyoshi/.rbenv/libexec:/home/katsyoshi/.rbenv/plugins/ruby-build/bin:/home/katsyoshi/.local/share/zinit/plugins/rust/bin:/home/katsyoshi/.local/share/zinit/plugins/sk/bin:/home/katsyoshi/.local/share/zinit/plugins/hs/bin:/home/katsyoshi/.local/share/zinit/plugins/fd/bin:/home/katsyoshi/.rbenv/shims:/home/katsyoshi/.rbenv/bin:/home/katsyoshi/.pyenv/plugins/pyenv-virtualenv/shims:/home/katsyoshi/.pyenv/shims:/home/katsyoshi/.pyenv/bin:/home/katsyoshi/.local/share/zinit/polaris/bin:bin:/home/katsyoshi/.go/bin:/home/katsyoshi/bin:/home/katsyoshi/.bin:/usr/lib/llvm/17/bin:/usr/lib/llvm/18/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin)
/home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/lib/kompo.rb:112:in `valid?': Entrypoint not found: '/home/katsyoshi/hello/main.rb'. Please specify the entry file path with '-e' or '--entrypoint' option. (RuntimeError)
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/lib/kompo.rb:120:in `block in cd_work_dir'
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/3.3.0/tmpdir.rb:99:in `mktmpdir'
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/lib/kompo.rb:118:in `cd_work_dir'
        from /home/katsyoshi/.rbenv/versions/3.3.1/lib/ruby/gems/3.3.0/gems/kompo-0.2.0/exe/kompo:8:in `&lt;top (required)&gt;'
        from /home/katsyoshi/.rbenv/versions/3.3.1/bin/kompo:25:in `load'
        from /home/katsyoshi/.rbenv/versions/3.3.1/bin/kompo:25:in `&lt;main&gt;'
</code></pre></div></div>

<p>まだ駄目みたですね。エラーメッセージを見ると <code class="language-plaintext highlighter-rouge">-e</code> でエントリーポイントを指定しろとあるな。
ということで <code class="language-plaintext highlighter-rouge">kompo -e hello.rb</code> と入力してみますね。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ kompo -e hello.rb
...snip...
gcc -O3 -Wall -I/tmp/d20240530-1369030-t2mico/dest_dir/include/ruby-3.3.0/x86_64-linux -I/tmp/d20240530-1369030-t2mico/dest_dir/include/ruby-3.3.0 -L/tmp/d20240530-1369030-t2mico/dest_dir/lib -L/home/katsyoshi/Program/Ruby/kompo/kompo-vfs/target/release  main.c -Wl,--start-group  fs.o /tmp/d20240530-1369030-t2mico/ruby/ext/extinit.o /tmp/d20240530-1369030-t2mico/ruby/enc/encinit.o /tmp/d20240530-1369030-t2mico/ruby/ext/bigdecimal/bigdecimal.a /tmp/d20240530-1369030-t2mico/ruby/ext/cgi/escape/escape.a /tmp/d20240530-1369030-t2mico/ruby/ext/continuation/continuation.a /tmp/d20240530-1369030-t2mico/ruby/ext/coverage/coverage.a /tmp/d20240530-1369030-t2mico/ruby/ext/date/date_core.a /tmp/d20240530-1369030-t2mico/ruby/ext/digest/bubblebabble/bubblebabble.a /tmp/d20240530-1369030-t2mico/ruby/ext/digest/digest.a /tmp/d20240530-1369030-t2mico/ruby/ext/digest/md5/md5.a /tmp/d20240530-1369030-t2mico/ruby/ext/digest/rmd160/rmd160.a /tmp/d20240530-1369030-t2mico/ruby/ext/digest/sha1/sha1.a /tmp/d20240530-1369030-t2mico/ruby/ext/digest/sha2/sha2.a /tmp/d20240530-1369030-t2mico/ruby/ext/erb/escape/escape.a /tmp/d20240530-1369030-t2mico/ruby/ext/etc/etc.a /tmp/d20240530-1369030-t2mico/ruby/ext/fcntl/fcntl.a /tmp/d20240530-1369030-t2mico/ruby/ext/fiddle/fiddle.a /tmp/d20240530-1369030-t2mico/ruby/ext/io/console/console.a /tmp/d20240530-1369030-t2mico/ruby/ext/io/nonblock/nonblock.a /tmp/d20240530-1369030-t2mico/ruby/ext/io/wait/wait.a /tmp/d20240530-1369030-t2mico/ruby/ext/json/generator/generator.a /tmp/d20240530-1369030-t2mico/ruby/ext/json/parser/parser.a /tmp/d20240530-1369030-t2mico/ruby/ext/monitor/monitor.a /tmp/d20240530-1369030-t2mico/ruby/ext/nkf/nkf.a /tmp/d20240530-1369030-t2mico/ruby/ext/objspace/objspace.a /tmp/d20240530-1369030-t2mico/ruby/ext/openssl/openssl.a /tmp/d20240530-1369030-t2mico/ruby/ext/pathname/pathname.a /tmp/d20240530-1369030-t2mico/ruby/ext/psych/psych.a /tmp/d20240530-1369030-t2mico/ruby/ext/pty/pty.a /tmp/d20240530-1369030-t2mico/ruby/ext/rbconfig/sizeof/sizeof.a /tmp/d20240530-1369030-t2mico/ruby/ext/ripper/ripper.a /tmp/d20240530-1369030-t2mico/ruby/ext/socket/socket.a /tmp/d20240530-1369030-t2mico/ruby/ext/stringio/stringio.a /tmp/d20240530-1369030-t2mico/ruby/ext/strscan/strscan.a /tmp/d20240530-1369030-t2mico/ruby/ext/syslog/syslog.a /tmp/d20240530-1369030-t2mico/ruby/ext/zlib/zlib.a /tmp/d20240530-1369030-t2mico/ruby/enc/libenc.a /tmp/d20240530-1369030-t2mico/ruby/enc/libtrans.a -lkompo -lruby-static -Wl,-Bstatic -lz -lrt -lgmp -lcrypt -lffi -lssl -lcrypto -lyaml -Wl,-Bdynamic -ldl -lm -lpthread -Wl,--end-group -o hello
/usr/lib/gcc/x86_64-pc-linux-gnu/13/../../../../x86_64-pc-linux-gnu/bin/ld: -lgmp が見つかりません: そのようなファイルやディレクトリはありません
/usr/lib/gcc/x86_64-pc-linux-gnu/13/../../../../x86_64-pc-linux-gnu/bin/ld: -lffi が見つかりません: そのようなファイルやディレクトリはありません
/usr/lib/gcc/x86_64-pc-linux-gnu/13/../../../../x86_64-pc-linux-gnu/bin/ld: -lssl が見つかりません: そのようなファイルやディレクトリはありません
/usr/lib/gcc/x86_64-pc-linux-gnu/13/../../../../x86_64-pc-linux-gnu/bin/ld: -lcrypto が見つかりません: そのようなファイルやディレクトリはありません
/usr/lib/gcc/x86_64-pc-linux-gnu/13/../../../../x86_64-pc-linux-gnu/bin/ld: -lyaml が見つかりません: そのようなファイルやディレクトリはありません
collect2: エラー: ld はステータス 1 で終了しました
...snip...
</code></pre></div></div>

<p>いったとおもったら、今度はライブラリ(<strong>libgmp</strong>、<strong>libffi</strong>、<strong>openssl</strong>、<strong>libcrypt</strong>、<strong>libyaml</strong>)のリンクができないようですね。
必要なライブラリはインストールされているのか見てみましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ eix -ICU 'dev-libs' -s 'gmp|libcrybp|libffi|libyaml|openssl'
[I] dev-libs/gmp
     Available versions:  6.3.0-r1(0/10.4)^d {+asm +cpudetection +cxx doc pic static-libs ABI_MIPS="n32 n64 o32" ABI_S390="32 64" ABI_X86="32 64 x32"}
     Installed versions:  6.3.0-r1(0/10.4)(02時44分45秒 2024年05月30日)(asm cpudetection cxx -doc -pic -static-libs ABI_MIPS="-n32 -n64 -o32" ABI_S390="-32 -64" ABI_X86="64 -32 -x32")
     Homepage:            https://gmplib.org/
     Description:         Library for arbitrary-precision arithmetic on different type of numbers

[I] dev-libs/libffi
     Available versions:  3.4.4-r4(0/8)^t ~3.4.6(0/8)^t {debug exec-static-trampoline pax-kernel static-libs test ABI_MIPS="n32 n64 o32" ABI_S390="32 64" ABI_X86="32 64 x32"}
     Installed versions:  3.4.4-r4(0/8)^t(02時43分18秒 2024年05月30日)(-debug -exec-static-trampoline -pax-kernel -static-libs -test ABI_MIPS="-n32 -n64 -o32" ABI_S390="-32 -64" ABI_X86="64 -32 -x32")
     Homepage:            https://sourceware.org/libffi/
     Description:         Portable, high level programming interface to various calling conventions

[I] dev-libs/libyaml
     Available versions:  0.2.2^t 0.2.5^t {doc static-libs test}
     Installed versions:  0.2.5^t(02時44分57秒 2024年05月30日)(-doc -static-libs -test)
     Homepage:            https://github.com/yaml/libyaml
     Description:         YAML 1.1 parser and emitter written in C

[I] dev-libs/openssl
     Available versions:  [M]1.0.2u-r1^td [M]1.1.1w(0/1.1)^t 3.0.11(0/3)^t 3.0.12(0/3)^t 3.0.13(0/3)^t ~3.0.13-r1(0/3)^t 3.0.13-r2(0/3)^t ~3.1.5-r1(0/3)^t ~3.1.5-r2(0/3)^t ~3.2.1-r1(0/3)^t ~3.2.1-r2(0/3)^t **3.3.0(0/3)^t {+asm bindist fips gmp kerberos ktls rfc3779 sctp sslv2 (+)sslv3 static-libs test tls-compression (+)tls-heartbeat vanilla verify-sig weak-ssl-ciphers ABI_MIPS="n32 n64 o32" ABI_S390="32 64" ABI_X86="32 64 x32" CPU_FLAGS_X86="sse2"}
     Installed versions:  3.0.13-r2(0/3)^t(02時43分56秒 2024年05月30日)(asm -fips -ktls -rfc3779 -sctp -static-libs -test -tls-compression -vanilla -verify-sig -weak-ssl-ciphers ABI_MIPS="-n32 -n64 -o32" ABI_S390="-32 -64" ABI_X86="64 -32 -x32" CPU_FLAGS_X86="sse2")
     Homepage:            https://www.openssl.org/
     Description:         Robust, full-featured Open Source Toolkit for the Transport Layer Security (TLS)
</code></pre></div></div>

<p>入ってますねこれ…もういちどよくコンパイルしてエラーとなった行をよくみてみましょう。
どのファイルも <code class="language-plaintext highlighter-rouge">.a</code> でおわってますね。
ということはこれらのファイルに静的コンパイルされたファイルがなさそうですね。
<strong>Gentoo Linux</strong> のパッケージマネージャー <strong>portage</strong> では
<code class="language-plaintext highlighter-rouge">static-libs</code> というオプションをつけてあげることにより静的コンパイルされます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ doas emerge -uDN world
$ kompo -e hello.rb
...snip...
$ ./hello
`RubyGems' were not loaded.
`error_highlight' was not loaded.
`did_you_mean' was not loaded.
`syntax_suggest' was not loaded.
hello, world
</code></pre></div></div>

<p>yatta!!ugoita!!!</p>

<h2 id="まとめ">まとめ</h2>

<p><strong>kompo</strong> を動かしてみました。
コンパイルに時間がかかりますが、これで <strong>Ruby</strong> のプログラムを簡単に配ることができそうですね。</p>]]></content><author><name></name></author><category term="diary" /><category term="tech" /><summary type="html"><![CDATA[RubyKaigi2024 の発表、It’s about time to pack Ruby and Ruby scripts in one binary で話されていた kompo を試してみた。]]></summary></entry><entry><title type="html">最果ての沖縄に行ってきた</title><link href="https://blog.katsyoshi.org/blog/2024/05/18/trip-saihate-okinawa/" rel="alternate" type="text/html" title="最果ての沖縄に行ってきた" /><published>2024-05-18T23:59:59+09:00</published><updated>2024-05-18T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/18/trip-saihate-okinawa</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/18/trip-saihate-okinawa/"><![CDATA[<p><a href="https://rubykaigi.org/2024"><strong>RubyKaigi2024</strong></a> の翌日 2024-05-18 から五日間 2024-05-22 まで
<a href="http://www.vill.kunigami.okinawa.jp/">沖縄県国頭郡国頭村</a>辺戸に滞在したはなし。</p>

<h2 id="1-日目">1 日目</h2>

<p><strong>RubyKaigi</strong> が終ったので東京から来る友人と合流するために<a href="https://www.naha-airport.co.jp/"><strong>那覇空港</strong></a>へ。
友人たちと合流し昼食を食べたので、レンタカーを借りていざ宿へ出発。
<img src="/images/go2hedo.webp" alt="" />
この時点で16:00ごろ。空港から宿のある辺戸まで <strong>100 km</strong> を越える。
しかも宿周辺には共同売店とよばれる簡易スーパーしかない。
ということは事前に分っていたので、名護周辺で当面の食料調達することに。
まず、高速道路を利用して名護へ。
名護では<a href="https://www.orionbeer.co.jp/"><strong>オリオンビール</strong></a>工場入口という看板をみつけたのでそこに寄ってみることにした。
そこは酒屋だった。とくになにもなく、オリオンビール500ml*6を買ってでた。
スーパーを見つけたので大量に食品を購入。この日は酒を飲んで話して就寝。
<img src="/images/photo/hedo-base-camp.webp" alt="" /></p>

<h2 id="2-日目">2 日目</h2>

<p>この日は、朝7時ごろに集落向けの放送があり目をさましたが、二度寝。
10時ごろみんな起きて宿の近くの<a href="http://kunigami-kikakukanko.com/itiran/07.html"><strong>ヤンバルクイナ展望台</strong></a>へ。
<img src="/images/photo/hedo-yanbaru-kuina-view-point.webp" alt="" />
ここまでの移動が意外と起伏が激しく、披露困憊。ここからの眺めはたいへんよかった。
<img src="/images/photo/hedo-yanbaru-kuina-view-hedo-misaki.webp" alt="" />
ここから海岸線まで降りれそうだったが、上で書いたように疲れていたので一旦宿にもどることに。
<img src="/images/photo/hedo-yanbaru-kuina-view-point-return.webp" alt="" />
宿への帰り道。勾配がキツい。午後は昼飯と観光を兼ねて、<a href="http://kunigami-kikakukanko.com/itiran/06.html"><strong>辺戸岬</strong></a>までいくことに。
<img src="/images/photo/hedo-misaki-view-yoron-bird.webp" alt="" />
辺戸岬は観光地らしく、他の <strong>Rubyist</strong> たちもどうやら来てたみたい。
ここで岬の先のほうにいったりして見たあと、昼食。
<img src="/images/photo/hedo-misaki-messi.webp" alt="" />
昼食後、夕飯の調達のために名護のスーパーへGO。
昼食中に温泉というかでかい風呂が山の中あったのでそこへ行くを計画。
スーパーで買ったものを宿において、ちょっとだけ休憩してその山の中の風呂へ。
山の中の風呂へ行く途中いい海岸にかんじの砂浜(<a href="https://okinawa-bookmark.com/beach/kunigami-beach/sosu-sunahama/"><strong>楚洲の浜</strong></a>)あったのでみんなで砂浜へ。
<img src="/images/photo/hedo-yanbaru-sosu-no-hama-iwa.webp" alt="" /></p>

<p><img src="/images/photo/hedo-yanbaru-sosu-no-hama-wave.webp" alt="" /></p>

<p><img src="/images/photo/hedo-yanbaru-sosu-no-hama-sango.webp" alt="" /></p>

<p><img src="/images/photo/hedo-yanbaru-sosu-no-hama-river.webp" alt="" /></p>

<p><img src="/images/photo/hedo-yanbaru-sosu-no-hama-yadokari.webp" alt="" /></p>

<p><img src="/images/photo/hedo-yanbaru-sosu-no-hama-ashiato.webp" alt="" /></p>

<p>砂浜を楽しんだので、目的のお風呂、<strong>命薬の湯</strong>がある<a href="https://yanbaru-manabi.com/"><strong>やんばる学びの森</strong></a>へ。
道中、道の左右が草で埋まっていてこの先本当にあるのか？という気分になった。
<img src="/images/photo/hedo-yanbaru-manabi-no-mori-kanban.webp" alt="" />
到着。風呂入っているあいだに以下のメッセージが。
<img src="/images/screenshot/yancya-comes-manabi-no-mori.webp" alt="" /></p>

<p>そんなわけで18:40ごろ合流。やんちゃさんが電池がないらしかっため少々談笑しながら充電。
やんちゃさんはこのあと名護で用事があったらしいのでここでお別れ。
<img src="/images/photo/hedo-yanbaru-manabi-no-mori-yancya.webp" alt="" /></p>

<h2 id="3-日目">3 日目</h2>
<p>この日は朝からといっても9時ごろから一人で釣りへ。
釣り場へ行くには海岸線を通るのですが、足元を靴ではなくビーサンで行ったためこの道は正規なのかとおもってた。
釣り場着いて先に釣りしているひとに聞いたら、どうやら正規ルートだったらしく、ひとまず安心。
車は一台しかないため昼ごろ宿へもどる。もどったら、仕事中の人がいてそういえば今日は平日だったということを思い出す。
昼は宿で冷凍食品をレンチン。レンジを動かしてたら、なんと無線LANが繋らなくってしまった。
ワーケーションしている友人はオンライン会議中だったが、繋らないと訴えてたためレンジを停止。
東京の自宅居る間で気にしたこと、気になったことなかったけどよくかんがえてみたら
レンジ使ってるときにはインターネットしないことが多いのから気にならなかっただけかも。</p>

<p>この日東京へ戻る人が居たので<strong>那覇空港</strong>へ送りにドライブ。
19:30 ごろ見届けたので帰りにどこか寄って食べたりしようとなった。
が、そもそも宿に帰るのに2時間かかるのでそういうのはやめようと訴えた。
帰る途中で肉の自販機で山羊刺しを購入。
そろそろガソリンが切れそうだったので給油することに。
給油する際に <a href="https://www.awok.co.jp/"><strong>A&amp;W</strong></a> が併設されてたので給油&amp;&amp;軽食。
宿に帰りついて、先程購入した山羊刺しを食べて就寝。
<img src="/images/photo/hedo-base-camp-freezed-goat.webp" alt="" /></p>

<h2 id="4-日目">4 日目</h2>

<p>この日も午後に東京へ帰るひとがいたので那覇へドライブ。
この日から沖縄は<a href="https://weathernews.jp/s/topics/202405/170105/">梅雨入り</a>。
送る途中で雨が振りはじめた。
<img src="/images/photo/hedo-round-main-island-rain.webp" alt="" />
このときまだ梅雨入りしていることはしらなかったのでまあ夕立だろとおもっていた。
昼前だったので、沖縄のソウルフード <a href="https://jefokinawa.co.jp/"><strong>JEF</strong></a> に行きゴーヤーバーガーを喫食。
空港着いて友人を見送りしたら再び雨が強くなったので沖縄の友人に <strong>twitter</strong> で聞いてみた。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">これデフォルトですね。関東は違うんですか？</p>&mdash; はなちん (@hanachin_) <a href="https://twitter.com/hanachin_/status/1792788936089387237?ref_src=twsrc%5Etfw">May 21, 2024</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ということでした。
空港へ送ったあと、午後暇なのでとりあえず<a href="https://www.himeyuri.or.jp/"><strong>ひめゆりの塔</strong></a>へ。
駐車場へもどるとき、押しボタン式の信号機だったのに気付かなかった。
そうしてたら、目の前の売店の店員さんが飛び出てきて強い客引きが。
これを躱して車へもどり本島一周の旅へ。
途中車で行ける島、<a href="https://www.okinawastory.jp/spot/1276"><strong>奥武島</strong></a>、<a href="https://www.okinawastory.jp/spot/1287"><strong>宮城島</strong></a>と
<a href="https://www.okinawastory.jp/spot/1269"><strong>浜比嘉島</strong></a>へドライブ。
雨が大変強く、川から流れ込む水で海が二色に。
<img src="/images/photo/hedo-round-main-island-binary.webp" alt="" />
そのまま沖縄本島の東側を走って宿へもどる。
宿もどってからはオンラインで飲み会後就寝。</p>

<h2 id="last-day">LAST DAY</h2>
<p>最終日この日に東京へもどるのだが、この日も雨が強く、どしゃ降りだったので宿を早めにチェックアウト。
途中 <a href="https://tabelog.com/okinawa/A4703/A470302/47011602/"><strong>KING TACOS</strong></a> があったので寄ることに。
この店は<strong>タコライス</strong>発祥の店らしく、いきたかったのです。
<img src="/images/photo/hedo-king-machi-king-tacos.webp" alt="" />
見た目どおり大きく、これは失敗したなと感じましたね。チーズの味が強く大変好みの味でした。
本店の金武店から空港は遠いのでここで空港に向った。
この旅はここで終わり。東京もどってビール飲んで寝た。</p>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[RubyKaigi2024 の翌日 2024-05-18 から五日間 2024-05-22 まで 沖縄県国頭郡国頭村辺戸に滞在したはなし。]]></summary></entry><entry><title type="html">RubyKaigi2024 @沖縄</title><link href="https://blog.katsyoshi.org/blog/2024/05/14/rubykaigi-2024/" rel="alternate" type="text/html" title="RubyKaigi2024 @沖縄" /><published>2024-05-14T23:59:59+09:00</published><updated>2024-05-14T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/14/rubykaigi-2024</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/14/rubykaigi-2024/"><![CDATA[<p>沖縄だったのでいってきました。</p>

<h2 id="day-0">Day 0</h2>

<p>開始日の前日、この日に沖縄に入りました。この日は15:30発の飛行機にしました。
これはこの日の夜のイベントに参加するための時間にしたつもりでした。
つもりとは、今回 <a href="https://rubykaigi.org/2024"><strong>RubyKaigi</strong></a> ではプレチェックインが19:00まで行なわれているのをメールでもらい、
急遽 <a href="https://www.nahart.jp/"><strong>RubyKaigi</strong> 会場</a>へ寄ることにしました。
プレチェックインでは、沖縄気分な格好をして行ったのですが、それ以上に沖縄楽しみにしてる格好のひとが居てびっくり。
チェックインを済ませて宿へ行き荷物を置いて<a href="https://esminc.doorkeeper.jp/events/171826">船上パーティ</a>へ。
この帰りに二次会へ<a href="https://churayagi.com/sakedokoro-yocchan/">山羊刺しがある居酒屋</a>へ行きました。</p>

<h2 id="day-1">Day 1</h2>

<p>みたセッションは以下になります</p>

<ol>
  <li><a href="https://drive.google.com/file/d/1Dkx15u_5UAGoFqJHCeAuj2FXS-z_U7EE/view">Writing Weird Code</a></li>
  <li><a href="https://speakerdeck.com/yui_knk/the-grand-strategy-of-ruby-parser">The grand strategy of Ruby Parser</a></li>
  <li><a href="">Strings! Interpolation, Optimisation &amp; Bugs</a></li>
  <li><a href="https://speakerdeck.com/tagomoris/namespace-what-and-why">Namespace, What and Why</a></li>
  <li><a href="https://www.atdot.net/~ko1/activities/2024_rubykaigi.pdf">Ractor Enhancements, 2024</a></li>
</ol>

<h3 id="writing-weird-code"><a href="https://drive.google.com/file/d/1Dkx15u_5UAGoFqJHCeAuj2FXS-z_U7EE/view">Writing Weird Code</a></h3>

<p>本年は三日間平日だからか Matz のキーノート開始ではなく、<a href="https://github.com/tompng">ぺんさん</a> ではじまりでした。うんまあ、ひとつひとつの話はわかるんだけど、どうしてそうなるのかわからないことをたくさん話されました。</p>

<h3 id="the-grand-strategy-of-ruby-parser"><a href="https://speakerdeck.com/yui_knk/the-grand-strategy-of-ruby-parser">The grand strategy of Ruby Parser</a></h3>

<p>ことしは(も？)パーサー元年な発表だった。<strong>パーサーギャング</strong> の親分こと <a href="https://github.com/yui-knk">金子さん</a> の発表で、去年の発表のあとどのように開発をし、これからどのような機能を開発していくのか、今回でどんな形になったのかを話してくれました。</p>

<h3 id="strings-interpolation-optimisation--bugs"><a href="">Strings! Interpolation, Optimisation &amp; Bugs</a></h3>

<h3 id="namespace-what-and-why"><a href="https://speakerdeck.com/tagomoris/namespace-what-and-why">Namespace, What and Why</a></h3>

<p><a href="https://github.com/tagomoris">@tagomoris</a>さんの全 <strong>rubyist</strong><sup id="fnref:rubyist"><a href="#fn:rubyist" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> 待望の機能である <strong>Namespace</strong> の思想、実装の話です。
似た機能として <a href="https://docs.ruby-lang.org/ja/latest/method/Module/i/refine.html"><strong>Refinments</strong></a> があるのですが
機能として分かれているのも便利そう。
<strong>Namespace</strong> で区切ることでライブラリがより便利に、より安全に利用できそうでした。</p>

<h3 id="ractor-enhancements-2024"><a href="https://www.atdot.net/~ko1/activities/2024_rubykaigi.pdf">Ractor Enhancements, 2024</a></h3>

<p><strong>Ractor</strong> のお話。</p>

<h3 id="オフィシャルパーティー"><a href="https://ti.to/rubykaigi/2024-party">オフィシャルパーティー</a></h3>

<p>オフィシャルパーティーは<a href="https://www.naminouebeach.jp/">波の上うみそら公園</a>のビーチでBBQ(BBQエリア)とパリピだった。</p>

<h2 id="day-2">Day 2</h2>

<ol>
  <li><a href="">Leveraging Falcon and Rails for Real-Time Interactivity</a></li>
  <li><a href="">Does Ruby Parser dream of highly expressive grammar?</a></li>
  <li><a href="https://speakerdeck.com/soutaro/embedding-it-into-ruby-code">Embedding it into Ruby code</a></li>
  <li><a href="https://code.jeremyevans.net/presentations/rubykaigi2024/index.html#1">Reducing Implicit Allocations During Method Calling</a></li>
  <li><a href="https://speakerdeck.com/ahogappa0613/its-about-time-to-pack-ruby-and-ruby-scripts-in-one-binary">It’s about time to pack Ruby and Ruby scripts in one binary</a></li>
  <li><a href="https://drive.google.com/file/d/1-YZR91umkQIngFIq5VDGrz_XcLoq3Ny3/view">Running Optcarrot (faster) on my own Ruby.</a></li>
  <li>Lightning Talks</li>
</ol>

<h3 id="leveraging-falcon-and-rails-for-real-time-interactivity"><a href="">Leveraging Falcon and Rails for Real-Time Interactivity</a></h3>

<p><a href="https://github.com/ioquatix">サミュエル</a> の <strong>Async</strong> を使うことによって速くするにはの話。</p>

<h3 id="does-ruby-parser-dream-of-highly-expressive-grammar"><a href="https://speakerdeck.com/ydah/does-ruby-parser-dream-of-highly-expressive-grammar">Does Ruby Parser dream of highly expressive grammar?</a></h3>

<p><a href="https://github.com/ydah/">@ydah_</a> さんの発表。もともと見る予定ではなかったが、前日の発表を見てしまったので興味が出てきたので聴くことに。</p>

<h3 id="embedding-it-into-ruby-code"><a href="https://speakerdeck.com/soutaro/embedding-it-into-ruby-code">Embedding it into Ruby code</a></h3>

<p>みようと思ってたが、ランチ出るまでに時間が掛かりすぎてすこししか見れていない。</p>

<h3 id="reducing-implicit-allocations-during-method-calling"><a href="https://code.jeremyevans.net/presentations/rubykaigi2024/index.html#1">Reducing Implicit Allocations During Method Calling</a></h3>

<p><a href="https://www.lambdanote.com/products/polished-ruby"><strong>研鑽 Ruby プログラミング</strong></a> の著者<a href="https://github.com/jeremyevans">ジェレミー</a>の発表。</p>

<h3 id="its-about-time-to-pack-ruby-and-ruby-scripts-in-one-binary"><a href="https://speakerdeck.com/ahogappa0613/its-about-time-to-pack-ruby-and-ruby-scripts-in-one-binary">It’s about time to pack Ruby and Ruby scripts in one binary</a></h3>

<p><a href="https://github.com/ahogappa0613">@ahogappa0613</a> さんの発表で <strong>Ruby</strong> のプログラムを配るために <strong>One Binary</strong> にプログラムを梱包していくという発表でした。
<strong>One Binary</strong> を作る方法として、現在ある <strong>Ruby</strong> プログラムを静的リンクしてコンパイルして配る方法を採用していました。
この方法は <strong>Ruby</strong> 自体を書き替えるのが十分少なく行えそうなので期待できそうです。</p>

<h3 id="running-optcarrot-faster-on-my-own-ruby"><a href="https://drive.google.com/file/d/1-YZR91umkQIngFIq5VDGrz_XcLoq3Ny3/view">Running Optcarrot (faster) on my own Ruby.</a></h3>

<p>今年個人的 <strong>No.1</strong>。<a href="https://github.com/sisshiki1969">@isshiki1969</a> さんの発表で、 <strong>Ruby</strong> の <a href="https://www.rust-lang.org"><strong>Rust</strong></a> での実装だと聞いていたので楽しみにしていました。
聞いているとどうも <strong>Rust</strong> だけで作ってるわけじゃないぞとなっており、一部 <strong>Assembler</strong> でも作成されているようです。
必要な機能は実装されているようでしたが、まだ <a href="https://rubyonrails.org/"><strong>Ruby on Rails</strong></a> 動いていないようです。
とても速いので面白そうでした。</p>

<h3 id="lightning-talks">Lightning Talks</h3>

<p>前の発表が楽しすぎて少し遅れてはいりました。</p>

<h3 id="夕飯とカラオケ">夕飯とカラオケ</h3>

<p>この日の夕飯は会場近くで色々なディナー、パーティーが企画されてたのですが、どうしても行きたいディープな沖縄へ行きたかったのでそちらへ。
栄町市場の<a href="https://tabelog.com/okinawa/A4701/A470101/47001653/">べんり屋 玉玲瓏</a>へ行き、餃子を食べてきました。
帰りに <a href="https://rubykaigikaraoke.doorkeeper.jp/"><strong>RubyKaigiKaraoke</strong></a> が丁度いい時間だったので2曲ほど歌ってました。
だいたい22時ころに翌日発表する人主催のボドゲ会がはじまり、1時ごろ退出しました。</p>

<h2 id="day-3">Day 3</h2>
<p>聞いたセッションは以下です。前日の <strong>RubyKaigiKaraoke</strong> ではしゃいで疲れてるので記憶が曖昧です。</p>

<ol>
  <li>Ruby Committers and the World</li>
  <li><a href="https://speakerdeck.com/k0kubun/rubykaigi-2024">YJIT Makes Rails 1.7x Faster</a></li>
  <li><a href="">Speeding up Instance Variables with Red-Black Trees</a></li>
  <li><a href="https://speakerdeck.com/junk0612/from-lalr-to-ielr-a-lramas-next-step">From LALR to IELR: A Lrama’s Next Step</a></li>
  <li><a href="https://makenowjust.github.io/kantan-regex-book/">Make Your Own Regex Engine!</a></li>
  <li><a href="">Matz Keynote</a></li>
</ol>

<h3 id="ruby-committers-and-the-world">Ruby Committers and the World</h3>

<p>いつもどおりの感じが戻ってきた感じのセッションでした。ここで <strong>GVL</strong><sup id="fnref:gvl"><a href="#fn:gvl" class="footnote" rel="footnote" role="doc-noteref">2</a></sup> が出てとくに盛り上がってましたね。個人的に <strong>GVL</strong> を外してもはやくならないと思っていますが、無い状態での実行したときどのような挙動をするのか、はやくするにはどうするのか興味があります。この議論で <strong>Linux</strong> のメンテナーをやってる<a href="https://www.fujitsu.com/jp/about/global-fde/motohiro-kosaki/">小崎さん</a>が賛成してくれてたのでとても心強いなと。</p>

<h3 id="yjit-makes-rails-17x-faster"><a href="https://speakerdeck.com/k0kubun/rubykaigi-2024">YJIT Makes Rails 1.7x Faster</a></h3>

<p><a href="https://github.com/k0kubun">国分</a> さんの <a href="https://docs.ruby-lang.org/en/master/yjit/yjit_md.html"><strong>YJIT</strong></a> で <strong>Rails</strong> を動かすと速くなったという話。
タイトルに偽りがあり、曰く発表当日には1.8倍高速化されたそうです。</p>

<h3 id="speeding-up-instance-variables-with-red-black-trees"><a href="">Speeding up Instance Variables with Red-Black Trees</a></h3>

<p><a href="https://github.com/tenderlove">アーロン</a> の発表。<strong>インスタンス変数</strong> のデータ保持方法を<a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree"><strong>赤黒木</strong></a>で行う話でした。
<strong>赤黒木</strong>の説明を行い、どう実装していくかを日本語でやってくれました。</p>

<h3 id="from-lalr-to-ielr-a-lramas-next-step"><a href="https://speakerdeck.com/junk0612/from-lalr-to-ielr-a-lramas-next-step">From LALR to IELR: A Lrama’s Next Step</a></h3>

<p><a href="https://github.com/junk0612">コバジュン</a> の発表。
現在、<a href="https://github.com/ruby/lrama"><strong>Lrama</strong></a> を <a href="https://en.wikipedia.org/wiki/LALR_parser"><strong>LALR パーサー</strong></a>から
<a href="https://en.wikipedia.org/wiki/Scannerless_parsing"><strong>Scannerless パーサー</strong></a> を動かすために <strong>IELR パーサー</strong> に変更している話でした。</p>

<h3 id="make-your-own-regex-engine"><a href="https://makenowjust.github.io/kantan-regex-book/">Make Your Own Regex Engine!</a></h3>

<p><a href="https://github.com/makenowjust">藤波</a> さんの発表で、<strong>正規表現エンジン</strong> を <strong>Ruby</strong> で作る話。
意外と小さくできるようでおもしろそうな感じでした。</p>

<h3 id="matz-keynote"><a href="">Matz Keynote</a></h3>

<p>今年は <strong>Ruby4</strong> の話が出てきました。 <strong>Namespace</strong> が実装されて動けば <strong>Ruby4</strong> になるそうです。ガンバレモリスさん。
あと明確に <a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation"><strong>AOT コンパイラー</strong></a> が欲しいと言っていました。</p>

<h2 id="owari">owari</h2>

<p>今年も楽しいセッションが盛り沢山で休む暇がなく、全部たのしかったのですが、英語力と体力が足りないのを痛感しております。
セッション間の立ち話も興味深いのも多く、休みとはと思いながら過しておりました。</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:rubyist">
      <p><a href="https://www.ruby-lang.org/">プログラミング言語 <strong>Ruby</strong></a> が好きな人たちのこと。 <a href="#fnref:rubyist" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:gvl">
      <p>Giant Virtualmachine Lock の略。これがあるから遅いと主張している人たちがいる。 <a href="#fnref:gvl" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><category term="rubykaigi" /><category term="tech" /><summary type="html"><![CDATA[沖縄だったのでいってきました。]]></summary></entry><entry><title type="html">Sway 用 Window 切り替えを作った</title><link href="https://blog.katsyoshi.org/blog/2024/05/11/sway-window-switcher-using-wofi/" rel="alternate" type="text/html" title="Sway 用 Window 切り替えを作った" /><published>2024-05-11T23:59:59+09:00</published><updated>2024-05-11T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2024/05/11/sway-window-switcher-using-wofi</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2024/05/11/sway-window-switcher-using-wofi/"><![CDATA[<p>あたらしく PC 買って、 <strong>Linux</strong> の GUI 環境を <strong>X11</strong> から <strong>Wayland</strong> に乗り変えることにしました。
いままで利用していたデスクトップ環境を <a href="https://i3wm.org/"><strong>i3</strong></a> から <a href="https://swaywm.org/"><strong>sway</strong></a>
に変更しました。
最近利用していた <strong>macOS</strong> や <strong>i3</strong> ではあまり気にしていなかったのですが、<strong>Windows</strong> の <code class="language-plaintext highlighter-rouge">Alt+Tab</code> での
ウインドウ切り替えが便利だったのを思い出したのでこの便利な機能を模倣することにしました。</p>

<p>でも本当にほしいのは <code class="language-plaintext highlighter-rouge">Alt+Tab</code> の順番に切り変わるやつではなく、アクセスしたいウィンドウへの切り変えなのです。
そこでこの機能を <strong>ruby</strong> で実装することにしました。</p>

<h2 id="準備">準備</h2>

<p>準備として以下のソフトウェアがインストールされていることを期待しています。</p>

<ul>
  <li>window manager: <strong>i3</strong>/<strong>sway</strong></li>
  <li>launcher/menu program: <a href="https://hg.sr.ht/~scoopta/wofi"><strong>wofi</strong></a></li>
</ul>

<h2 id="作成">作成</h2>

<p>なにかしら実装あるだろうということで参考を探していたら<a href="https://gist.github.com/muniter/1c187e7c973accba463fb05c1402621f">見付けた</a>のでその実装を参考にします。
プログラムは以下になります。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require</span> <span class="s1">'bundler/inline'</span>

<span class="n">gemfile</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s2">"https://rubygems.org"</span>
  <span class="n">gem</span> <span class="s2">"i3ipc"</span>
<span class="k">end</span>

<span class="nb">require</span> <span class="s2">"i3ipc"</span>
<span class="nb">require</span> <span class="s2">"open3"</span>

<span class="k">class</span> <span class="nc">SwayWindowSwithcer</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">switch</span> <span class="o">=</span> <span class="n">new</span><span class="p">.</span><span class="nf">switch</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@conn</span> <span class="o">=</span> <span class="no">I3Ipc</span><span class="o">::</span><span class="no">Connection</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@workspaces</span> <span class="o">=</span> <span class="vi">@conn</span><span class="p">.</span><span class="nf">workspaces</span>
    <span class="vi">@windows</span> <span class="o">=</span> <span class="no">Set</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">set_windows</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">switch</span> <span class="o">=</span> <span class="vi">@conn</span><span class="p">.</span><span class="nf">command</span><span class="p">(</span><span class="s2">"[con_id=</span><span class="si">#{</span><span class="vi">@windows</span><span class="p">.</span><span class="nf">to_a</span><span class="p">[</span><span class="nb">open</span><span class="p">].</span><span class="nf">to_h</span><span class="p">[</span><span class="ss">:id</span><span class="p">]</span><span class="si">}</span><span class="s2">] focus"</span><span class="p">)</span>

  <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">list_window</span> <span class="o">=</span> <span class="vi">@windows</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">displays</span> <span class="o">=</span> <span class="vi">@conn</span><span class="p">.</span><span class="nf">tree</span><span class="p">.</span><span class="nf">nodes</span><span class="p">.</span><span class="nf">reject</span> <span class="p">{</span> <span class="o">|</span><span class="nb">display</span><span class="o">|</span> <span class="nb">display</span><span class="p">.</span><span class="nf">name</span> <span class="o">==</span> <span class="s2">"__i3"</span> <span class="p">}</span>
  <span class="k">def</span> <span class="nf">open</span>
    <span class="no">Open3</span><span class="p">.</span><span class="nf">popen3</span><span class="p">([</span><span class="s1">'wofi'</span><span class="p">,</span> <span class="s1">'-i'</span><span class="p">,</span> <span class="s1">'-k'</span><span class="p">,</span> <span class="s1">'/dev/null'</span><span class="p">,</span> <span class="s1">'-d'</span><span class="p">].</span><span class="nf">join</span> <span class="s2">" "</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">_e</span><span class="p">,</span> <span class="n">_w</span><span class="o">|</span>
      <span class="n">i</span><span class="p">.</span><span class="nf">puts</span> <span class="n">list_window</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
      <span class="n">i</span><span class="p">.</span><span class="nf">close</span>
      <span class="n">list_window</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="nf">read</span><span class="p">.</span><span class="nf">strip</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">set_windows</span>
    <span class="n">displays</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">display</span><span class="o">|</span>
      <span class="nb">display</span><span class="p">.</span><span class="nf">nodes</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">workspace</span><span class="o">|</span> <span class="vi">@windows</span> <span class="o">+=</span> <span class="n">workspace</span><span class="p">.</span><span class="nf">nodes</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">SwayWindowSwithcer</span><span class="p">.</span><span class="nf">switch</span>
</code></pre></div></div>

<p><strong>i3</strong> は <a href="https://i3wm.org/docs/ipc.html"><strong>IPC</strong> が定義</a> されています <sup id="fnref:ipc"><a href="#fn:ipc" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> 。
今利用している <strong>sway</strong> は <strong>i3</strong> の <strong>wayland</strong> 向け実装なので <strong>IPC</strong> に互換性があります。
そのまま <strong>i3ipc</strong> 関連のライブラリを利用することが可能です。
ということで今回は <strong>ruby</strong> の <strong>gem</strong> として <strong>i3ipc.gem</strong> というそのままのやつがあったので利用します。
<strong>i3</strong> で起動しているウィンドウ一覧を取得して、名前を <strong>wofi</strong> に渡します。
ウィンドウ一覧を受け取った <strong>wofi</strong> は切り替えたいウィンドウを絞り込み、選択ができます。
切り替えたいウィンドウを選択したら、今度は <strong>i3</strong> へ選択したウィンドウへのフォーカスする命令を送ります。</p>

<p>ここで注意点として、二つありひとつ目は以下があります。
<strong>ruby</strong> の <strong>i3ipc</strong> は <code class="language-plaintext highlighter-rouge">I3Ipc::Connection</code> からでしかコマンドを送れないです<sup id="fnref:sanko"><a href="#fn:sanko" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>。
そのためこのプログラムでは <code class="language-plaintext highlighter-rouge">@conn.command</code> でコマンドを送るとします。
このままではどのウインドウかはわからないので <strong>i3</strong> コマンドを送る際に <code class="language-plaintext highlighter-rouge">[con_id=id]</code> を付けます。
今回はウィンドウを切り替えることをしたいだけなので <code class="language-plaintext highlighter-rouge">[con_id=id] focus</code> とします。
ふたつ目はシステムの <strong>ruby</strong> を利用する際には必要な <strong>gem</strong> がシステムにインストールされている必要があります。
もしインストールされていないのであれば手動でいれる必要があります<sup id="fnref:bundler"><a href="#fn:bundler" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>。</p>

<p><img src="/images/screenshot/wofi-window-switcher.webp" alt="" /></p>

<h2 id="おわり">おわり</h2>

<p>あたらしい PC を買い、デスクトップ環境を替えました。
あたらしい環境で少し不便だったところを解消するプログラムを書いてみました。</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:ipc">
      <p>InerProcess Communication <a href="#fnref:ipc" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:sanko">
      <p>参考にした <strong>Python</strong> はウィンドウのオブジェクトから直接コマンドが送れます。 <a href="#fnref:sanko" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:bundler">
      <p><strong>root</strong> ユーザーで一度実行するか、手動でやる必要がある。インラインとはいったい…… <a href="#fnref:bundler" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="diary" /><category term="tech" /><summary type="html"><![CDATA[あたらしく PC 買って、 Linux の GUI 環境を X11 から Wayland に乗り変えることにしました。 いままで利用していたデスクトップ環境を i3 から sway に変更しました。 最近利用していた macOS や i3 ではあまり気にしていなかったのですが、Windows の Alt+Tab での ウインドウ切り替えが便利だったのを思い出したのでこの便利な機能を模倣することにしました。]]></summary></entry><entry><title type="html">いいかんじに Bundler で管理されていない Gem を使いたい</title><link href="https://blog.katsyoshi.org/blog/2023/11/16/how-to-use-irb-configuration-in-bundle-exec/" rel="alternate" type="text/html" title="いいかんじに Bundler で管理されていない Gem を使いたい" /><published>2023-11-16T23:59:59+09:00</published><updated>2023-11-16T23:59:59+09:00</updated><id>https://blog.katsyoshi.org/blog/2023/11/16/how-to-use-irb-configuration-in-bundle-exec</id><content type="html" xml:base="https://blog.katsyoshi.org/blog/2023/11/16/how-to-use-irb-configuration-in-bundle-exec/"><![CDATA[<p>前回作成した <code class="language-plaintext highlighter-rouge">irb-theme-dracula</code> を <strong>bundler</strong> で <strong>gem</strong> が管理されているプロジェクトで利用したい。
利用したいが、そのままでは利用できないです。
これは <strong>gem</strong> が <strong>bundler</strong> で管理されているので、 <code class="language-plaintext highlighter-rouge">Gemfile</code> に書いていない <strong>gem</strong> は利用できないです。</p>

<h2 id="対処案">対処案</h2>

<p><strong>bundler</strong> で管理されていない <strong>gem</strong> をどうしても利用したい場合は以下のような方法が考えられます。</p>

<ol>
  <li>:100: <code class="language-plaintext highlighter-rouge">Gemfile</code> に追加: 正攻法。ただ複数人で開発しているなどの場合色付けだけの機能で追加するのかというと…</li>
  <li>:+1: 古きよき方法: <a href="https://i.loveruby.net/ja/projects/setup/doc/usage.html"><code class="language-plaintext highlighter-rouge">setup.rb</code></a> を利用して、対象 <strong>gem</strong> の必要ファイルをインストールする。</li>
  <li>:poop: 実行する <strong>Ruby</strong> の <code class="language-plaintext highlighter-rouge">$LOAD_PATH</code> に <strong>gem</strong> のパスを追加: 強引にパスを追加して <code class="language-plaintext highlighter-rouge">require</code> することで解決。</li>
</ol>

<p>ということでそれぞれ方法をみてみましょう。</p>

<h3 id="gemfile-に追加">Gemfile に追加</h3>

<p>正攻法ですね。便利で全員が使い、必要なら追加しましょう。
どうしても利用したい場合でプロジェクトの <code class="language-plaintext highlighter-rouge">Gemfile</code> に書きたくない場合はプロジェクトを管理している<strong>バージョン管理システム</strong> にコミットしないなどオペレーションを行いましょう。
管理方法が大変なのでこの方法はないなと。</p>

<h3 id="古きよき方法">古きよき方法</h3>

<p><strong>rubygems</strong> が生まれる前の方法をとりましょう。ここでは <strong><code class="language-plaintext highlighter-rouge">setup.rb</code></strong> で <code class="language-plaintext highlighter-rouge">site_ruby</code> に必要なファイルをインストールしてくれます。
便利なやつです。</p>

<h4 id="使い方">使い方</h4>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>gem <span class="nb">install </span>setup <span class="c"># gem でイントールします。</span>
<span class="gp">#</span><span class="w"> </span>インストールしたい gem のリポジトリをコピーなどして手元にもってきましょう。
<span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /path/to/install/gem
<span class="gp">$</span><span class="w"> </span>setup.rb <span class="nb">install</span> <span class="c"># gem のインストールが行なわれます。</span>
<span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /path/to/your/project
<span class="gp">$</span><span class="w"> </span>bundle <span class="nb">exec </span>ruby your/scrip.rb
</code></pre></div></div>

<p>これでできるのですが問題点があり、この方法では利用したいプロジェクト以外でも利用できてしまうので特定のプログラムだけで <code class="language-plaintext highlighter-rouge">site_ruby</code> を読み込むとかしていいかんじに使い分けるには少し工夫が必要です。
全部の <strong>Ruby</strong> プログラムで利用したい訳ではないのでこの方法については断念。</p>

<h3 id="実行する-ruby-の-load_path-に利用する-gem-のパスを追加">実行する Ruby の $LOAD_PATH に利用する gem のパスを追加</h3>

<p>この方法は単純で、プログラム側で必要なファイルを読み込む時のみ利用する。
利用するファイル(<code class="language-plaintext highlighter-rouge">require "irb/theme/dracula/light"</code> を書いているファイル)で利用したい <strong>gem</strong> へのパスを <code class="language-plaintext highlighter-rouge">$LOAD_PATH</code> へ追加します。
<code class="language-plaintext highlighter-rouge">$LOAD_PATH</code> への追加方法としては以下の方法があります。</p>

<ol>
  <li>環境変数 (<code class="language-plaintext highlighter-rouge">$RUBYLIB</code>) に指定: 環境変数を利用するごとに指定することができる。</li>
  <li>実行時に指定: 実行時に <code class="language-plaintext highlighter-rouge">-I/path/to/gem</code> を <code class="language-plaintext highlighter-rouge">ruby</code> の引数に利用可能。利用するごとに指定する必要がある。</li>
  <li>実行ファイルで指定: 設定ファイルを読み込んで実行するような場合では楽。</li>
</ol>

<p>ここでは <strong>実行ファイルで指定</strong> する方法を見ていきましょう。</p>

<p>実行対象のプログラムは <code class="language-plaintext highlighter-rouge">irb</code> です。 <code class="language-plaintext highlighter-rouge">irb</code> は <code class="language-plaintext highlighter-rouge">~/.irbrc</code> を読み込んで起動するため、 <code class="language-plaintext highlighter-rouge">~/.irbrc</code> に以下のような設定を書きます。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Reline 0.4.0 以上に対応した irb のバージョンチェック</span>
<span class="k">if</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">IRB</span><span class="o">::</span><span class="no">VERSION</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"1.9.0"</span><span class="p">)</span>
  <span class="c1"># gem のインストールされるパスを取得。rbenv を利用している場合は以下</span>
  <span class="c1"># preview 判では version に previewX や 0 がついたりするので * を付与し、検索</span>
  <span class="n">ld_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="s2">"RBENV_ROOT"</span><span class="p">],</span> <span class="s2">"versions"</span><span class="p">,</span> <span class="no">RUBY_VERSION</span> <span class="o">+</span> <span class="s2">"*"</span><span class="p">,</span> <span class="s2">"lib"</span><span class="p">,</span> <span class="s2">"ruby"</span><span class="p">,</span> <span class="s2">"gems"</span><span class="p">,</span> <span class="no">RUBY_VERSION</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sr">/\d+$/</span><span class="p">,</span> <span class="s2">"0*"</span><span class="p">),</span> <span class="s2">"gems"</span><span class="p">)</span>
  <span class="c1"># 読み込む gem 対象のパスを取得</span>
  <span class="n">gem_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ld_path</span><span class="p">,</span> <span class="s2">"irb-theme"</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"-*"</span><span class="p">).</span><span class="nf">last</span><span class="p">,</span> <span class="s2">"lib"</span><span class="p">)</span>
  <span class="vg">$LOAD_PATH</span><span class="p">.</span><span class="nf">unshift</span><span class="p">(</span><span class="n">gem_path</span><span class="p">)</span> <span class="c1"># LOAD_PATH に追加</span>
  <span class="vg">$LOAD_PATH</span><span class="p">.</span><span class="nf">uniq!</span> <span class="c1"># LOAD_PATH に追加した重複してた場合削除</span>
  <span class="nb">require</span> <span class="s2">"irb/theme/dracula/light"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>この設定を書いたら <strong>Ruby</strong> を <code class="language-plaintext highlighter-rouge">3.3.0-preview3</code> 以上にして <code class="language-plaintext highlighter-rouge">bundle exec irb</code> と実行してみましょう。</p>

<p><img src="/images/screenshot/force-load-bundler-external-gem.webp" alt="" /></p>

<p>かった!</p>

<h2 id="おわり">おわり</h2>

<p><strong>gem</strong> は入ってるけど、プロジェクトで利用できないなあとおもい使えるようにしたいということでやってみました。
今回の <code class="language-plaintext highlighter-rouge">irb</code> は <strong>Ruby</strong> <code class="language-plaintext highlighter-rouge">2.2</code> 以下だとデフォルトでインストールされているのでそもそも
<code class="language-plaintext highlighter-rouge">Reline</code> の新しいバージョン(<code class="language-plaintext highlighter-rouge">0.4.0</code>)をサポートしていないのこの方法を利用してみました。</p>]]></content><author><name></name></author><category term="diary" /><summary type="html"><![CDATA[前回作成した irb-theme-dracula を bundler で gem が管理されているプロジェクトで利用したい。 利用したいが、そのままでは利用できないです。 これは gem が bundler で管理されているので、 Gemfile に書いていない gem は利用できないです。]]></summary></entry></feed>